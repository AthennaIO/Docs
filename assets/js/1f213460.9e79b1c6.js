"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[4123],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return p}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=l(n),p=r,h=m["".concat(c,".").concat(p)]||m[p]||u[p]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7201:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:1,id:"routing",title:"Routing",hide_title:!0,hide_table_of_contents:!0,tags:["Getting Started","Architecture Concepts","The Basics"]},c=void 0,l={unversionedId:"the-basics/cli/routing",id:"the-basics/cli/routing",title:"Routing",description:"\ud83c\udfe0",source:"@site/docs/the-basics/cli/routing.mdx",sourceDirName:"the-basics/cli",slug:"/the-basics/cli/routing",permalink:"/docs/the-basics/cli/routing",editUrl:"https://github.com/AthennaIO/Docs/docs/the-basics/cli/routing.mdx",tags:[{label:"Getting Started",permalink:"/docs/tags/getting-started"},{label:"Architecture Concepts",permalink:"/docs/tags/architecture-concepts"},{label:"The Basics",permalink:"/docs/tags/the-basics"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"routing",title:"Routing",hide_title:!0,hide_table_of_contents:!0,tags:["Getting Started","Architecture Concepts","The Basics"]},sidebar:"tutorialSidebar",previous:{title:"Request Context",permalink:"/docs/the-basics/http/context"},next:{title:"Commands",permalink:"/docs/the-basics/cli/commands"}},d=[{value:"Basic routing",id:"id-base-routing",children:[{value:"Additional flags",id:"id-additional-flags",children:[],level:3}],level:2},{value:"Listing commands",id:"id-listing-commands",children:[],level:2}],u={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("nav",{"aria-label":"breadcrumbs"},(0,i.kt)("ul",{class:"breadcrumbs"},(0,i.kt)("li",{class:"breadcrumbs__item"},(0,i.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,i.kt)("li",{class:"breadcrumbs__item"},(0,i.kt)("a",{class:"breadcrumbs__link"},"The Basics")),(0,i.kt)("li",{class:"breadcrumbs__item"},(0,i.kt)("a",{class:"breadcrumbs__link"},"Cli")),(0,i.kt)("li",{class:"breadcrumbs__item"},(0,i.kt)("a",{class:"breadcrumbs__link",href:"/docs/the-basics/cli/routing"},"Routing")))),(0,i.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,i.kt)("h1",{id:"routing"},"Routing"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"basic-routing"},(0,i.kt)("a",{parentName:"h4",href:"#id-basic-routing"},"Basic routing")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"additional-flags"},(0,i.kt)("a",{parentName:"h4",href:"#id-additional-flags"},"Additional flags"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"listing-commands"},(0,i.kt)("a",{parentName:"h4",href:"#id-listing-commands"},"Listing commands")))),(0,i.kt)("h2",{id:"id-base-routing"},"Basic routing"),(0,i.kt)("p",null,"The most basic Athenna console routes accept a command signature and a closure, providing a very simple and expressive\nmethod of defining routes and behavior without complicated routing configuration files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Artisan } from '@athenna/artisan' // Artisan Facade\n\nArtisan.command('hello', function () {\n  this.success('Hello from Athenna!')\n})\n")),(0,i.kt)("h3",{id:"id-additional-flags"},"Additional flags"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"command")," method from Artisan facade always returns the instance of ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/commander"},(0,i.kt)("inlineCode",{parentName:"a"},"commander")),".\nWith this behavior you can set additional flags for your command when registering it. See the example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Artisan } from '@athenna/artisan' // Artisan Facade\n\nArtisan.command('hello', function (options) {\n  if (options.error) {\n    this.error('Hello from Athenna!')\n\n    return\n  }\n\n  this.success('Hello from Athenna!')\n})\n  .description('Athenna says hello.')\n  .option('--no-error', 'Log with error helper instead of success.', false)\n  .createHelp()\n")),(0,i.kt)("h2",{id:"id-listing-commands"},"Listing commands"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"node artisan")," command can easily provide an overview of all the commands that are defined by your application:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan\n")),(0,i.kt)("p",null,"You can list in a more detailed way the subcommands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan list make\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan list route\n")))}m.isMDXComponent=!0}}]);