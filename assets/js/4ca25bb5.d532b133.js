"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[4085],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=s.createContext({}),p=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},y=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(n),y=a,h=u["".concat(l,".").concat(y)]||u[y]||c[y]||r;return n?s.createElement(h,o(o({ref:t},d),{},{components:n})):s.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=y;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}y.displayName="MDXCreateElement"},2081:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var s=n(7462),a=(n(7294),n(3905));const r={title:"REST API Testing",sidebar_position:2,description:"See how to create tests for REST APIs applications in Athenna."},o="REST API Testing",i={unversionedId:"testing/rest-api-testing",id:"testing/rest-api-testing",title:"REST API Testing",description:"See how to create tests for REST APIs applications in Athenna.",source:"@site/docs/testing/rest-api-testing.mdx",sourceDirName:"testing",slug:"/testing/rest-api-testing",permalink:"/docs/testing/rest-api-testing",draft:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/testing/rest-api-testing.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"REST API Testing",sidebar_position:2,description:"See how to create tests for REST APIs applications in Athenna."},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/testing/getting-started"},next:{title:"CLI Testing",permalink:"/docs/testing/cli-tests"}},l={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Registering <code>request</code> plugin",id:"registering-request-plugin",level:2},{value:"Making Requests",id:"making-requests",level:2},{value:"Customizing request",id:"customizing-request",level:3},{value:"Debugging responses",id:"debugging-responses",level:3},{value:"Testing file uploads",id:"testing-file-uploads",level:2},{value:"Response assertions",id:"response-assertions",level:2},{value:"<code>assertStatusCode()</code>",id:"assertstatuscode",level:4},{value:"<code>assertBodyContains()</code>",id:"assertbodycontains",level:4},{value:"<code>assertBodyContainsKey()</code>",id:"assertbodycontainskey",level:4},{value:"<code>assertBodyContainsAllKeys()</code>",id:"assertbodycontainsallkeys",level:4},{value:"<code>assertBodyDeepEqual()</code>",id:"assertbodydeepequal",level:4},{value:"<code>assertBodyIsArray()</code>",id:"assertbodyisarray",level:4},{value:"<code>assertBodyIsObject()</code>",id:"assertbodyisobject",level:4},{value:"<code>assertHeaderContains()</code>",id:"assertheadercontains",level:4},{value:"<code>assertHeaderContainsKey()</code>",id:"assertheadercontainskey",level:4},{value:"<code>assertHeaderContainsAllKeys()</code>",id:"assertheadercontainsallkeys",level:4},{value:"<code>assertHeaderDeepEqual()</code>",id:"assertheaderdeepequal",level:4}],d={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,s.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rest-api-testing"},"REST API Testing"),(0,a.kt)("p",null,"See how to create tests for REST APIs applications in Athenna."),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Athenna provides a very fluent API for making HTTP\nrequests to your application and examining the responses.\nFor example, take a look at the e2e test defined below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Test, type Context } from '@athenna/test'\n\nexport default class ExampleTest {\n  @Test()\n  public async 'test successful response'({ request }: Context) {\n    const response = await request.get('/')\n\n    response.assertStatusCode(200)\n  }\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"request.get()")," method makes a ",(0,a.kt)("inlineCode",{parentName:"p"},"GET")," request into the application,\nwhile the ",(0,a.kt)("inlineCode",{parentName:"p"},"assertStatusCode()")," method asserts that the returned\nresponse should have the given HTTP status code. In addition\nto this simple assertion, Athenna also contains a variety of\nassertions for inspecting the response headers, content,\nJSON structure, and more."),(0,a.kt)("h2",{id:"registering-request-plugin"},"Registering ",(0,a.kt)("inlineCode",{parentName:"h2"},"request")," plugin"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"request")," property in your test context will only be\navailable if you register the request plugin within the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Runner")," class. By default, your Athenna application already\ncomes with the request plugin registered. But we are going\nto cover how to register it manually if needed."),(0,a.kt)("p",null,"Just call the ",(0,a.kt)("inlineCode",{parentName:"p"},"Runner.addPlugin()")," static method to setup\nthe request plugin imported from ",(0,a.kt)("inlineCode",{parentName:"p"},"@athenna/http/testing/plugins"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=\"Path.bootstrap('test.ts')\"",title:"\"Path.bootstrap('test.ts')\""},"import { request } from '@athenna/http/testing/plugins'\nimport { command } from '@athenna/artisan/testing/plugins'\nimport { Runner, assert, specReporter } from '@athenna/test'\n\nawait Runner.setTsEnv()\n  .addPlugin(assert())\n  .addPlugin(request()) \ud83d\udc48\n  .addPlugin(command())\n  .addReporter(specReporter())\n  .addPath('tests/e2e/**/*.ts')\n  .addPath('tests/unit/**/*.ts')\n  .setCliArgs(process.argv.slice(2))\n  .setGlobalTimeout(5000)\n  .run()\n")),(0,a.kt)("h2",{id:"making-requests"},"Making Requests"),(0,a.kt)("p",null,"To make a request to your application, you may invoke the\n",(0,a.kt)("inlineCode",{parentName:"p"},"request.get()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"request.post()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"request.put()"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"request.patch()"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"request.delete()"),' methods\nwithin your test. These methods do not actually issue a "real"\nHTTP request to your application. Instead, the entire network\nrequest is simulated internally.'),(0,a.kt)("p",null,"Instead of returning a response instance, test request methods\nreturn an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"TestResponse"),", which provides a ",(0,a.kt)("a",{parentName:"p",href:"/docs/testing/rest-api-testing#response-assertions"},"variety\nof helpful assertions"),"\nthat allow you to inspect your application's\nresponses:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Test, type Context } from '@athenna/test'\n\nexport default class ExampleTest {\n  @Test()\n  public async testBasicRequest({ request }: Context) {\n    const response = await request.get('/')\n\n    response.assertStatusCode(200)\n  }\n}\n")),(0,a.kt)("h3",{id:"customizing-request"},"Customizing request"),(0,a.kt)("p",null,"All the request methods accept a second argument where you can\nsetup the request options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { type InjectOptions } from '@athenna/http'\nimport { Test, type Context } from '@athenna/test'\n\nexport default class ExampleTest {\n  @Test()\n  public async testBasicRequest({ request }: Context) {\n    const options: InjectOptions = {\n      headers: {\n        'X-Header': 'value'\n      },\n      body: {\n        foo: 'bar'\n      }\n    }\n\n    const response = await request.get('/', options)\n\n    response.assertStatusCode(200)\n  }\n}\n")),(0,a.kt)("h3",{id:"debugging-responses"},"Debugging responses"),(0,a.kt)("p",null,"After making a test request to your application, the ",(0,a.kt)("inlineCode",{parentName:"p"},"response"),"\nreturned will contain the ",(0,a.kt)("inlineCode",{parentName:"p"},"response")," property inside with all the\nresponse data:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Test, type Context } from '@athenna/test'\n\nexport default class ExampleTest {\n  @Test()\n  public async testBasicRequest({ request }: Context) {\n    const response = await request.get('/')\n\n    console.log(response.response.status)\n\n    response.assertStatusCode(200)\n  }\n}\n")),(0,a.kt)("h2",{id:"testing-file-uploads"},"Testing file uploads"),(0,a.kt)("p",null,"Coming soon with ",(0,a.kt)("inlineCode",{parentName:"p"},"@athenna/storage")," package!"),(0,a.kt)("h2",{id:"response-assertions"},"Response assertions"),(0,a.kt)("p",null,"Athenna's ",(0,a.kt)("inlineCode",{parentName:"p"},"TestResponse")," class provides a variety of custom\nassertion methods that you may utilize when testing your\napplication. These assertions may be accessed on the\nresponse that is returned by the ",(0,a.kt)("inlineCode",{parentName:"p"},"request.get()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"request.post()"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"request.put()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"request.patch()"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"request.delete()")," test methods:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/testing/rest-api-testing#assertstatuscode"},(0,a.kt)("inlineCode",{parentName:"a"},"assertStatusCode()"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/testing/rest-api-testing#assertbodycontains"},(0,a.kt)("inlineCode",{parentName:"a"},"assertBodyContains()"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/testing/rest-api-testing#assertbodycontainskey"},(0,a.kt)("inlineCode",{parentName:"a"},"assertBodyContainsKey()"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/testing/rest-api-testing#assertbodycontainsallkeys"},(0,a.kt)("inlineCode",{parentName:"a"},"assertBodyContainsAllKeys()"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/testing/rest-api-testing#assertbodydeepequal"},(0,a.kt)("inlineCode",{parentName:"a"},"assertBodyDeepEqual()"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/testing/rest-api-testing#assertbodyisarray"},(0,a.kt)("inlineCode",{parentName:"a"},"assertBodyIsArray()"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/testing/rest-api-testing#assertbodyisobject"},(0,a.kt)("inlineCode",{parentName:"a"},"assertBodyIsObject()"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/testing/rest-api-testing#assertheadercontains"},(0,a.kt)("inlineCode",{parentName:"a"},"assertHeaderContains()"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/testing/rest-api-testing#assertheadercontainskey"},(0,a.kt)("inlineCode",{parentName:"a"},"assertHeaderContainsKey()"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/testing/rest-api-testing#assertheadercontainsallkeys"},(0,a.kt)("inlineCode",{parentName:"a"},"assertHeaderContainsAllKeys()"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/testing/rest-api-testing#assertheaderdeepequal"},(0,a.kt)("inlineCode",{parentName:"a"},"assertHeaderDeepEqual()")))),(0,a.kt)("h4",{id:"assertstatuscode"},(0,a.kt)("inlineCode",{parentName:"h4"},"assertStatusCode()")),(0,a.kt)("p",null,"Assert that the response has a given HTTP status code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const statusCode = 200\n\nresponse.assertStatusCode(statusCode)\nresponse.assertIsNotStatusCode(statusCode)\n")),(0,a.kt)("h4",{id:"assertbodycontains"},(0,a.kt)("inlineCode",{parentName:"h4"},"assertBodyContains()")),(0,a.kt)("p",null,"Assert that the response body contains some of\nthe given values:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const partialBody = { hello: 'world' } \n\nresponse.assertBodyContains(partialBody)\nresponse.assertBodyNotContains(partialBody)\n")),(0,a.kt)("h4",{id:"assertbodycontainskey"},(0,a.kt)("inlineCode",{parentName:"h4"},"assertBodyContainsKey()")),(0,a.kt)("p",null,"Assert that the response body contains a key with\nthe given name:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const key = 'hello'\n\nresponse.assertBodyContainsKey(key)\nresponse.assertBodyNotContainsKey(key)\n")),(0,a.kt)("h4",{id:"assertbodycontainsallkeys"},(0,a.kt)("inlineCode",{parentName:"h4"},"assertBodyContainsAllKeys()")),(0,a.kt)("p",null,"Assert that the response body contains all the keys\nwith given names:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const keys = ['hello']\n\nresponse.assertBodyContainsAllKeys(keys)\nresponse.assertBodyNotContainsAllKeys(keys)\n")),(0,a.kt)("h4",{id:"assertbodydeepequal"},(0,a.kt)("inlineCode",{parentName:"h4"},"assertBodyDeepEqual()")),(0,a.kt)("p",null,"Assert that the response body is deep equal and\nexactly like the given value:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const fullBody = [{ hello: 'world' }]\n\nresponse.assertBodyDeepEqual(fullBody)\nresponse.assertBodyNotDeepEqual(fullBody)\n")),(0,a.kt)("h4",{id:"assertbodyisarray"},(0,a.kt)("inlineCode",{parentName:"h4"},"assertBodyIsArray()")),(0,a.kt)("p",null,"Assert that the response body is an array:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"response.assertBodyIsArray()\nresponse.assertBodyIsNotArray()\n")),(0,a.kt)("h4",{id:"assertbodyisobject"},(0,a.kt)("inlineCode",{parentName:"h4"},"assertBodyIsObject()")),(0,a.kt)("p",null,"Assert that the response body is an object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"response.assertBodyIsObject()\nresponse.assertBodyIsNotObject()\n")),(0,a.kt)("h4",{id:"assertheadercontains"},(0,a.kt)("inlineCode",{parentName:"h4"},"assertHeaderContains()")),(0,a.kt)("p",null,"Assert that the response header contains some of\nthe given values:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const partialHeader = { hello: 'world' } \n\nresponse.assertHeaderContains(partialHeader)\nresponse.assertHeaderNotContains(partialHeader)\n")),(0,a.kt)("h4",{id:"assertheadercontainskey"},(0,a.kt)("inlineCode",{parentName:"h4"},"assertHeaderContainsKey()")),(0,a.kt)("p",null,"Assert that the response header contains a key with\nthe given name:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const key = 'hello'\n\nresponse.assertHeaderContainsKey(key)\nresponse.assertHeaderNotContainsKey(key)\n")),(0,a.kt)("h4",{id:"assertheadercontainsallkeys"},(0,a.kt)("inlineCode",{parentName:"h4"},"assertHeaderContainsAllKeys()")),(0,a.kt)("p",null,"Assert that the response header contains all the keys\nwith given names:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const keys = ['hello']\n\nresponse.assertHeaderContainsAllKeys(keys)\nresponse.assertHeaderNotContainsAllKeys(keys)\n")),(0,a.kt)("h4",{id:"assertheaderdeepequal"},(0,a.kt)("inlineCode",{parentName:"h4"},"assertHeaderDeepEqual()")),(0,a.kt)("p",null,"Assert that the response header is deep equal and\nexactly like the given value:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const fullHeader = [{ hello: 'world' }]\n\nresponse.assertHeaderDeepEqual(fullHeader)\nresponse.assertHeaderNotDeepEqual(fullHeader)\n")))}c.isMDXComponent=!0}}]);