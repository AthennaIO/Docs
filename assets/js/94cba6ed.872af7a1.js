"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[2419],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=s(n),u=o,h=c["".concat(p,".").concat(u)]||c[u]||m[u]||l;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:o,r[1]=i;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4932:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const l={title:"Helpers",sidebar_position:3,description:"Understand how to use all the Athenna Helpers from @athenna/common and other packages.",tags:["The Basics","Helpers"]},r="Helpers",i={unversionedId:"the-basics/helpers",id:"the-basics/helpers",title:"Helpers",description:"Understand how to use all the Athenna Helpers from @athenna/common and other packages.",source:"@site/docs/the-basics/helpers.mdx",sourceDirName:"the-basics",slug:"/the-basics/helpers",permalink:"/docs/the-basics/helpers",draft:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/the-basics/helpers.mdx",tags:[{label:"The Basics",permalink:"/docs/tags/the-basics"},{label:"Helpers",permalink:"/docs/tags/helpers"}],version:"current",sidebarPosition:3,frontMatter:{title:"Helpers",sidebar_position:3,description:"Understand how to use all the Athenna Helpers from @athenna/common and other packages.",tags:["The Basics","Helpers"]},sidebar:"tutorialSidebar",previous:{title:"Views",permalink:"/docs/the-basics/views"},next:{title:"Compilation",permalink:"/docs/the-basics/compilation"}},p={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Available helpers",id:"available-helpers",level:2},{value:"Clean",id:"clean",level:3},{value:"<code>Clean::cleanArray()</code>",id:"cleancleanarray",level:4},{value:"<code>Clean::cleanObject()</code>",id:"cleancleanobject",level:4},{value:"Color",id:"color",level:3},{value:"<code>Color::apply()</code>",id:"colorapply",level:4},{value:"<code>Color::remove()</code>",id:"colorremove",level:4},{value:"<code>Color::httpMethod()</code>",id:"colorhttpmethod",level:4},{value:"Exception",id:"exception",level:3},{value:"<code>Exception.toJSON()</code>",id:"exceptiontojson",level:4},{value:"<code>Exception.prettify()</code>",id:"exceptionprettify",level:4},{value:"Exec",id:"exec",level:3},{value:"<code>Exec::sleep()</code>",id:"execsleep",level:4},{value:"<code>Exec::concurrently()</code>",id:"execconcurrently",level:4},{value:"<code>Exec::command()</code>",id:"execcommand",level:4},{value:"<code>Exec::download()</code>",id:"execdownload",level:4},{value:"<code>Exec::pagination()</code>",id:"execpagination",level:4},{value:"FakeApi",id:"fakeapi",level:3},{value:"<code>FakeApi::start()</code>",id:"fakeapistart",level:4},{value:"<code>FakeApi::stop()</code>",id:"fakeapistop",level:4},{value:"<code>FakeApi::isRunning()</code>",id:"fakeapiisrunning",level:4},{value:"<code>FakeApi::listRoutes()</code>",id:"fakeapilistroutes",level:4},{value:"<code>FakeApi::registerFile()</code>",id:"fakeapiregisterfile",level:4},{value:"<code>FakeApi::registerFolder()</code>",id:"fakeapiregisterfolder",level:4},{value:"<code>FakeApi::build()</code>",id:"fakeapibuild",level:4},{value:"File",id:"file",level:3},{value:"<code>File.load()</code> &amp; <code>File.loadSync()</code>",id:"fileload--fileloadsync",level:4},{value:"<code>File.copy()</code> &amp; <code>File.copySync()</code>",id:"filecopy--filecopysync",level:4},{value:"<code>File.move()</code> &amp; <code>File.moveSync()</code>",id:"filemove--filemovesync",level:4},{value:"<code>File.remove()</code> &amp; <code>File.removeSync()</code>",id:"fileremove--fileremovesync",level:4},{value:"<code>File.setContent()</code> &amp; <code>File.setContentSync()</code>",id:"filesetcontent--filesetcontentsync",level:4},{value:"<code>File.getContent()</code> &amp; <code>File.getContentSync()</code>",id:"filegetcontent--filegetcontentsync",level:4},{value:"<code>File.getContentAsString()</code> &amp; <code>File.getContentAsStringSync()</code>",id:"filegetcontentasstring--filegetcontentasstringsync",level:4},{value:"<code>File.getContentAsJson()</code> &amp; <code>File.getContentAsJsonSync()</code>",id:"filegetcontentasjson--filegetcontentasjsonsync",level:4},{value:"<code>File.getContentAsBuilder()</code> &amp; <code>File.getContentAsBuilderSync()</code>",id:"filegetcontentasbuilder--filegetcontentasbuildersync",level:4},{value:"<code>File.append()</code> &amp; <code>File.appendSync()</code>",id:"fileappend--fileappendsync",level:4},{value:"<code>File.prepend()</code> &amp; <code>File.prependSync()</code>",id:"fileprepend--fileprependsync",level:4},{value:"<code>File.createReadStream()</code>",id:"filecreatereadstream",level:4},{value:"<code>File.createWriteStream()</code>",id:"filecreatewritestream",level:4},{value:"<code>File.toJSON()</code>",id:"filetojson",level:4},{value:"<code>File.import()</code>",id:"fileimport",level:4},{value:"<code>File.safeImport()</code>",id:"filesafeimport",level:4},{value:"<code>File::safeRemove()</code>",id:"filesaferemove",level:4},{value:"<code>File::exists()</code> &amp; <code>File::existsSync()</code>",id:"fileexists--fileexistssync",level:4},{value:"<code>File::isFile()</code> &amp; <code>File::isFileSync()</code>",id:"fileisfile--fileisfilesync",level:4},{value:"<code>File::createFileOfSize()</code>",id:"filecreatefileofsize",level:4},{value:"Folder",id:"folder",level:3},{value:"<code>Folder.load()</code> &amp; <code>Folder.loadSync()</code>",id:"folderload--folderloadsync",level:4},{value:"<code>Folder.copy()</code> &amp; <code>Folder.copySync()</code>",id:"foldercopy--foldercopysync",level:4},{value:"<code>Folder.move()</code> &amp; <code>Folder.moveSync()</code>",id:"foldermove--foldermovesync",level:4},{value:"<code>Folder.remove()</code> &amp; <code>Folder.removeSync()</code>",id:"folderremove--folderremovesync",level:4},{value:"<code>Folder.toJSON()</code>",id:"foldertojson",level:4},{value:"<code>Folder.getFilesByPattern()</code>",id:"foldergetfilesbypattern",level:4},{value:"<code>Folder.getFoldersByPattern()</code>",id:"foldergetfoldersbypattern",level:4},{value:"<code>Folder::safeRemove()</code>",id:"foldersaferemove",level:4},{value:"<code>Folder::exists()</code> &amp; <code>Folder::existsSync()</code>",id:"folderexists--folderexistssync",level:4},{value:"<code>Folder::isFolder()</code> &amp; <code>Folder::isFolderSync()</code>",id:"folderisfolder--folderisfoldersync",level:4},{value:"<code>Folder::size()</code> &amp; <code>Folder::sizeSync()</code>",id:"foldersize--foldersizesync",level:4},{value:"HttpClient",id:"httpclient",level:3},{value:"<code>HttpClient::get()</code>",id:"httpclientget",level:4},{value:"<code>HttpClient::post()</code>",id:"httpclientpost",level:4},{value:"<code>HttpClient::put()</code>",id:"httpclientput",level:4},{value:"<code>HttpClient::patch()</code>",id:"httpclientpatch",level:4},{value:"<code>HttpClient::delete()</code>",id:"httpclientdelete",level:4},{value:"<code>HttpClient::head()</code>",id:"httpclienthead",level:4},{value:"<code>HttpClient::builder()</code> &amp; <code>HttpClient::setBuilder()</code>",id:"httpclientbuilder--httpclientsetbuilder",level:4},{value:"HttpClientBuilder",id:"httpclientbuilder",level:3},{value:"<code>HttpClientBuilder.setInitHook()</code>",id:"httpclientbuildersetinithook",level:4},{value:"<code>HttpClientBuilder.setBeforeRequestHook()</code>",id:"httpclientbuildersetbeforerequesthook",level:4},{value:"<code>HttpClientBuilder.setBeforeRedirectHook()</code>",id:"httpclientbuildersetbeforeredirecthook",level:4},{value:"<code>HttpClientBuilder.setBeforeErrorHook()</code>",id:"httpclientbuildersetbeforeerrorhook",level:4},{value:"<code>HttpClientBuilder.setBeforeRetryHook()</code>",id:"httpclientbuildersetbeforeretryhook",level:4},{value:"<code>HttpClientBuilder.setAfterResponseHook()</code>",id:"httpclientbuildersetafterresponsehook",level:4},{value:"<code>HttpClientBuilder.agent()</code>",id:"httpclientbuilderagent",level:4},{value:"<code>HttpClientBuilder.http2()</code>",id:"httpclientbuilderhttp2",level:4},{value:"<code>HttpClientBuilder.h2session()</code>",id:"httpclientbuilderh2session",level:4},{value:"<code>HttpClientBuilder.decompress()</code>",id:"httpclientbuilderdecompress",level:4},{value:"<code>HttpClientBuilder.timeout()</code>",id:"httpclientbuildertimeout",level:4},{value:"<code>HttpClientBuilder.body()</code>",id:"httpclientbuilderbody",level:4},{value:"<code>HttpClientBuilder.form()</code>",id:"httpclientbuilderform",level:4},{value:"<code>HttpClientBuilder.header()</code>",id:"httpclientbuilderheader",level:4},{value:"<code>HttpClientBuilder.safeHeader()</code>",id:"httpclientbuildersafeheader",level:4},{value:"<code>HttpClientBuilder.removeHeader()</code>",id:"httpclientbuilderremoveheader",level:4},{value:"<code>HttpClientBuilder.prefixUrl()</code>",id:"httpclientbuilderprefixurl",level:4},{value:"<code>HttpClientBuilder.method()</code>",id:"httpclientbuildermethod",level:4},{value:"<code>HttpClientBuilder.url()</code>",id:"httpclientbuilderurl",level:4},{value:"<code>HttpClientBuilder.cookieJar()</code>",id:"httpclientbuildercookiejar",level:4},{value:"<code>HttpClientBuilder.signal()</code>",id:"httpclientbuildersignal",level:4},{value:"<code>HttpClientBuilder.ignoreInvalidCookies()</code>",id:"httpclientbuilderignoreinvalidcookies",level:4},{value:"<code>HttpClientBuilder.searchParams()</code>",id:"httpclientbuildersearchparams",level:4},{value:"<code>HttpClientBuilder.queryParams()</code>",id:"httpclientbuilderqueryparams",level:4},{value:"<code>HttpClientBuilder.dnsLookup()</code>",id:"httpclientbuilderdnslookup",level:4},{value:"<code>HttpClientBuilder.dnsCache()</code>",id:"httpclientbuilderdnscache",level:4},{value:"<code>HttpClientBuilder.context()</code>",id:"httpclientbuildercontext",level:4},{value:"<code>HttpClientBuilder.hooks()</code>",id:"httpclientbuilderhooks",level:4},{value:"<code>HttpClientBuilder.followRedirect()</code>",id:"httpclientbuilderfollowredirect",level:4},{value:"<code>HttpClientBuilder.followRedirects()</code>",id:"httpclientbuilderfollowredirects",level:4},{value:"<code>HttpClientBuilder.maxRedirects()</code>",id:"httpclientbuildermaxredirects",level:4},{value:"<code>HttpClientBuilder.cacheOptions()</code>",id:"httpclientbuildercacheoptions",level:4},{value:"<code>HttpClientBuilder.cache()</code>",id:"httpclientbuildercache",level:4},{value:"<code>HttpClientBuilder.throwHttpErrors()</code>",id:"httpclientbuilderthrowhttperrors",level:4},{value:"<code>HttpClientBuilder.username()</code>",id:"httpclientbuilderusername",level:4},{value:"<code>HttpClientBuilder.password()</code>",id:"httpclientbuilderpassword",level:4},{value:"<code>HttpClientBuilder.allowGetBody()</code>",id:"httpclientbuilderallowgetbody",level:4},{value:"<code>HttpClientBuilder.methodRewriting()</code>",id:"httpclientbuildermethodrewriting",level:4},{value:"<code>HttpClientBuilder.dnsLookupIpVersion()</code>",id:"httpclientbuilderdnslookupipversion",level:4},{value:"<code>HttpClientBuilder.parseJson()</code>",id:"httpclientbuilderparsejson",level:4},{value:"<code>HttpClientBuilder.stringifyJson()</code>",id:"httpclientbuilderstringifyjson",level:4},{value:"<code>HttpClientBuilder.retry()</code>",id:"httpclientbuilderretry",level:4},{value:"<code>HttpClientBuilder.retryStrategy()</code>",id:"httpclientbuilderretrystrategy",level:4},{value:"<code>HttpClientBuilder.localAddress()</code>",id:"httpclientbuilderlocaladdress",level:4},{value:"<code>HttpClientBuilder.createConnection()</code>",id:"httpclientbuildercreateconnection",level:4},{value:"<code>HttpClientBuilder.https()</code>",id:"httpclientbuilderhttps",level:4},{value:"<code>HttpClientBuilder.encoding()</code>",id:"httpclientbuilderencoding",level:4},{value:"<code>HttpClientBuilder.resolveBodyOnly()</code>",id:"httpclientbuilderresolvebodyonly",level:4},{value:"<code>HttpClientBuilder.responseType()</code>",id:"httpclientbuilderresponsetype",level:4},{value:"<code>HttpClientBuilder.pagination()</code>",id:"httpclientbuilderpagination",level:4},{value:"<code>HttpClientBuilder.setHost()</code>",id:"httpclientbuildersethost",level:4},{value:"<code>HttpClientBuilder.maxHeaderSize()</code>",id:"httpclientbuildermaxheadersize",level:4},{value:"<code>HttpClientBuilder.enableUnixSockets()</code>",id:"httpclientbuilderenableunixsockets",level:4},{value:"<code>HttpClientBuilder.stream()</code>",id:"httpclientbuilderstream",level:4},{value:"<code>HttpClientBuilder.paginate()</code>",id:"httpclientbuilderpaginate",level:4},{value:"<code>HttpClientBuilder.request()</code>",id:"httpclientbuilderrequest",level:4},{value:"<code>HttpClientBuilder.get()</code>",id:"httpclientbuilderget",level:4},{value:"<code>HttpClientBuilder.post()</code>",id:"httpclientbuilderpost",level:4},{value:"<code>HttpClientBuilder.put()</code>",id:"httpclientbuilderput",level:4},{value:"<code>HttpClientBuilder.patch()</code>",id:"httpclientbuilderpatch",level:4},{value:"<code>HttpClientBuilder.delete()</code>",id:"httpclientbuilderdelete",level:4},{value:"<code>HttpClientBuilder.head()</code>",id:"httpclientbuilderhead",level:4},{value:"Is",id:"is",level:3},{value:"<code>Is::kindOf()</code>",id:"iskindof",level:4},{value:"<code>Is::Uuid()</code>",id:"isuuid",level:4},{value:"<code>Is::Defined()</code>",id:"isdefined",level:4},{value:"<code>Is::Json()</code>",id:"isjson",level:4},{value:"<code>Is::Ip()</code>",id:"isip",level:4},{value:"<code>Is::Empty()</code>",id:"isempty",level:4},{value:"<code>Is::Cep()</code>",id:"iscep",level:4},{value:"<code>Is::Cpf()</code>",id:"iscpf",level:4},{value:"<code>Is::Cnpj()</code>",id:"iscnpj",level:4},{value:"<code>Is::Async()</code>",id:"isasync",level:4},{value:"<code>Is::Undefined()</code>",id:"isundefined",level:4},{value:"<code>Is::Null()</code>",id:"isnull",level:4},{value:"<code>Is::Boolean()</code>",id:"isboolean",level:4},{value:"<code>Is::Buffer()</code>",id:"isbuffer",level:4},{value:"<code>Is::Number()</code>",id:"isnumber",level:4},{value:"<code>Is::String()</code>",id:"isstring",level:4},{value:"<code>Is::Object()</code>",id:"isobject",level:4},{value:"<code>Is::Date()</code>",id:"isdate",level:4},{value:"<code>Is::Array()</code>",id:"isarray",level:4},{value:"<code>Is::Regexp()</code>",id:"isregexp",level:4},{value:"<code>Is::Error()</code>",id:"iserror",level:4},{value:"<code>Is::Exception()</code>",id:"isexception",level:4},{value:"<code>Is::Class()</code>",id:"isclass",level:4},{value:"<code>Is::Float()</code>",id:"isfloat",level:4},{value:"<code>Is::ArrayOfObjects()</code>",id:"isarrayofobjects",level:4},{value:"Json",id:"json",level:3},{value:"<code>Json::builder()</code>",id:"jsonbuilder",level:4},{value:"<code>Json::copy()</code>",id:"jsoncopy",level:4},{value:"<code>Json::getJson()</code>",id:"jsongetjson",level:4},{value:"<code>Json::parse()</code>",id:"jsonparse",level:4},{value:"<code>Json::observeChanges()</code>",id:"jsonobservechanges",level:4},{value:"<code>Json::fillable()</code>",id:"jsonfillable",level:4},{value:"<code>Json::get()</code>",id:"jsonget",level:4},{value:"Module",id:"module",level:3},{value:"<code>Module::get()</code>",id:"moduleget",level:4},{value:"<code>Module::getAll()</code>",id:"modulegetall",level:4},{value:"<code>Module::getFrom()</code>",id:"modulegetfrom",level:4},{value:"<code>Module::getAllFrom()</code>",id:"modulegetallfrom",level:4},{value:"<code>Module::getWithAlias()</code>",id:"modulegetwithalias",level:4},{value:"<code>Module::getAllWithAlias()</code>",id:"modulegetallwithalias",level:4},{value:"<code>Module::getFromWithAlias()</code>",id:"modulegetfromwithalias",level:4},{value:"<code>Module::getAllFromWithAlias()</code>",id:"modulegetallfromwithalias",level:4},{value:"<code>Module::getAllJSFilesFrom()</code>",id:"modulegetalljsfilesfrom",level:4},{value:"<code>Module::import()</code>",id:"moduleimport",level:4},{value:"<code>Module::safeImport()</code>",id:"modulesafeimport",level:4},{value:"<code>Module::resolve()</code>",id:"moduleresolve",level:4},{value:"<code>Module::createDirname()</code>",id:"modulecreatedirname",level:4},{value:"<code>Module::createFilename()</code>",id:"modulecreatefilename",level:4},{value:"<code>Module::createRequire()</code>",id:"modulecreaterequire",level:4},{value:"Number",id:"number",level:3},{value:"<code>Number::getHigher()</code>",id:"numbergethigher",level:4},{value:"<code>Number::getKmRadius()</code>",id:"numbergetkmradius",level:4},{value:"<code>Number::getLower()</code>",id:"numbergetlower",level:4},{value:"<code>Number::extractNumber()</code>",id:"numberextractnumber",level:4},{value:"<code>Number::extractNumbers()</code>",id:"numberextractnumbers",level:4},{value:"<code>Number::argsAverage()</code>",id:"numberargsaverage",level:4},{value:"<code>Number::arrayAverage()</code>",id:"numberarrayaverage",level:4},{value:"<code>Number::randomIntFromInterval()</code>",id:"numberrandomintfrominterval",level:4},{value:"ObjectBuilder",id:"objectbuilder",level:3},{value:"<code>new ObjectBuilder()</code>",id:"new-objectbuilder",level:4},{value:"<code>ObjectBuilder.set()</code>",id:"objectbuilderset",level:4},{value:"<code>ObjectBuilder.delete()</code>",id:"objectbuilderdelete",level:4},{value:"<code>ObjectBuilder.get()</code>",id:"objectbuilderget",level:4},{value:"<code>ObjectBuilder.keys()</code>",id:"objectbuilderkeys",level:4},{value:"<code>ObjectBuilder.values()</code>",id:"objectbuildervalues",level:4},{value:"<code>ObjectBuilder.entries()</code>",id:"objectbuilderentries",level:4},{value:"<code>ObjectBuilder.forEachKey()</code>",id:"objectbuilderforeachkey",level:4},{value:"<code>ObjectBuilder.forEachValue()</code>",id:"objectbuilderforeachvalue",level:4},{value:"<code>ObjectBuilder.forEachEntry()</code>",id:"objectbuilderforeachentry",level:4},{value:"<code>ObjectBuilder.is()</code> &amp; <code>ObjectBuilder.isNot()</code>",id:"objectbuilderis--objectbuilderisnot",level:4},{value:"<code>ObjectBuilder.exists()</code> &amp; <code>ObjectBuilder.notExists()</code>",id:"objectbuilderexists--objectbuildernotexists",level:4},{value:"<code>ObjectBuilder.existsAll()</code> &amp; <code>ObjectBuilder.notExistsAll()</code>",id:"objectbuilderexistsall--objectbuildernotexistsall",level:4},{value:"Options",id:"options",level:3},{value:"<code>Options::create()</code>",id:"optionscreate",level:4},{value:"<code>Options::bind()</code>",id:"optionsbind",level:4},{value:"<code>Options.whenDefined()</code>",id:"optionswhendefined",level:4},{value:"Parser",id:"parser",level:3},{value:"<code>Parser::stringToArray()</code>",id:"parserstringtoarray",level:4},{value:"<code>Parser::arrayToString()</code>",id:"parserarraytostring",level:4},{value:"<code>Parser::stringToNumber()</code>",id:"parserstringtonumber",level:4},{value:"<code>Parser::jsonToFormData()</code>",id:"parserjsontoformdata",level:4},{value:"<code>Parser::formDataToJson()</code>",id:"parserformdatatojson",level:4},{value:"<code>Parser::linkToHref()</code>",id:"parserlinktohref",level:4},{value:"<code>Parser::sizeToByte()</code>",id:"parsersizetobyte",level:4},{value:"<code>Parser::byteToSize()</code>",id:"parserbytetosize",level:4},{value:"<code>Parser::timeToMs()</code>",id:"parsertimetoms",level:4},{value:"<code>Parser::msToTime()</code>",id:"parsermstotime",level:4},{value:"<code>Parser::statusCodeToReason()</code>",id:"parserstatuscodetoreason",level:4},{value:"<code>Parser::reasonToStatusCode()</code>",id:"parserreasontostatuscode",level:4},{value:"<code>Parser::dbUrlToConnectionObj()</code>",id:"parserdburltoconnectionobj",level:4},{value:"<code>Parser::connectionObjToDbUrl()</code>",id:"parserconnectionobjtodburl",level:4},{value:"<code>Parser::objectToBuilder()</code>",id:"parserobjecttobuilder",level:4},{value:"<code>Parser::arrayObjectToArrayBuilder()</code>",id:"parserarrayobjecttoarraybuilder",level:4},{value:"Path",id:"path",level:3},{value:"<code>Path::dirs</code>",id:"pathdirs",level:4},{value:"<code>Path::mergeDirs()</code>",id:"pathmergedirs",level:4},{value:"<code>Path::ext()</code>",id:"pathext",level:4},{value:"<code>Path::pwd()</code>",id:"pathpwd",level:4},{value:"<code>Path::src()</code>",id:"pathsrc",level:4},{value:"<code>Path::setSrc()</code>",id:"pathsetsrc",level:4},{value:"<code>Path::bin()</code>",id:"pathbin",level:4},{value:"<code>Path::setBin()</code>",id:"pathsetbin",level:4},{value:"<code>Path::app()</code>",id:"pathapp",level:4},{value:"<code>Path::setApp()</code>",id:"pathsetapp",level:4},{value:"<code>Path::boostrap()</code>",id:"pathboostrap",level:4},{value:"<code>Path::setBootstrap()</code>",id:"pathsetbootstrap",level:4},{value:"<code>Path::config()</code>",id:"pathconfig",level:4},{value:"<code>Path::setConfig()</code>",id:"pathsetconfig",level:4},{value:"<code>Path::database()</code>",id:"pathdatabase",level:4},{value:"<code>Path::setDatabase()</code>",id:"pathsetdatabase",level:4},{value:"<code>Path::lang()</code>",id:"pathlang",level:4},{value:"<code>Path::setLang()</code>",id:"pathsetlang",level:4},{value:"<code>Path::nodeModules()</code>",id:"pathnodemodules",level:4},{value:"<code>Path::setNodeModules()</code>",id:"pathsetnodemodules",level:4},{value:"<code>Path::providers()</code>",id:"pathproviders",level:4},{value:"<code>Path::setProviders()</code>",id:"pathsetproviders",level:4},{value:"<code>Path::facades()</code>",id:"pathfacades",level:4},{value:"<code>Path::setFacades()</code>",id:"pathsetfacades",level:4},{value:"<code>Path::public()</code>",id:"pathpublic",level:4},{value:"<code>Path::setPublic()</code>",id:"pathsetpublic",level:4},{value:"<code>Path::resources()</code>",id:"pathresources",level:4},{value:"<code>Path::setResources()</code>",id:"pathsetresources",level:4},{value:"<code>Path::routes()</code>",id:"pathroutes",level:4},{value:"<code>Path::setRoutes()</code>",id:"pathsetroutes",level:4},{value:"<code>Path::storage()</code>",id:"pathstorage",level:4},{value:"<code>Path::setStorage()</code>",id:"pathsetstorage",level:4},{value:"<code>Path::tests()</code>",id:"pathtests",level:4},{value:"<code>Path::setTests()</code>",id:"pathsettests",level:4},{value:"<code>Path::logs()</code>",id:"pathlogs",level:4},{value:"<code>Path::setLogs()</code>",id:"pathsetlogs",level:4},{value:"<code>Path::views()</code>",id:"pathviews",level:4},{value:"<code>Path::setViews()</code>",id:"pathsetviews",level:4},{value:"<code>Path::static()</code>",id:"pathstatic",level:4},{value:"<code>Path::setStatic()</code>",id:"pathsetstatic",level:4},{value:"<code>Path::assets()</code>",id:"pathassets",level:4},{value:"<code>Path::setAssets()</code>",id:"pathsetassets",level:4},{value:"<code>Path::locales()</code>",id:"pathlocales",level:4},{value:"<code>Path::setLocales()</code>",id:"pathsetlocales",level:4},{value:"<code>Path::stubs()</code>",id:"pathstubs",level:4},{value:"<code>Path::setStubs()</code>",id:"pathsetstubs",level:4},{value:"<code>Path::http()</code>",id:"pathhttp",level:4},{value:"<code>Path::setHttp()</code>",id:"pathsethttp",level:4},{value:"<code>Path::console()</code>",id:"pathconsole",level:4},{value:"<code>Path::setConsole()</code>",id:"pathsetconsole",level:4},{value:"<code>Path::services()</code>",id:"pathservices",level:4},{value:"<code>Path::setServices()</code>",id:"pathsetservices",level:4},{value:"<code>Path::repositories()</code>",id:"pathrepositories",level:4},{value:"<code>Path::setRepositories()</code>",id:"pathsetrepositories",level:4},{value:"<code>Path::commands()</code>",id:"pathcommands",level:4},{value:"<code>Path::setCommands()</code>",id:"pathsetcommands",level:4},{value:"<code>Path::controllers()</code>",id:"pathcontrollers",level:4},{value:"<code>Path::setControllers()</code>",id:"pathsetcontrollers",level:4},{value:"<code>Path::exceptions()</code>",id:"pathexceptions",level:4},{value:"<code>Path::setExceptions()</code>",id:"pathsetexceptions",level:4},{value:"<code>Path::middlewares()</code>",id:"pathmiddlewares",level:4},{value:"<code>Path::setMiddlewares()</code>",id:"pathsetmiddlewares",level:4},{value:"<code>Path::interceptors()</code>",id:"pathinterceptors",level:4},{value:"<code>Path::setInterceptors()</code>",id:"pathsetinterceptors",level:4},{value:"<code>Path::terminators()</code>",id:"pathterminators",level:4},{value:"<code>Path::setTerminators()</code>",id:"pathsetterminators",level:4},{value:"<code>Path::migrations()</code>",id:"pathmigrations",level:4},{value:"<code>Path::setMigrations()</code>",id:"pathsetmigrations",level:4},{value:"<code>Path::seeders()</code>",id:"pathseeders",level:4},{value:"<code>Path::setSeeders()</code>",id:"pathsetseeders",level:4},{value:"<code>Path::nodeModulesBin()</code>",id:"pathnodemodulesbin",level:4},{value:"<code>Path::setNodeModulesBin()</code>",id:"pathsetnodemodulesbin",level:4},{value:"<code>Path::vmTmp()</code>",id:"pathvmtmp",level:4},{value:"<code>Path::vmHome()</code>",id:"pathvmhome",level:4},{value:"<code>Path::this()</code>",id:"paththis",level:4},{value:"Route",id:"route",level:3},{value:"<code>Route::getQueryString()</code>",id:"routegetquerystring",level:4},{value:"<code>Route::removeQueryParams()</code>",id:"routeremovequeryparams",level:4},{value:"<code>Route::getQueryParamsValue()</code>",id:"routegetqueryparamsvalue",level:4},{value:"<code>Route::getQueryParamsName()</code>",id:"routegetqueryparamsname",level:4},{value:"<code>Route::getParamsValue()</code>",id:"routegetparamsvalue",level:4},{value:"<code>Route::getParamsName()</code>",id:"routegetparamsname",level:4},{value:"<code>Route::createMatcher()</code>",id:"routecreatematcher",level:4},{value:"String",id:"string",level:3},{value:"<code>String::generateRandom()</code>",id:"stringgeneraterandom",level:4},{value:"<code>String::toCamelCase()</code>",id:"stringtocamelcase",level:4},{value:"<code>String::toSnakeCase()</code>",id:"stringtosnakecase",level:4},{value:"<code>String::toConstantCase()</code>",id:"stringtoconstantcase",level:4},{value:"<code>String::toPascalCase()</code>",id:"stringtopascalcase",level:4},{value:"<code>String::toSentenceCase()</code>",id:"stringtosentencecase",level:4},{value:"<code>String::toDotCase()</code>",id:"stringtodotcase",level:4},{value:"<code>String::toDashCase()</code>",id:"stringtodashcase",level:4},{value:"<code>String::toNoCase()</code>",id:"stringtonocase",level:4},{value:"<code>String::pluralize()</code>",id:"stringpluralize",level:4},{value:"<code>String::singularize()</code>",id:"stringsingularize",level:4},{value:"<code>String::ordinalize()</code>",id:"stringordinalize",level:4},{value:"<code>String::generateRandomColor()</code>",id:"stringgeneraterandomcolor",level:4},{value:"<code>String::normalizeBase64()</code>",id:"stringnormalizebase64",level:4},{value:"Uuid",id:"uuid",level:3},{value:"<code>Uuid::generate()</code>",id:"uuidgenerate",level:4},{value:"<code>Uuid::verify()</code>",id:"uuidverify",level:4},{value:"<code>Uuid::getToken()</code>",id:"uuidgettoken",level:4},{value:"<code>Uuid::getPrefix()</code>",id:"uuidgetprefix",level:4},{value:"<code>Uuid::injectPrefix()</code>",id:"uuidinjectprefix",level:4},{value:"<code>Uuid::changePrefix()</code>",id:"uuidchangeprefix",level:4},{value:"<code>Uuid::changeOrGenerate()</code>",id:"uuidchangeorgenerate",level:4}],d={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"helpers"},"Helpers"),(0,o.kt)("p",null,"Understand how to use all the Athenna Helpers from @athenna/common and other packages."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,'Athenna includes a variety of "helpers" classes inside\nthe ',(0,o.kt)("inlineCode",{parentName:"p"},"@athenna/common")," package that comes by default\ninstalled in your application. Many of these classes are\nused by the framework itself; however, you are free to use\nthem in your own applications if you find them convenient."),(0,o.kt)("h2",{id:"available-helpers"},"Available helpers"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#clean"},(0,o.kt)("inlineCode",{parentName:"a"},"Clean"))," - Remove falsy values\nfrom different data structures."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#color"},(0,o.kt)("inlineCode",{parentName:"a"},"Color"))," - The UI Kit of Athenna\ncommand line applications."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#exception"},(0,o.kt)("inlineCode",{parentName:"a"},"Exception"))," - Create errors with\nmore details to handle them easily."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#exec"},(0,o.kt)("inlineCode",{parentName:"a"},"Exec"))," - Simple helpers that executes\nsome operation, like executing a command in a child process."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#fakeapi"},(0,o.kt)("inlineCode",{parentName:"a"},"FakeApi"))," - Create a fake REST API\nusing ",(0,o.kt)("inlineCode",{parentName:"li"},"json")," files to map the routes and their returns (similiar to ",(0,o.kt)("a",{parentName:"li",href:"https://wiremock.org/"},"WireMock"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#file"},(0,o.kt)("inlineCode",{parentName:"a"},"File"))," - Create, copy, move,\ndelete and get information about files."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#folder"},(0,o.kt)("inlineCode",{parentName:"a"},"Folder"))," - Create, copy, move,\ndelete and get information about folders."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#httpclient"},(0,o.kt)("inlineCode",{parentName:"a"},"HttpClient"))," - Make HTTP requests for\nother servers with a human-friendly and powerful API."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#httpclientbuilder"},(0,o.kt)("inlineCode",{parentName:"a"},"HttpClientBuilder"))," - Build requests\nusing ",(0,o.kt)("a",{parentName:"li",href:"https://refactoring.guru/design-patterns/builder"},"builder pattern")," instead of\ncreating options as objects."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#is"},(0,o.kt)("inlineCode",{parentName:"a"},"Is"))," - Validate if your data ",(0,o.kt)("strong",{parentName:"li"},"is"),"\nequals to some type or pattern."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#json"},(0,o.kt)("inlineCode",{parentName:"a"},"Json"))," - Simple helpers to manipulate JSON."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#module"},(0,o.kt)("inlineCode",{parentName:"a"},"Module"))," - Simple helpers to manipulate\nNode.js modules."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#number"},(0,o.kt)("inlineCode",{parentName:"a"},"Number"))," - Simple helpers to manipulate\nnumbers."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#object-builder"},(0,o.kt)("inlineCode",{parentName:"a"},"ObjectBuilder"))," - Build objects removing\n",(0,o.kt)("inlineCode",{parentName:"li"},"undefined")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"null")," values and without memory reference."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#options"},(0,o.kt)("inlineCode",{parentName:"a"},"Options"))," - Simple helpers to develop\nAPI's (functions and methods) with good options and configurations for\ndevelopers."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#parser"},(0,o.kt)("inlineCode",{parentName:"a"},"Parser"))," - Parse data from X to Y and Y to X."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#path"},(0,o.kt)("inlineCode",{parentName:"a"},"Path"))," - Get the full path to some file or\nfolder starting from your application\n",(0,o.kt)("a",{parentName:"li",href:"https://www.computerhope.com/jargon/p/pwd.htm"},"PWD"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#route"},(0,o.kt)("inlineCode",{parentName:"a"},"Route"))," - Simple helpers to manipulate\nroute params, query params and more."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#string"},(0,o.kt)("inlineCode",{parentName:"a"},"String"))," - Simple helpers to manipulate\nstrings."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#uuid"},(0,o.kt)("inlineCode",{parentName:"a"},"Uuid"))," - Create customized UUID v4 and\nvalidate if they are valid.")),(0,o.kt)("h3",{id:"clean"},"Clean"),(0,o.kt)("h4",{id:"cleancleanarray"},(0,o.kt)("inlineCode",{parentName:"h4"},"Clean::cleanArray()")),(0,o.kt)("p",null,"Clean falsy and empty values from an array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Clean } from '@athenna/common'\n\nconst array = [\n  '',\n  1,\n  null,\n  undefined, \n  { joao: 'joao', lenon: null }, \n  {}\n]\n\nconst cleanedArray = Clean.cleanArray(array)\n\nconsole.log(cleanedArray)\n\n/**\n * [\n *  1,\n *  { joao: 'joao', lenon: null }, \n *  {}\n * ]\n */\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"cleanArray()")," method supports two options, ",(0,o.kt)("inlineCode",{parentName:"p"},"removeEmpty")," to remove empty\nvalues like ",(0,o.kt)("inlineCode",{parentName:"p"},"{}")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"[]")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"recursive")," to recursivelly remove data\nfrom objects and arrays:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const cleanedArray = Clean.cleanArray(array, {\n  removeEmpty: true,\n  recursive: true\n})\n\nconsole.log(cleanedArray)\n\n/**\n * [\n *  1, { joao: 'joao' }\n * ]\n */\n")),(0,o.kt)("h4",{id:"cleancleanobject"},(0,o.kt)("inlineCode",{parentName:"h4"},"Clean::cleanObject()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const object = {\n  key: 'value',\n  emptyArray: [],\n  emptyObject: {},\n  object: { joao: 'joao' },\n  nullValue: null,\n  undefinedValue: undefined,\n  arrayWithSubs: [null, 1, { joao: 'joao', lenon: null }, {}],\n}\n\nconst cleanedObject = Clean.cleanObject(object)\n\nconsole.log(cleanedObject) \n/**\n * {\n *  key: 'value',\n *  emptyArray: [],\n *  emptyObject: {},\n *  object: { joao: 'joao' },\n *  arrayWithSubs: [null, 1, { joao: 'joao', lenon: null }, {}],\n * }\n */\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"cleanObject()")," method supports two options, ",(0,o.kt)("inlineCode",{parentName:"p"},"removeEmpty")," to remove empty\nvalues like ",(0,o.kt)("inlineCode",{parentName:"p"},"{}")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"[]")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"recursive")," to recursivelly remove data\nfrom objects and arrays:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const cleanedObject = Clean.cleanObject(object, {\n  removeEmpty: true,\n  recursive: true,\n})\n\nconsole.log(cleanedObject) \n/**\n * {\n *  key: 'value',\n *  object: { joao: 'joao' },\n *  arrayWithSubs: [1, { joao: 'joao' }],\n * }\n */\n")),(0,o.kt)("h3",{id:"color"},"Color"),(0,o.kt)("p",null,"This helper uses ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/chalk"},"chalk"),"\nlibrary under the hood to create unique colors for Athenna\nCLI applications. In this documentation we are going to focus\nonly in helpers that ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Color"))," provides different from ",(0,o.kt)("strong",{parentName:"p"},"chalk"),"."),(0,o.kt)("h4",{id:"colorapply"},(0,o.kt)("inlineCode",{parentName:"h4"},"Color::apply()")),(0,o.kt)("p",null,"Apply the color engine of Athenna to some string. The color\nengine execute ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/chalk"},"chalk"),"\nmethods under the hood. In the example bellow we are executing\n",(0,o.kt)("inlineCode",{parentName:"p"},"yellow()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bold()")," method of\n",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/chalk"},"chalk")," in the word\n",(0,o.kt)("inlineCode",{parentName:"p"},"World"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Color } from '@athenna/common'\n\nconst colorizedString = Color.apply('Hello ({yellow, bold} World)!')\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The color of ",(0,o.kt)("inlineCode",{parentName:"p"},"World")," word will be yellow with bold format.")),(0,o.kt)("h4",{id:"colorremove"},(0,o.kt)("inlineCode",{parentName:"h4"},"Color::remove()")),(0,o.kt)("p",null,"Remove all the formats and colors of your string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Color } from '@athenna/common'\n\nconst noColorString = Color.remove(Color.yellow('Davi Mezencio'))\n")),(0,o.kt)("h4",{id:"colorhttpmethod"},(0,o.kt)("inlineCode",{parentName:"h4"},"Color::httpMethod()")),(0,o.kt)("p",null,"Get an instance of chalk with a determined color for each type\nof http method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Color } from '@athenna/common'\n\nColor.httpMethod('GET').bold('Request Received')\nColor.httpMethod('HEAD').bold('Request Received')\nColor.httpMethod('POST').bold('Request Received')\nColor.httpMethod('PUT').bold('Request Received')\nColor.httpMethod('PATCH').bold('Request Received')\nColor.httpMethod('DELETE').bold('Request Received')\nColor.httpMethod('OPTIONS').bold('Request Received')\n")),(0,o.kt)("h3",{id:"exception"},"Exception"),(0,o.kt)("p",null,"In this documentation section we are going to cover only the\nhelpers of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Exception")," class. You can learn more about\nexceptions when handling errors in your application. Those are\nthe available documentation for error handling by application:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/rest-api-application/error-handling"},"REST API")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/cli-application/error-handling"},"CLI"))),(0,o.kt)("h4",{id:"exceptiontojson"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exception.toJSON()")),(0,o.kt)("p",null,"Get the informations of the exception as JSON:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exception } from '@athenna/common'\n\nconst exception = new Exception({\n  status: 500,\n  name: 'ErrorName',\n  code: 'ERROR_CODE',\n  message: 'Some exception has ocurred.',\n  help: 'Try restarting your computer, should work.'\n})\n\nconst json = exception.toJSON() // { status: 500, name: 'ErrorName', ... }\n")),(0,o.kt)("h4",{id:"exceptionprettify"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exception.prettify()")),(0,o.kt)("p",null,"Transform the exception to a human redable format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exception } from '@athenna/common'\n\nconst exception = new Exception({\n  status: 500,\n  name: 'ErrorName',\n  code: 'ERROR_CODE',\n  message: 'Some exception has ocurred.',\n  help: 'Try restarting your computer, should work.'\n})\n\nLogger.error(await exception.prettify())\n")),(0,o.kt)("h3",{id:"exec"},"Exec"),(0,o.kt)("h4",{id:"execsleep"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exec::sleep()")),(0,o.kt)("p",null,"Put the code to sleep for a determined amount of MS:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\nawait Exec.sleep(3000) // 3 seconds\n")),(0,o.kt)("h4",{id:"execconcurrently"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exec::concurrently()")),(0,o.kt)("p",null,"Execute some callback concurrently for each value of\nthe array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\nconst array = [1, 2, 3]\n\nconst newArray = await Exec.concurrently(array, async (number) => {\n  // Some sync operation just to simulate\n  await Exec.sleep(1000)\n\n  return number++\n})\n")),(0,o.kt)("h4",{id:"execcommand"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exec::command()")),(0,o.kt)("p",null,"Execute some command of your OS in a child process:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\nconst { stdout } = await Exec.command('ls -la')\n")),(0,o.kt)("p",null,"If your command fails, Athenna will throw the\n",(0,o.kt)("inlineCode",{parentName:"p"},"NodeCommandException"),", to avoid this you can set the\n",(0,o.kt)("inlineCode",{parentName:"p"},"ignoreErrors")," option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\nconst { stdout, stderr } = await Exec.command('ls -la', {\n  ignoreErrors: true\n})\n")),(0,o.kt)("h4",{id:"execdownload"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exec::download()")),(0,o.kt)("p",null,"Download some file from some URL and get the ",(0,o.kt)("inlineCode",{parentName:"p"},"File")," instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\n// File helper class instance\nconst file = await Exec.download(Path.storage('file.txt'), 'https://athenna.io/file.txt')\n")),(0,o.kt)("h4",{id:"execpagination"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exec::pagination()")),(0,o.kt)("p",null,"Create a pagination object for your API:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\nconst data = [{...}, {...}]\n\nconst paginateObject = await Exec.pagination(data, data.length, {\n  page: 0,\n  limit: 10,\n  resourceUrl: Config.get('app.url')\n})\n\nconsole.log(paginateObject)\n/**\n * {\n *  data: [{...}, {...}],\n *  meta: {\n *    itemCount: 2,\n *    totalItems: 2,\n *    totalPages: 1,\n *    currentPage: 0,\n *    itemsPerPage: 10,\n *  },\n *  links: {\n *    first: 'http://localhost:3000?limit=10',\n *    previous: 'http://localhost:3000?page=0&limit=10',\n *    next: 'http://localhost:3000?page=1&limit=10',\n *    last: 'http://localhost:3000?page=0&limit=10',\n *  } \n * }\n */\n")),(0,o.kt)("h3",{id:"fakeapi"},"FakeApi"),(0,o.kt)("h4",{id:"fakeapistart"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::start()")),(0,o.kt)("p",null,"Start the fake server on port ",(0,o.kt)("inlineCode",{parentName:"p"},"8989")," and loading the path\n",(0,o.kt)("inlineCode",{parentName:"p"},"Path.resources('fake-api')"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nawait FakeApi.start()\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can change the server port and the path to read the\n",(0,o.kt)("inlineCode",{parentName:"p"},"json")," files:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nawait FakeApi.start(8989, Path.resources('path'))\n"))),(0,o.kt)("h4",{id:"fakeapistop"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::stop()")),(0,o.kt)("p",null,"Stop the fake api server and call ",(0,o.kt)("inlineCode",{parentName:"p"},"FakeApi::recreate()"),"\nmethod to create a new server instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nawait FakeApi.stop()\n")),(0,o.kt)("h4",{id:"fakeapiisrunning"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::isRunning()")),(0,o.kt)("p",null,"Verify if the fake api server is running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nif (FakeApi.isRunning()) {\n  // do something...\n}\n")),(0,o.kt)("h4",{id:"fakeapilistroutes"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::listRoutes()")),(0,o.kt)("p",null,"List all the routes registered in the fake api server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nconst routes = FakeApi.listRoutes()\n\nconsole.log(routes)\n")),(0,o.kt)("h4",{id:"fakeapiregisterfile"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::registerFile()")),(0,o.kt)("p",null,"Register a route using a ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," file in the fake api:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nFakeApi.registerFile(Path.resources('fake-api/users.json'))\n")),(0,o.kt)("p",null,"Content of ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.resources('fake-api/users.json')")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "path": "/users",\n  "method": "GET",\n  "statusCode": 200, \ud83d\udc48 // The response status code\n  "body": [ \ud83d\udc48 // The response body\n    {\n      "id": 1,\n      "name": "Jo\xe3o Lenon",\n    },\n    {\n      "id": 2,\n      "name": "Thais Gabriela",\n    }\n  ],\n  "headers": { \ud83d\udc48 // The response header\n    "Content-Type": "application/json"\n  }\n}\n')),(0,o.kt)("h4",{id:"fakeapiregisterfolder"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::registerFolder()")),(0,o.kt)("p",null,"Recursively register all the ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," files of some folder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nawait FakeApi.registerFolder(Path.resources('fake-api'))\n")),(0,o.kt)("h4",{id:"fakeapibuild"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::build()")),(0,o.kt)("p",null,"Use this method to programatically build the routes u\nsing the builder pattern:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\nimport type { RouteOptions } from 'fastify'\n\nconst options: RouteOptions = {}\nconst fakeApiBuilder = FakeApi.build()\n\nconst users = [\n  {\n    id: 1,\n    name: 'Jo\xe3o Lenon',\n  },\n  {\n    id: 2,\n    name: 'Thais Gabriela',\n  }\n]\n\nfakeApiBuilder\n  .path('/users')\n  .method('GET')\n  .statusCode(200)\n  .body(users)\n  .header({ 'Content-Type': 'application/json' })\n  .register(options)\n")),(0,o.kt)("h3",{id:"file"},"File"),(0,o.kt)("h4",{id:"fileload--fileloadsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.load()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.loadSync()")),(0,o.kt)("p",null,"Creates the file is does not exist and also load the file information:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst existent = new File(Path.storage('existent.txt'))\nconst nonExistent = new File('./nonExistent.txt', 'File content')\n\n// Load the file info and content.\nawait existent.load({ withContent: true })  \ud83d\udc48\n\n// Create and load the file info without the \n// content (be careful when loading big files).\nnonExistent.loadSync() \ud83d\udc48\n")),(0,o.kt)("p",null,"After loading process, the file will contain new informations:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"createdAt - The date when the file was created."),(0,o.kt)("li",{parentName:"ul"},"accessedAt - The date when the file was last accessed."),(0,o.kt)("li",{parentName:"ul"},"modifiedAt - The date when the file was last modified."),(0,o.kt)("li",{parentName:"ul"},"fileSize - The size of the file in MB."),(0,o.kt)("li",{parentName:"ul"},"content - The content of the file as ",(0,o.kt)("inlineCode",{parentName:"li"},"Buffer")," if ",(0,o.kt)("inlineCode",{parentName:"li"},"withContent")," was ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,o.kt)("h4",{id:"filecopy--filecopysync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.copy()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.copySync()")),(0,o.kt)("p",null,"Create a copy of the file in other location or with other name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst copiedFile = file.copySync('./copy-of-file.txt')\nconst copiedFile = await file.copy(Path.storage('copy-of-file.txt'))\n")),(0,o.kt)("p",null,"To copy the file and load the content of the copy set the ",(0,o.kt)("inlineCode",{parentName:"p"},"withContent"),"\nas ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst copiedFile = await file.copy(Path.storage('copy-of-file.txt'), {\n  withContent: true \ud83d\udc48\n})\n")),(0,o.kt)("p",null,"When copying the file you can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to create\na file with fake name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst copiedFile = await file.copy(Path.storage('copy-of-file.txt'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,o.kt)("h4",{id:"filemove--filemovesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.move()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.moveSync()")),(0,o.kt)("p",null,"Move the file to other location:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst movedFile = file.moveSync('./move-of-file.txt')               \ud83d\udc48\nconst movedFile = await file.move(Path.storage('move-of-file.txt')) \ud83d\udc48\n")),(0,o.kt)("p",null,"To move the file and load the content of the move set the ",(0,o.kt)("inlineCode",{parentName:"p"},"withContent"),"\nas ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst movedFile = await file.move(Path.storage('move-of-file.txt'), {\n  withContent: true \ud83d\udc48\n})\n")),(0,o.kt)("p",null,"When moving the file you can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to create\na file with fake name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst movedFile = await file.move(Path.storage('file-path.txt'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,o.kt)("h4",{id:"fileremove--fileremovesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.remove()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.removeSync()")),(0,o.kt)("p",null,"Delete a file from the file system:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nfile.removeSync()   \ud83d\udc48\nawait file.remove() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filesetcontent--filesetcontentsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.setContent()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.setContentSync()")),(0,o.kt)("p",null,"Set the content of a file overwriting the existing content:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', 'Hello')\n\nfile.setContentSync('Hello World!')   \ud83d\udc48\nawait file.setContent('Hello World!') \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filegetcontent--filegetcontentsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContent()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentSync()")),(0,o.kt)("p",null,"Get the content of a file as ",(0,o.kt)("inlineCode",{parentName:"p"},"Buffer"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentBuffer = file.getContentSync()   \ud83d\udc48\nconst contentBuffer = await file.getContent() \ud83d\udc48\n")),(0,o.kt)("p",null,"To save the content of the file in the instance set the ",(0,o.kt)("inlineCode",{parentName:"p"},"saveContent")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst content = await file.getContent({ saveContent: true }) \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filegetcontentasstring--filegetcontentasstringsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsString()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsStringSync()")),(0,o.kt)("p",null,"Same behavior of ",(0,o.kt)("inlineCode",{parentName:"p"},"getContent()"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"getContentSync()"),", but return the content\nas ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentString = file.getContentAsStringSync()   \ud83d\udc48\nconst contentString = await file.getContentAsString() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filegetcontentasjson--filegetcontentasjsonsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsJson()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsJsonSync()")),(0,o.kt)("p",null,"Same behavior of ",(0,o.kt)("inlineCode",{parentName:"p"},"getContent()"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"getContentSync()"),", but return the content as\n",(0,o.kt)("inlineCode",{parentName:"p"},"object")," if the content is a valid JSON string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentJSON = file.getContentAsJsonSync()   \ud83d\udc48\nconst contentJSON = await file.getContentAsJson() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filegetcontentasbuilder--filegetcontentasbuildersync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsBuilder()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsBuilderSync()")),(0,o.kt)("p",null,"Same behavior of ",(0,o.kt)("inlineCode",{parentName:"p"},"getContent()"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"getContentSync()"),", but return the content as\nan ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#object-builder"},(0,o.kt)("inlineCode",{parentName:"a"},"ObjectBuilder"))," instance if the\ncontent is a valid JSON string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentObjectBuilder = file.getContentAsBuilderSync()   \ud83d\udc48\nconst contentObjectBuilder = await file.getContentAsBuilder() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"fileappend--fileappendsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.append()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.appendSync()")),(0,o.kt)("p",null,"Add content to the end of the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', 'Hello')\n\nfile.appendSync(' World') \ud83d\udc48\nawait file.append('!\\n')  \ud83d\udc48\n")),(0,o.kt)("h4",{id:"fileprepend--fileprependsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.prepend()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.prependSync()")),(0,o.kt)("p",null,"Add content to the top of the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', 'World')\n\nfile.prependSync('ello ') \ud83d\udc48\nawait file.prepend('H')   \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filecreatereadstream"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.createReadStream()")),(0,o.kt)("p",null,"Create a ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/stream.html#readable-streams"},"readable stream"),"\ninstance of the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const stream = file.createReadStream()\n")),(0,o.kt)("h4",{id:"filecreatewritestream"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.createWriteStream()")),(0,o.kt)("p",null,"Create a ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/stream.html#writable-streams"},"writable stream"),"\ninstance of the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const stream = file.createWriteStream()\n")),(0,o.kt)("h4",{id:"filetojson"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.toJSON()")),(0,o.kt)("p",null,"Get the informations of the file as JSON:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const infos = file.toJSON() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"fileimport"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.import()")),(0,o.kt)("p",null,"Import the file path if is a valid module:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.js', \"console.log('hello')\")\n\nconst module = await file.import() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filesafeimport"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.safeImport()")),(0,o.kt)("p",null,"Same as ",(0,o.kt)("inlineCode",{parentName:"p"},"import()")," method, but if the file is not a valid module the exception\nwill be ignored:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', \"console.log('hello')\")\n\nconst module = await file.safeImport() \ud83d\udc48\n")),(0,o.kt)("p",null,"Importing files that got any errors like syntax errors will also not throw:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.js', \"console.log('hello\")\n\nconst module = await file.safeImport() \ud83d\udc48 // Nothing happens\n")),(0,o.kt)("h4",{id:"filesaferemove"},(0,o.kt)("inlineCode",{parentName:"h4"},"File::safeRemove()")),(0,o.kt)("p",null,"Call for a delete operation without worrying about exceptions because the file\ndoes not exist:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nawait File.safeRemove(Path.storage('file.txt'))      \ud83d\udc48\nawait File.safeRemove(Path.storage('not-found.txt')) \ud83d\udc48 // Will not throw\n")),(0,o.kt)("h4",{id:"fileexists--fileexistssync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File::exists()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File::existsSync()")),(0,o.kt)("p",null,"Verify if a file exists or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (File.existsSync('package.json')) {\n  // do something\n}\n\nif (await File.exists('package.json')) {\n  // do something\n}\n")),(0,o.kt)("h4",{id:"fileisfile--fileisfilesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File::isFile()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File::isFileSync()")),(0,o.kt)("p",null,"Verify if a file is a valid file or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (File.isFileSync('package.json')) {\n  // do something\n}\n\nif (await File.isFile('package.json')) {\n  // do something\n}\n")),(0,o.kt)("h4",{id:"filecreatefileofsize"},(0,o.kt)("inlineCode",{parentName:"h4"},"File::createFileOfSize()")),(0,o.kt)("p",null,"Create a fake file with determined size for testing purposes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const file = await File.createFileOfSize('fake.js', 1024 * 1024 * 100) \ud83d\udc48\n")),(0,o.kt)("h3",{id:"folder"},"Folder"),(0,o.kt)("h4",{id:"folderload--folderloadsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.load()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.loadSync()")),(0,o.kt)("p",null,"Creates the folder if it does not exist and also load the folder information:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst existent = new Folder(Path.storage('existent'))\nconst nonExistent = new Folder('./nonExistent')\n\n// Load the folder info with sub folders and with file contents.\nawait existent.load({ withSub: true, withContent: true })  \ud83d\udc48\n\n// Create and load the folder info without the \n// content (be careful when loading big files).\nnonExistent.loadSync() \ud83d\udc48\n")),(0,o.kt)("p",null,"After loading process, the folder will contain new informations:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"createdAt - The date when the folder was created."),(0,o.kt)("li",{parentName:"ul"},"accessedAt - The date when the folder was last accessed."),(0,o.kt)("li",{parentName:"ul"},"modifiedAt - The date when the folder was last modified."),(0,o.kt)("li",{parentName:"ul"},"folderSize - The size of the folder in MB.")),(0,o.kt)("h4",{id:"foldercopy--foldercopysync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.copy()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.copySync()")),(0,o.kt)("p",null,"Create a copy of the folder in other location or with other name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst copiedFolder = folder.copySync('./copy-of-folder')\nconst copiedFolder = await folder.copy(Path.storage('copy-of-folder'))\n")),(0,o.kt)("p",null,"To copy the folder and load the sub folders and the content of the\ncopy set the ",(0,o.kt)("inlineCode",{parentName:"p"},"withSub")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"withContent")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst copiedFolder = await folder.copy(Path.storage('copy-of-folder'), {\n  withSub: true,    \ud83d\udc48\n  withContent: true \ud83d\udc48\n})\n")),(0,o.kt)("p",null,"When copying the folder you can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to copy the\nfiles with fake names:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst copiedFolder = await folder.copy(Path.storage('copy-of-file'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,o.kt)("h4",{id:"foldermove--foldermovesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.move()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.moveSync()")),(0,o.kt)("p",null,"Move the folder to other location:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst movedFolder = folder.moveSync('./move-of-folder')               \ud83d\udc48\nconst movedFolder = await folder.move(Path.storage('move-of-folder')) \ud83d\udc48\n")),(0,o.kt)("p",null,"To move the folder and load the sub folders and the content of the\nmove set the ",(0,o.kt)("inlineCode",{parentName:"p"},"withSub")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"withContent")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst movedFolder = await folder.move(Path.storage('move-of-folder'), {\n  withSub: true,    \ud83d\udc48\n  withContent: true \ud83d\udc48\n})\n")),(0,o.kt)("p",null,"When moving the folder you can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to move the\nfiles with fake names:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst movedFolder = await folder.move(Path.storage('file-path'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,o.kt)("h4",{id:"folderremove--folderremovesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.remove()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.removeSync()")),(0,o.kt)("p",null,"Delete a folder from the folder system:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nfolder.removeSync()   \ud83d\udc48\nawait folder.remove() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"foldertojson"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.toJSON()")),(0,o.kt)("p",null,"Get the informations of the folder as JSON:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const infos = folder.toJSON() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"foldergetfilesbypattern"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.getFilesByPattern()")),(0,o.kt)("p",null,"Get all the files of a folder using a glob pattern:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const files = folder.getFilesByPattern('**/*.js') \ud83d\udc48\n")),(0,o.kt)("h4",{id:"foldergetfoldersbypattern"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.getFoldersByPattern()")),(0,o.kt)("p",null,"Get all the folders of a folder using a glob pattern:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const folders = folder.getFoldersByPattern('**/*') \ud83d\udc48\n")),(0,o.kt)("h4",{id:"foldersaferemove"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::safeRemove()")),(0,o.kt)("p",null,"Call for a delete operation without worrying about exceptions because the folder\ndoes not exist:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nawait Folder.safeRemove(Path.storage('folder'))    \ud83d\udc48\nawait Folder.safeRemove(Path.storage('not-found')) \ud83d\udc48 // Will not throw\n")),(0,o.kt)("h4",{id:"folderexists--folderexistssync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::exists()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::existsSync()")),(0,o.kt)("p",null,"Verify if a folder exists or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (Folder.existsSync('app')) {\n  // do something\n}\n\nif (await Folder.exists('app')) {\n  // do something\n}\n")),(0,o.kt)("h4",{id:"folderisfolder--folderisfoldersync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::isFolder()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::isFolderSync()")),(0,o.kt)("p",null,"Verify if a folder is a valid folder or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (Folder.isFolderSync('app')) {\n  // do something\n}\n\nif (await Folder.isFolder('app')) {\n  // do something\n}\n")),(0,o.kt)("h4",{id:"foldersize--foldersizesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::size()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::sizeSync()")),(0,o.kt)("p",null,"Get the size of the folder in MB:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (Folder.sizeSync('app') === 100) {\n  // do something\n}\n\nif (await Folder.size('app')  === 100) {\n  // do something\n}\n")),(0,o.kt)("h3",{id:"httpclient"},"HttpClient"),(0,o.kt)("p",null,"This helper uses the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/got"},(0,o.kt)("inlineCode",{parentName:"a"},"got")),"\nlibrary under the hood to build the requests."),(0,o.kt)("h4",{id:"httpclientget"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClient::get()")),(0,o.kt)("p",null,"Make a ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," request to some URL:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { \n  HttpClient, \n  type Request,\n  type Response\n} from '@athenna/common'\n\nconst options: Request = {\n  timeout: 2000,\n}\n\nconst response: Response<any> = await HttpClient.get('https://athenna.io', options)\n")),(0,o.kt)("h4",{id:"httpclientpost"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClient::post()")),(0,o.kt)("p",null,"Make a ",(0,o.kt)("inlineCode",{parentName:"p"},"POST")," request to some URL:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { \n  HttpClient, \n  type Request,\n  type Response\n} from '@athenna/common'\n\nconst url = 'https://athenna.io'\n\nconst options: Request = {\n  timeout: 2000,\n}\n\nconst body = {\n  name: 'Jo\xe3o Lenon',\n  age: 22,\n}\n\nconst response: Response<any> = await HttpClient.post(url, body, options)\n")),(0,o.kt)("h4",{id:"httpclientput"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClient::put()")),(0,o.kt)("p",null,"Make a ",(0,o.kt)("inlineCode",{parentName:"p"},"PUT")," request to some URL:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { \n  HttpClient, \n  type Request,\n  type Response\n} from '@athenna/common'\n\nconst url = 'https://athenna.io'\n\nconst options: Request = {\n  timeout: 2000,\n}\n\nconst body = {\n  name: 'Jo\xe3o Lenon',\n  age: 22,\n}\n\nconst response: Response<any> = await HttpClient.put(url, body, options)\n")),(0,o.kt)("h4",{id:"httpclientpatch"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClient::patch()")),(0,o.kt)("p",null,"Make a ",(0,o.kt)("inlineCode",{parentName:"p"},"PATCH")," request to some URL:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { \n  HttpClient, \n  type Request,\n  type Response\n} from '@athenna/common'\n\nconst url = 'https://athenna.io'\n\nconst options: Request = {\n  timeout: 2000,\n}\n\nconst body = {\n  name: 'Jo\xe3o Lenon',\n  age: 22,\n}\n\nconst response: Response<any> = await HttpClient.patch(url, body, options)\n")),(0,o.kt)("h4",{id:"httpclientdelete"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClient::delete()")),(0,o.kt)("p",null,"Make a ",(0,o.kt)("inlineCode",{parentName:"p"},"DELETE")," request to some URL:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { \n  HttpClient, \n  type Request,\n  type Response\n} from '@athenna/common'\n\nconst url = 'https://athenna.io'\n\nconst options: Request = {\n  timeout: 2000,\n}\n\nconst response: Response<any> = await HttpClient.delete(url, options)\n")),(0,o.kt)("h4",{id:"httpclienthead"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClient::head()")),(0,o.kt)("p",null,"Make a ",(0,o.kt)("inlineCode",{parentName:"p"},"HEAD")," request to some URL:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { \n  HttpClient, \n  type Request,\n  type Response\n} from '@athenna/common'\n\nconst url = 'https://athenna.io'\n\nconst options: Request = {\n  timeout: 2000,\n}\n\nconst response: Response<any> = await HttpClient.head(url, options)\n")),(0,o.kt)("h4",{id:"httpclientbuilder--httpclientsetbuilder"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClient::builder()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClient::setBuilder()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"HttpClientBuilder")," instance that ",(0,o.kt)("inlineCode",{parentName:"p"},"HttpClient")," class\nwill use to build your requests in the example above:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { \n  HttpClient, \n  type RequestError, \n  type RetryObject \n} from '@athenna/common'\n\nconst newBuilder = true\nconst builder = HttpClient.builder(newBuilder)\n\nbuilder\n  .timeout(2000)\n  .prefixUrl('https://athenna.io')\n  .retryStrategy((error: RequestError, execCount: number, retryObject: RetryObject) => {\n    if (execCount === 3) {\n      return 0\n    }\n\n    return 2000\n  })\n\nHttpClient.setBuilder(builder)\n\n// Now all the requests done with HttpClient \n// will use the same predefined builder options:\nconst response = await HttpClient.get('https://athenna.io')\n")),(0,o.kt)("h3",{id:"httpclientbuilder"},"HttpClientBuilder"),(0,o.kt)("p",null,"This helper uses the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/got"},(0,o.kt)("inlineCode",{parentName:"a"},"got")),"\nlibrary under the hood to build the requests."),(0,o.kt)("h4",{id:"httpclientbuildersetinithook"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.setInitHook()")),(0,o.kt)("p",null,"Called with the plain request options, right before\ntheir normalization. The second argument represents\nthe current ",(0,o.kt)("inlineCode",{parentName:"p"},"Options")," instance."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"This hook must be synchronous."),(0,o.kt)("li",{parentName:"ul"},"This is called every time options are merged."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"options")," object may not have the ",(0,o.kt)("inlineCode",{parentName:"li"},"url"),"\nproperty. To modify it, use a ",(0,o.kt)("inlineCode",{parentName:"li"},"beforeRequest"),"\nhook instead."),(0,o.kt)("li",{parentName:"ul"},"This hook is called when a new instance of\n",(0,o.kt)("inlineCode",{parentName:"li"},"Options")," is created.\nDo not confuse this with the creation of\n",(0,o.kt)("inlineCode",{parentName:"li"},"Request")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"got(\u2026)"),"."))),(0,o.kt)("p",null,"For example, this can be used to fix typos to\nmigrate from older versions faster."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.setInitHook(init => {\n  if ('followRedirects' in init) {\n    init.followRedirect = init.followRedirects\n    delete init.followRedirects\n  }\n})\n")),(0,o.kt)("h4",{id:"httpclientbuildersetbeforerequesthook"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.setBeforeRequestHook()")),(0,o.kt)("p",null,"Called right before making the request with\n",(0,o.kt)("inlineCode",{parentName:"p"},"options.createNativeRequestOptions()"),". This hook\nis especially useful in conjunction with\n",(0,o.kt)("inlineCode",{parentName:"p"},"HttpClient.setBuilder(customBuilder)")," when you want\nto sign your request."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"HttpClient will make no further changes to the request\nbefore it is sent."),(0,o.kt)("li",{parentName:"ul"},"Changing ",(0,o.kt)("inlineCode",{parentName:"li"},"options.json")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"options.form")," has no\neffect on the request. You should change ",(0,o.kt)("inlineCode",{parentName:"li"},"options.body"),"\ninstead. If needed, update the ",(0,o.kt)("inlineCode",{parentName:"li"},"options.headers")," accordingly."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.setBeforeRequestHook(options => {\n  options.body = JSON.stringify({ payload: 'new' })\n  options.headers['content-length'] = options.body.length.toString()\n})\n")),(0,o.kt)("h4",{id:"httpclientbuildersetbeforeredirecthook"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.setBeforeRedirectHook()")),(0,o.kt)("p",null,"The equivalent of ",(0,o.kt)("inlineCode",{parentName:"p"},"setBeforeRequestHook")," but when\nredirecting."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"This is especially useful when you want to avoid\ndead sites."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.setBeforeRedirectHook((options, response) => {\n    if (options.hostname === 'deadSite') {\n        options.hostname = 'fallbackSite'\n    }\n})\n")),(0,o.kt)("h4",{id:"httpclientbuildersetbeforeerrorhook"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.setBeforeErrorHook()")),(0,o.kt)("p",null,"Called with a ",(0,o.kt)("inlineCode",{parentName:"p"},"RequestError")," instance. The error\nis passed to the hook right before it's thrown.\nThis is especially useful when you want to have\nmore detailed errors."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder\n  .responseType('json')\n  .setBeforeErrorHook(error => {\n    const { response } = error\n\n    if (response && response.body) {\n      error.name = 'GitHubError'\n      error.message = `${response.body.message} (${response.statusCode})`\n    }\n    \n    return error\n  })\n")),(0,o.kt)("h4",{id:"httpclientbuildersetbeforeretryhook"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.setBeforeRetryHook()")),(0,o.kt)("p",null,"The equivalent of ",(0,o.kt)("inlineCode",{parentName:"p"},"setBeforeErrorHook")," but when\nretrying. Additionally, there is a second argument\n",(0,o.kt)("inlineCode",{parentName:"p"},"retryCount"),", the current retry number."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"When using the Stream API, this hook is ignored."),(0,o.kt)("li",{parentName:"ul"},"When retrying, the ",(0,o.kt)("inlineCode",{parentName:"li"},"beforeRequest")," hook is called\nafterwards."),(0,o.kt)("li",{parentName:"ul"},"If no retry occurs, the ",(0,o.kt)("inlineCode",{parentName:"li"},"beforeError")," hook is called\ninstead."))),(0,o.kt)("p",null,"This hook is especially useful when you want to retrieve\nthe cause of a retry."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.setBeforeRetryHook((error, retryCount) => {\n  console.log(`Retrying [${retryCount}]: ${error.code}`)\n  // Retrying [1]: ERR_NON_2XX_3XX_RESPONSE\n})\n")),(0,o.kt)("h4",{id:"httpclientbuildersetafterresponsehook"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.setAfterResponseHook()")),(0,o.kt)("p",null,"Each function should return the response. This is\nespecially useful when you want to refresh an access\ntoken."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"When using the Stream API, this hook is ignored."),(0,o.kt)("li",{parentName:"ul"},"Calling the ",(0,o.kt)("inlineCode",{parentName:"li"},"retryWithMergedOptions")," function will\ntrigger ",(0,o.kt)("inlineCode",{parentName:"li"},"beforeRetry")," hooks. If the retry is successful,\nall remaining ",(0,o.kt)("inlineCode",{parentName:"li"},"afterResponse")," hooks will be called. In\ncase of an error, ",(0,o.kt)("inlineCode",{parentName:"li"},"beforeRetry")," hooks will be called\ninstead."))),(0,o.kt)("p",null,"Meanwhile, the ",(0,o.kt)("inlineCode",{parentName:"p"},"init"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"beforeRequest")," , ",(0,o.kt)("inlineCode",{parentName:"p"},"beforeRedirect"),"\nas well as already executed ",(0,o.kt)("inlineCode",{parentName:"p"},"afterResponse")," hooks will be\nskipped."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.mutableDefaults(true)\n  .setBeforeRetry(error => {\n      // This will be called on `retryWithMergedOptions(...)`\n  })\n  .setAfterResponseHook((response, retryWithMergedOptions) => {\n    // Unauthorized\n    if (response.statusCode === 401) {\n      // Refresh the access token\n      const updatedOptions = {\n        headers: {\n          token: getNewToken()\n        }\n      };\n\n      // Update the defaults\n      instance.defaults.options.merge(updatedOptions)\n\n      // Make a new retry\n      return retryWithMergedOptions(updatedOptions)\n    }\n    \n    // No changes otherwise\n    return response\n  })\n")),(0,o.kt)("h4",{id:"httpclientbuilderagent"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.agent()")),(0,o.kt)("p",null,"An object representing ",(0,o.kt)("inlineCode",{parentName:"p"},"http"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"https")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"http2")," keys\nfor ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/http.html#http_class_http_agent"},(0,o.kt)("inlineCode",{parentName:"a"},"http.Agent")),",\n",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/https.html#https_class_https_agent"},(0,o.kt)("inlineCode",{parentName:"a"},"https.Agent")),"\nand ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/szmarczak/http2-wrapper#new-http2agentoptions"},(0,o.kt)("inlineCode",{parentName:"a"},"http2wrapper.Agent")),"\ninstance. This is necessary because a request to one\nprotocol might redirect to another. In such a scenario,\nHttpClient will switch over to the right protocol agent for\nyou. If a key is not present, it will default to a global\nagent."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\nimport HttpAgent, { HttpsAgent } from 'agentkeepalive'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.agent({ http: new HttpAgent(), https: new HttpsAgent() })\n")),(0,o.kt)("h4",{id:"httpclientbuilderhttp2"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.http2()")),(0,o.kt)("p",null,"If set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", HttpClient will additionally accept\nHTTP2 requests."),(0,o.kt)("p",null,"It will choose either HTTP/1.1 or HTTP/2 depending on\nthe ALPN protocol:"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"This option requires Node.js 15.10.0 or newer as\nHTTP/2 support on older Node.js versions is very\nbuggy."),(0,o.kt)("li",{parentName:"ul"},"Overriding ",(0,o.kt)("inlineCode",{parentName:"li"},"options.request")," will disable HTTP2\nsupport."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.http2(true)\n")),(0,o.kt)("h4",{id:"httpclientbuilderh2session"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.h2session()")),(0,o.kt)("p",null,"Set the http2 session instance to be used by the request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { connect } from 'node:http2'\nimport { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\nconst session = connect('https://localhost:1234')\n\nbuilder.h2session(session)\n")),(0,o.kt)("h4",{id:"httpclientbuilderdecompress"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.decompress()")),(0,o.kt)("p",null,"Decompress the response automatically. This will set\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"accept-encoding")," header to ",(0,o.kt)("inlineCode",{parentName:"p"},"gzip, deflate, br"),"\nunless you set it yourself. If this is disabled, a\ncompressed response is returned as a ",(0,o.kt)("inlineCode",{parentName:"p"},"Buffer"),". This\nmay be useful if you want to handle decompression\nyourself or stream the raw compressed data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.decompress(true)\n")),(0,o.kt)("h4",{id:"httpclientbuildertimeout"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.timeout()")),(0,o.kt)("p",null,"Milliseconds to wait for the server to end the response\nbefore aborting the request with a timeout error\n(a.k.a. ",(0,o.kt)("inlineCode",{parentName:"p"},"request")," property). By default, there's no timeout."),(0,o.kt)("p",null,"This also accepts an ",(0,o.kt)("inlineCode",{parentName:"p"},"object")," with the following fields to\nconstrain the duration of each phase of the request lifecycle:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"lookup")," starts when a socket is assigned and ends when the hostname has been resolved.\nDoes not apply when using a Unix domain socket."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"connect")," starts when ",(0,o.kt)("inlineCode",{parentName:"li"},"lookup")," completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"secureConnect")," starts when ",(0,o.kt)("inlineCode",{parentName:"li"},"connect")," completes and ends when the handshaking process completes (HTTPS only)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"socket")," starts when the socket is connected. See ",(0,o.kt)("a",{parentName:"li",href:"https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback"},"request.setTimeout"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"response")," starts when the request has been written to the socket and ends when the response headers are received."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"send")," starts when the socket is connected and ends with the request has been written to the socket."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"request")," starts when the request is initiated and ends when the response's end event fires.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.timeout(2000)\n// or\nbuilder.timeout({\n  lookup: 2000,\n})\n")),(0,o.kt)("h4",{id:"httpclientbuilderbody"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.body()")),(0,o.kt)("p",null,"Set the request body:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.body({\n  hello: 'world!'\n})\n")),(0,o.kt)("h4",{id:"httpclientbuilderform"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.form()")),(0,o.kt)("p",null,"Set the request body as ",(0,o.kt)("inlineCode",{parentName:"p"},"form"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.form({\n  hello: 'world!'\n})\n")),(0,o.kt)("h4",{id:"httpclientbuilderheader"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.header()")),(0,o.kt)("p",null,"Set a header of the request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.header('Content-Type', 'application/json')\n")),(0,o.kt)("h4",{id:"httpclientbuildersafeheader"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.safeHeader()")),(0,o.kt)("p",null,"Same as ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#httpclientbuilderheader"},(0,o.kt)("inlineCode",{parentName:"a"},"header()")),",\nbut if the header already exists it will not be overwritten:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder\n  .header('Content-Type', 'application/json')\n  .safeHeader('Content-Type', 'will-not-change')\n")),(0,o.kt)("h4",{id:"httpclientbuilderremoveheader"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.removeHeader()")),(0,o.kt)("p",null,"Remove the header of the request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder\n  .header('Content-Type', 'application/json')\n  .removeHeader('Content-Type')\n")),(0,o.kt)("h4",{id:"httpclientbuilderprefixurl"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.prefixUrl()")),(0,o.kt)("p",null,"When specified, ",(0,o.kt)("inlineCode",{parentName:"p"},"prefixUrl")," will be prepended to ",(0,o.kt)("inlineCode",{parentName:"p"},"url"),".\nThe prefix can be any valid URL, either relative or absolute.\nA trailing slash ",(0,o.kt)("inlineCode",{parentName:"p"},"/")," is optional - one will be added\nautomatically:"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"prefixUrl")," will be ignored if the ",(0,o.kt)("inlineCode",{parentName:"li"},"url")," argument is\na URL instance."),(0,o.kt)("li",{parentName:"ul"},"Leading slashes in ",(0,o.kt)("inlineCode",{parentName:"li"},"input")," are disallowed when using\nthis option to enforce consistency and avoid confusion.\nFor example, when the prefix URL is\n",(0,o.kt)("inlineCode",{parentName:"li"},"https://example.com/foo")," and the input is ",(0,o.kt)("inlineCode",{parentName:"li"},"/bar"),",\nthere's ambiguity whether the resulting URL would\nbecome ",(0,o.kt)("inlineCode",{parentName:"li"},"https://example.com/foo/bar")," or\n",(0,o.kt)("inlineCode",{parentName:"li"},"https://example.com/bar"),". The latter is used by browsers."),(0,o.kt)("li",{parentName:"ul"},"You can change ",(0,o.kt)("inlineCode",{parentName:"li"},"prefixUrl")," using hooks as long as\nthe URL still includes the ",(0,o.kt)("inlineCode",{parentName:"li"},"prefixUrl"),". If the URL\ndoesn't include it anymore, it will throw."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.prefixUrl('https://athenna.io')\n")),(0,o.kt)("h4",{id:"httpclientbuildermethod"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.method()")),(0,o.kt)("p",null,"Set the request method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.method('POST')\n")),(0,o.kt)("h4",{id:"httpclientbuilderurl"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.url()")),(0,o.kt)("p",null,"Set the request url:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.url('https://athenna.io/api/v1')\n")),(0,o.kt)("h4",{id:"httpclientbuildercookiejar"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.cookieJar()")),(0,o.kt)("p",null,"Set the cookie jar of the request:"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"If you provide this option, ",(0,o.kt)("inlineCode",{parentName:"li"},"options.headers.cookie"),"\nwill be overridden."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.cookieJar(new CookieJar())\n")),(0,o.kt)("h4",{id:"httpclientbuildersignal"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.signal()")),(0,o.kt)("p",null,"Set the signal of the request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\nconst abortController = new AbortController()\n\nbuild.signal(abortController.signal)\n\nsetTimeout(() => {\n  abortController.abort()\n}, 100)\n")),(0,o.kt)("h4",{id:"httpclientbuilderignoreinvalidcookies"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.ignoreInvalidCookies()")),(0,o.kt)("p",null,"Ignore invalid cookies instead of throwing an\nerror. Only useful when the ",(0,o.kt)("inlineCode",{parentName:"p"},"cookieJar")," option has\nbeen set. Not recommended:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.ignoreInvalidCookies(true)\n")),(0,o.kt)("h4",{id:"httpclientbuildersearchparams"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.searchParams()")),(0,o.kt)("p",null,"Query string that will be added to the request URL.\nThis will override the query string in ",(0,o.kt)("inlineCode",{parentName:"p"},"url"),". If you\nneed to pass in an array, you can do it using a\n",(0,o.kt)("inlineCode",{parentName:"p"},"URLSearchParams")," instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder\n  .searchParams({ hello: 'world!' })\n  .searchParams(new URLSearchParams([['key', 'a'], ['key', 'b']]))\n")),(0,o.kt)("h4",{id:"httpclientbuilderqueryparams"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.queryParams()")),(0,o.kt)("p",null,"Alias for ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#httpclientbuildersearchparams"},(0,o.kt)("inlineCode",{parentName:"a"},"searchParams()")),"\nmethod."),(0,o.kt)("h4",{id:"httpclientbuilderdnslookup"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.dnsLookup()")),(0,o.kt)("p",null,"Set the DNS lookup options of the request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.dnsLookup({\n  family: 6\n})\n")),(0,o.kt)("h4",{id:"httpclientbuilderdnscache"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.dnsCache()")),(0,o.kt)("p",null,"An instance of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/szmarczak/cacheable-lookup"},(0,o.kt)("inlineCode",{parentName:"a"},"CacheableLookup")),"\nused for making DNS lookups. Useful when making lots of\nrequests to different ",(0,o.kt)("strong",{parentName:"p"},"public")," hostnames."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"CacheableLookup")," uses ",(0,o.kt)("inlineCode",{parentName:"p"},"dns.resolver4(..)")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"dns.resolver6(...)")," under the hood and fall backs to\n",(0,o.kt)("inlineCode",{parentName:"p"},"dns.lookup(...)")," when the first two fail, which may lead\nto additional delay:"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"This should stay disabled when making requests to\ninternal hostnames such as ",(0,o.kt)("inlineCode",{parentName:"li"},"localhost"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"database.local"),"\netc."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import CacheableLookup from 'cacheable-lookup'\nimport { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.dnsCache(new CacheableLookup())\n")),(0,o.kt)("h4",{id:"httpclientbuildercontext"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.context()")),(0,o.kt)("p",null,"User data. ",(0,o.kt)("inlineCode",{parentName:"p"},"context")," is shallow merged and enumerable.\nIf it contains non-enumerable properties they will NOT\nbe merged:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder\n  .setBeforeRequestHook(options => {\n    if (!options.context || !options.context.token) {\n        throw new Error('Token required')\n    }\n\n    options.headers.token = options.context.token\n  })\n  .context({ token: 'secret' })\n")),(0,o.kt)("h4",{id:"httpclientbuilderhooks"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.hooks()")),(0,o.kt)("p",null,"Hooks allow modifications during the request\nlifecycle. Hook functions may be async and are\nrun serially:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder, type Hooks } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nconst hooks: Hooks = {}\n\nbuilder.hooks(hooks)\n")),(0,o.kt)("h4",{id:"httpclientbuilderfollowredirect"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.followRedirect()")),(0,o.kt)("p",null,"Defines if redirect responses should be followed\nautomatically. Note that if a ",(0,o.kt)("inlineCode",{parentName:"p"},"303")," is sent by\nthe server in response to any request type\n(",(0,o.kt)("inlineCode",{parentName:"p"},"POST"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"DELETE"),", etc.), HttpClient will automatically\nrequest the resource pointed to in the location\nheader via ",(0,o.kt)("inlineCode",{parentName:"p"},"GET"),". This is in accordance with\n",(0,o.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7231#section-6.4.4"},"the spec"),".\nYou can optionally turn on this behavior also for\nother redirect codes - see ",(0,o.kt)("inlineCode",{parentName:"p"},"methodRewriting"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.followRedirect(true)\n")),(0,o.kt)("h4",{id:"httpclientbuilderfollowredirects"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.followRedirects()")),(0,o.kt)("p",null,"Alias for ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#httpclientbuilderfollowredirect"},(0,o.kt)("inlineCode",{parentName:"a"},"followRedirect()")),"."),(0,o.kt)("h4",{id:"httpclientbuildermaxredirects"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.maxRedirects()")),(0,o.kt)("p",null,"If exceeded, the request will be aborted and a\n",(0,o.kt)("inlineCode",{parentName:"p"},"MaxRedirectsError")," will be thrown:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.maxRedirects(5)\n")),(0,o.kt)("h4",{id:"httpclientbuildercacheoptions"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.cacheOptions()")),(0,o.kt)("p",null,"Set the cache options of the request\nfrom ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/http-cache-semantics"},(0,o.kt)("inlineCode",{parentName:"a"},"http-cache-semantics")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder, type CacheOptions } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nconst cacheOptions: CacheOptions = {\n  shared: true,\n  immutableMinTimeToLive: 1000,\n}\n\nbuilder.cacheOptions(cacheOptions)\n")),(0,o.kt)("h4",{id:"httpclientbuildercache"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.cache()")),(0,o.kt)("p",null,"A cache adapter instance for storing cached response data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst cache = new Map()\nconst builder = new HttpClientBuilder()\n\nbuilder.cache(cache)\n")),(0,o.kt)("h4",{id:"httpclientbuilderthrowhttperrors"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.throwHttpErrors()")),(0,o.kt)("p",null,"Determines if an error is thrown for unsuccessful\nresponses."),(0,o.kt)("p",null,"If this is disabled, requests that encounter an error\nstatus code will be resolved with the ",(0,o.kt)("inlineCode",{parentName:"p"},"response")," instead\nof throwing. This may be useful if you are checking for\nresource availability and are expecting error responses:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.throwHttpErrors(false)\n")),(0,o.kt)("h4",{id:"httpclientbuilderusername"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.username()")),(0,o.kt)("p",null,"Username for Basic Authentication:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.username('jlenon7')\n")),(0,o.kt)("h4",{id:"httpclientbuilderpassword"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.password()")),(0,o.kt)("p",null,"Password for Basic Authentication:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.username('12345')\n")),(0,o.kt)("h4",{id:"httpclientbuilderallowgetbody"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.allowGetBody()")),(0,o.kt)("p",null,"Set this to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to allow sending body for\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," method. However, the\n",(0,o.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7540#section-8.1.3"},"HTTP/2 specification"),"\nsays that ",(0,o.kt)("inlineCode",{parentName:"p"},"An HTTP GET request includes request header fields and no payload body"),",\ntherefore when using the HTTP/2 protocol this option will\nhave no effect. This option is only meant to interact with\nnon-compliant servers when you have no other choice."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("a",{parentName:"li",href:"https://tools.ietf.org/html/rfc7231#section-4.3.1"},"RFC 7231"),"\ndoesn't specify any particular behavior for the GET method\nhaving a payload, therefore ",(0,o.kt)("strong",{parentName:"li"},"it's considered an\n",(0,o.kt)("a",{parentName:"strong",href:"https://en.wikipedia.org/wiki/Anti-pattern"},"anti-pattern")),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.allowGetBody(true)\n")),(0,o.kt)("h4",{id:"httpclientbuildermethodrewriting"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.methodRewriting()")),(0,o.kt)("p",null,"Specifies if the HTTP request method should be\n",(0,o.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7231#section-6.4"},"rewritten as ",(0,o.kt)("inlineCode",{parentName:"a"},"GET")),"\non redirects."),(0,o.kt)("p",null,"As the ",(0,o.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7231#section-6.4"},"specification"),"\nprefers to rewrite the HTTP method only on ",(0,o.kt)("inlineCode",{parentName:"p"},"303")," responses,\nthis is HttpClient's default behavior.\nSetting ",(0,o.kt)("inlineCode",{parentName:"p"},"methodRewriting")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," will also rewrite ",(0,o.kt)("inlineCode",{parentName:"p"},"301"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"302")," responses, as allowed by the spec. This is the\nbehavior followed by ",(0,o.kt)("inlineCode",{parentName:"p"},"curl")," and browsers."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"HttpClient never performs method rewriting on ",(0,o.kt)("inlineCode",{parentName:"li"},"307")," and\n",(0,o.kt)("inlineCode",{parentName:"li"},"308")," responses, as this is [explicitly prohibited by the\n",(0,o.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/rfc/rfc7231#section-6.4.7"},"specification"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.methodRewriting(true)\n")),(0,o.kt)("h4",{id:"httpclientbuilderdnslookupipversion"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.dnsLookupIpVersion()")),(0,o.kt)("p",null,"Indicates which DNS record family to use."),(0,o.kt)("p",null,"Values:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"undefined"),": IPv4 (if present) or IPv6"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"4"),": Only IPv4"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"6"),": Only IPv6")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.dnsLookupIpVersion(6)\n")),(0,o.kt)("h4",{id:"httpclientbuilderparsejson"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.parseJson()")),(0,o.kt)("p",null,"Define a function to parse JSON responses:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import Bourne from '@hapi/bourne'\nimport { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.parseJson(text => Bourne.parse(text))\n")),(0,o.kt)("h4",{id:"httpclientbuilderstringifyjson"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.stringifyJson()")),(0,o.kt)("p",null,"Define a function to stringify JSON requests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.stringifyJson(object => JSON.stringify(object))\n")),(0,o.kt)("h4",{id:"httpclientbuilderretry"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.retry()")),(0,o.kt)("p",null,"An object representing ",(0,o.kt)("inlineCode",{parentName:"p"},"limit"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"calculateDelay"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"methods"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"statusCodes"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"maxRetryAfter")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"errorCodes")," fields for maximum retry count, retry\nhandler, allowed methods, allowed status codes,\nmaximum ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After"},(0,o.kt)("inlineCode",{parentName:"a"},"Retry-After")),"\ntime and allowed error codes."),(0,o.kt)("p",null,"Delays between retries counts with function\n",(0,o.kt)("inlineCode",{parentName:"p"},"1000 * Math.pow(2, retry) + Math.random() * 100"),",\nwhere ",(0,o.kt)("inlineCode",{parentName:"p"},"retry")," is attempt number (starts from 1)."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"calculateDelay")," property is a ",(0,o.kt)("inlineCode",{parentName:"p"},"function")," that\nreceives an object with ",(0,o.kt)("inlineCode",{parentName:"p"},"attemptCount"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"retryOptions"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"error")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"computedValue")," properties for current retry\ncount, the retry options, error and default computed value.\nThe function must return a delay in milliseconds\n(or a Promise resolving with it) (",(0,o.kt)("inlineCode",{parentName:"p"},"0")," return value cancels\nretry)."),(0,o.kt)("p",null,"By default, it retries ",(0,o.kt)("em",{parentName:"p"},"only")," on the specified methods,\nstatus codes, and on these network errors:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ETIMEDOUT"),": One of the ",(0,o.kt)("a",{parentName:"li",href:"#timeout"},"timeout")," limits were reached."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ECONNRESET"),": Connection was forcibly closed by a peer."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"EADDRINUSE"),": Could not bind to any free port."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ECONNREFUSED"),": Connection was refused by the server."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"EPIPE"),": The remote side of the stream being written has been closed."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ENOTFOUND"),": Couldn't resolve the hostname to an IP address."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ENETUNREACH"),": No internet connection."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"EAI_AGAIN"),": DNS lookup timed out.")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"If ",(0,o.kt)("inlineCode",{parentName:"li"},"maxRetryAfter")," is set to ",(0,o.kt)("inlineCode",{parentName:"li"},"undefined"),", it will use\n",(0,o.kt)("inlineCode",{parentName:"li"},"options.timeout"),"."),(0,o.kt)("li",{parentName:"ul"},"If ",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After"},(0,o.kt)("inlineCode",{parentName:"a"},"Retry-After")),"\nheader is greater than ",(0,o.kt)("inlineCode",{parentName:"li"},"maxRetryAfter"),", it will cancel the\nrequest."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.retry({\n  limit: 5,\n  calculateDelay: ({ attemptCount }) => {\n    return attemptCount * 1000\n  },\n  methods: ['GET'],\n  statusCodes: [[100, 199], 429, 404],\n  maxRetryAfter: 5000,\n  errorCodes: ['ETIMEDOUT'],\n})\n")),(0,o.kt)("h4",{id:"httpclientbuilderretrystrategy"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.retryStrategy()")),(0,o.kt)("p",null,"This method is just an alias to configure your own\nretry strategy."),(0,o.kt)("p",null,"The strategy function needs to return the delay\nbetween the execution count of each request, if the\nstrategy function returns 0, the retry is canceled:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.retryStrategy((error, execCount, retryObject) => {\n  if (execCount === 3) {\n    return 0\n  }\n\n  return 2000\n})\n")),(0,o.kt)("h4",{id:"httpclientbuilderlocaladdress"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.localAddress()")),(0,o.kt)("p",null,"From ",(0,o.kt)("inlineCode",{parentName:"p"},"http.RequestOptions"),". The IP address used to send\nthe request from."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.localAddress('192.168.0.1')\n")),(0,o.kt)("h4",{id:"httpclientbuildercreateconnection"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.createConnection()")),(0,o.kt)("p",null,"Define a function used to retrieve a ",(0,o.kt)("inlineCode",{parentName:"p"},"net.Socket")," instance\nwhen the ",(0,o.kt)("inlineCode",{parentName:"p"},"agent")," option is not used."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.createConnection(options => {\n  return new net.Socket(options)\n})\n")),(0,o.kt)("h4",{id:"httpclientbuilderhttps"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.https()")),(0,o.kt)("p",null,"Define options to make ",(0,o.kt)("inlineCode",{parentName:"p"},"https")," requests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.https({\n  rejectUnauthorized: false\n})\n")),(0,o.kt)("h4",{id:"httpclientbuilderencoding"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.encoding()")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings"},"Encoding"),"\nto be used on ",(0,o.kt)("inlineCode",{parentName:"p"},"setEncoding")," of the response data."),(0,o.kt)("p",null,"To get a ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/buffer.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Buffer")),", you\nneed to set ",(0,o.kt)("inlineCode",{parentName:"p"},"responseType")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"buffer")," instead. Don't set\nthis option to ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"This doesn't affect streams! Instead, you need to do\n",(0,o.kt)("inlineCode",{parentName:"li"},"HttpClientBuilder.stream(...).setEncoding(encoding)"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.encoding('utf8')\n")),(0,o.kt)("h4",{id:"httpclientbuilderresolvebodyonly"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.resolveBodyOnly()")),(0,o.kt)("p",null,"When set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," the promise will return the response\nbody instead of the response object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.resolveBodyOnly(true)\n")),(0,o.kt)("h4",{id:"httpclientbuilderresponsetype"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.responseType()")),(0,o.kt)("p",null,"The parsing method. The promise also has ",(0,o.kt)("inlineCode",{parentName:"p"},".text()"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},".json()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".buffer()")," methods which return another\nHttClient promise for the parsed body."),(0,o.kt)("p",null,"It's like setting the options to ",(0,o.kt)("inlineCode",{parentName:"p"},"{responseType: 'json', resolveBodyOnly: true}"),"\nbut without affecting the main HttpClient promise."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"When using streams, this option is ignored."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.responseType('json')\n")),(0,o.kt)("h4",{id:"httpclientbuilderpagination"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.pagination()")),(0,o.kt)("p",null,"Set pagination options to your request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.pagination({ countLimit: 100 })\n")),(0,o.kt)("h4",{id:"httpclientbuildersethost"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.setHost()")),(0,o.kt)("p",null,"Set the host option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.setHost(true)\n")),(0,o.kt)("h4",{id:"httpclientbuildermaxheadersize"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.maxHeaderSize()")),(0,o.kt)("p",null,"Set the maxHeaderSize option."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.maxHeaderSize(1000)\n")),(0,o.kt)("h4",{id:"httpclientbuilderenableunixsockets"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.enableUnixSockets()")),(0,o.kt)("p",null,"Set the enableUnixSockets option."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nbuilder.enableUnixSockets(true)\n")),(0,o.kt)("h4",{id:"httpclientbuilderstream"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.stream()")),(0,o.kt)("p",null,"Execute the request and return as stream:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nconst stream = await builder.stream()\n")),(0,o.kt)("h4",{id:"httpclientbuilderpaginate"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.paginate()")),(0,o.kt)("p",null,"Execute the request and return as paginated response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nconst paginatedResponse = await builder.paginate()\n")),(0,o.kt)("h4",{id:"httpclientbuilderrequest"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.request()")),(0,o.kt)("p",null,"Execute the request using all the options defined:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nconst response = await builder.request()\n")),(0,o.kt)("h4",{id:"httpclientbuilderget"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.get()")),(0,o.kt)("p",null,"Execute a ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," request using all the options defined:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nconst response = await builder.get()\n")),(0,o.kt)("h4",{id:"httpclientbuilderpost"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.post()")),(0,o.kt)("p",null,"Execute a ",(0,o.kt)("inlineCode",{parentName:"p"},"POST")," request using all the options defined:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nconst response = await builder.post()\n")),(0,o.kt)("h4",{id:"httpclientbuilderput"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.put()")),(0,o.kt)("p",null,"Execute a ",(0,o.kt)("inlineCode",{parentName:"p"},"PUT")," request using all the options defined:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nconst response = await builder.put()\n")),(0,o.kt)("h4",{id:"httpclientbuilderpatch"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.patch()")),(0,o.kt)("p",null,"Execute a ",(0,o.kt)("inlineCode",{parentName:"p"},"PATCH")," request using all the options defined:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nconst response = await builder.patch()\n")),(0,o.kt)("h4",{id:"httpclientbuilderdelete"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.delete()")),(0,o.kt)("p",null,"Execute a ",(0,o.kt)("inlineCode",{parentName:"p"},"DELETE")," request using all the options defined:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nconst response = await builder.delete()\n")),(0,o.kt)("h4",{id:"httpclientbuilderhead"},(0,o.kt)("inlineCode",{parentName:"h4"},"HttpClientBuilder.head()")),(0,o.kt)("p",null,"Execute a ",(0,o.kt)("inlineCode",{parentName:"p"},"HEAD")," request using all the options defined:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpClientBuilder } from '@athenna/common'\n\nconst builder = new HttpClientBuilder()\n\nconst response = await builder.head()\n")),(0,o.kt)("h3",{id:"is"},"Is"),(0,o.kt)("h4",{id:"iskindof"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::kindOf()")),(0,o.kt)("p",null,"Validate if the value is equals to some type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.kindOf('string', 'string') // true\n")),(0,o.kt)("h4",{id:"isuuid"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Uuid()")),(0,o.kt)("p",null,"Validate if the value is a valid UUID v4:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Uuid('adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11') // true\nIs.Uuid('adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', { prefix: 'adm' }) // true\n")),(0,o.kt)("h4",{id:"isdefined"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Defined()")),(0,o.kt)("p",null,"Validate if the value is defined:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Defined('Hello World') // true\n")),(0,o.kt)("h4",{id:"isjson"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Json()")),(0,o.kt)("p",null,"Validate if the value is a valid JSON string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Json('{ \"name\": \"Jo\xe3o Lenon\" }') // true\n")),(0,o.kt)("h4",{id:"isip"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Ip()")),(0,o.kt)("p",null,"Validate if the value is a valid IP address:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Ip('192.168.0.1') // true\n")),(0,o.kt)("h4",{id:"isempty"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Empty()")),(0,o.kt)("p",null,"Validate if the value is empty:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Empty(undefined) // true\nIs.Empty('') // true\nIs.Empty([]) // true\nIs.Empty({}) // true\n")),(0,o.kt)("h4",{id:"iscep"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Cep()")),(0,o.kt)("p",null,"Validate if the value is a valid Brazil CEP:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Cep('85869-676') // true\n")),(0,o.kt)("h4",{id:"iscpf"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Cpf()")),(0,o.kt)("p",null,"Validate if the value is a valid Brazil Cpf:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Cpf('208.464.590-51') // true\n")),(0,o.kt)("h4",{id:"iscnpj"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Cnpj()")),(0,o.kt)("p",null,"Validate if the value is a valid Brazil Cnpj:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Cnpj('71.151.950/0001-65') // true\n")),(0,o.kt)("h4",{id:"isasync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Async()")),(0,o.kt)("p",null,"Verify if a function is async:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Async(async () => {}) // true\nIs.Async(async function () {}) // true\n")),(0,o.kt)("h4",{id:"isundefined"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Undefined()")),(0,o.kt)("p",null,"Validate if the value is undefined:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Undefined(undefined) // true\n")),(0,o.kt)("h4",{id:"isnull"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Null()")),(0,o.kt)("p",null,"Validate if the value is null:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Null(null) // true\n")),(0,o.kt)("h4",{id:"isboolean"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Boolean()")),(0,o.kt)("p",null,"Validate if the value is boolean:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Boolean(true) // true\n")),(0,o.kt)("h4",{id:"isbuffer"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Buffer()")),(0,o.kt)("p",null,"Validate if the value is Buffer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Buffer(new Buffer()) // true\n")),(0,o.kt)("h4",{id:"isnumber"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Number()")),(0,o.kt)("p",null,"Validate if the value is number:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Number(10) // true\n")),(0,o.kt)("h4",{id:"isstring"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::String()")),(0,o.kt)("p",null,"Validate if the value is string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.String('Athenna is the best!') // true\n")),(0,o.kt)("h4",{id:"isobject"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Object()")),(0,o.kt)("p",null,"Validate if the value is Object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Object({ hello: 'world!' }) // true\n")),(0,o.kt)("h4",{id:"isdate"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Date()")),(0,o.kt)("p",null,"Validate if the value is Date:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Date(new Date()) // true\n")),(0,o.kt)("h4",{id:"isarray"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Array()")),(0,o.kt)("p",null,"Validate if the value is array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Array([1, 2, 3, 4, 5]) // true\n")),(0,o.kt)("h4",{id:"isregexp"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Regexp()")),(0,o.kt)("p",null,"Validate if the value is Regexp:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Regexp(new RegExp()) // true\n")),(0,o.kt)("h4",{id:"iserror"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Error()")),(0,o.kt)("p",null,"Validate if the value is error:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Error(new Error()) // true\n")),(0,o.kt)("h4",{id:"isexception"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Exception()")),(0,o.kt)("p",null,"Validate if the value is ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#exception"},(0,o.kt)("inlineCode",{parentName:"a"},"Exception")),"\nor any variation that extends from it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is, Exception } from '@athenna/common'\n\nIs.Exception(new Error()) // false\nIs.Exception(new Exception()) // true\n")),(0,o.kt)("h4",{id:"isclass"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Class()")),(0,o.kt)("p",null,"Validate if the value is class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Class(Is) // true\n")),(0,o.kt)("h4",{id:"isfloat"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::Float()")),(0,o.kt)("p",null,"Validate if the value is float:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.Float(10.5) // true\n")),(0,o.kt)("h4",{id:"isarrayofobjects"},(0,o.kt)("inlineCode",{parentName:"h4"},"Is::ArrayOfObjects()")),(0,o.kt)("p",null,"Validate if the value is an array of objects:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is } from '@athenna/common'\n\nIs.ArrayOfObjects([{}, {}, {}]) // true\n")),(0,o.kt)("h3",{id:"json"},"Json"),(0,o.kt)("h4",{id:"jsonbuilder"},(0,o.kt)("inlineCode",{parentName:"h4"},"Json::builder()")),(0,o.kt)("p",null,"Create a new instance of ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#object-builder"},"ObjectBuilder"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Json } from '@athenna/common'\n\nconst builder = Json.builder({ referencedValues: false })\n")),(0,o.kt)("h4",{id:"jsoncopy"},(0,o.kt)("inlineCode",{parentName:"h4"},"Json::copy()")),(0,o.kt)("p",null,"Deep copy any object without memory reference:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Json } from '@athenna/common'\n\nconst object = { name: 'Jo\xe3o Lenon' }\nconst copiedObject = Json.copy(object)\n\nobject.name = 'Victor Tesoura'\n\nconsole.log(object.name === copiedObject.name) // false\n")),(0,o.kt)("h4",{id:"jsongetjson"},(0,o.kt)("inlineCode",{parentName:"h4"},"Json::getJson()")),(0,o.kt)("p",null,"Find all JSON values inside a string and return it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Json } from \'@athenna/common\'\n\nconst string = \'Hello { "name": "Jo\xe3o Lenon" }\'\nconst arrayOfFoundJson = Json.getJson(string)\n// [\'{"name":"Jo\xe3o Lenon"}\']\n')),(0,o.kt)("h4",{id:"jsonparse"},(0,o.kt)("inlineCode",{parentName:"h4"},"Json::parse()")),(0,o.kt)("p",null,"Safe parse a JSON string. If the JSON is not valid,\nreturns ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Json } from '@athenna/common'\n\nconst string = 'Hello { \"name\": \"Lenon\" }'\nconst json = Json.parse(string) // null\n\nconsole.log('{ \"name\": \"Lenon\" }') // { name: 'Lenon' }\n")),(0,o.kt)("h4",{id:"jsonobservechanges"},(0,o.kt)("inlineCode",{parentName:"h4"},"Json::observeChanges()")),(0,o.kt)("p",null,"Observe any change done inside an object and execute some closure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Json } from '@athenna/common'\n\nconst object = { name: 'Lenon' }\n\nJson.observeChanges(object, (value) => {\n  console.log('Object changed!', value)\n})\n\nobject.name = 'Jo\xe3o Lenon'\n")),(0,o.kt)("h4",{id:"jsonfillable"},(0,o.kt)("inlineCode",{parentName:"h4"},"Json::fillable()")),(0,o.kt)("p",null,"Remove all keys from data that is not inside the array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Json } from '@athenna/common'\n\nconst data = {\n  name: 'Jo\xe3o Lenon',\n  age: 22,\n  role: 'admin',\n  deletedAt: new Date()\n}\n\nconst parsedData = Json.fillable(data, ['name', 'age'])\n// { name: 'Jo\xe3o Lenon', age: 22 }\n")),(0,o.kt)("h4",{id:"jsonget"},(0,o.kt)("inlineCode",{parentName:"h4"},"Json::get()")),(0,o.kt)("p",null,"Get the object properties using dot notation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Json } from '@athenna/common'\n\nconst object = {\n  name: 'Jo\xe3o Lenon',\n  age: 22,\n  role: 'admin',\n  deletedAt: new Date(),\n  configs: {\n    theme: 'dark',\n    language: 'en'\n  }\n}\n\nJson.get(object, 'name') // Jo\xe3o Lenon\nJson.get(object, 'configs.theme') // dark\n")),(0,o.kt)("h3",{id:"module"},"Module"),(0,o.kt)("h4",{id:"moduleget"},(0,o.kt)("inlineCode",{parentName:"h4"},"Module::get()")),(0,o.kt)("p",null,"Get the default module or the first exported module of a file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="default.ts"',title:'"default.ts"'},"export default {\n  name: 'Jo\xe3o Lenon'\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="object.ts"',title:'"object.ts"'},"export const person = {\n  name: 'Jo\xe3o Lenon'\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Module } from '@athenna/common'\n\nawait Module.get(import('./default.js')) // { name: 'Jo\xe3o Lenon' }\nawait Module.get(import('./object.js')) // { name: 'Jo\xe3o Lenon' }\n")),(0,o.kt)("h4",{id:"modulegetall"},(0,o.kt)("inlineCode",{parentName:"h4"},"Module::getAll()")),(0,o.kt)("p",null,"Get all exported modules of a path and return as array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Module } from '@athenna/common'\n\nconst modules = [import('./object.js'), import('./default.js')]\n\nawait Module.getAll(modules)\n// [{ name: 'Jo\xe3o Lenon' }, { name: 'Jo\xe3o Lenon' }]\n")),(0,o.kt)("h4",{id:"modulegetfrom"},(0,o.kt)("inlineCode",{parentName:"h4"},"Module::getFrom()")),(0,o.kt)("p",null,"Same as ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#moduleget"},(0,o.kt)("inlineCode",{parentName:"a"},"Module::get()")),"\nmethod, but import from a path:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Module } from '@athenna/common'\n\nawait Module.getFrom('./default.js') // { name: 'Jo\xe3o Lenon' }\nawait Module.getFrom('./object.js') // { name: 'Jo\xe3o Lenon' }\n")),(0,o.kt)("h4",{id:"modulegetallfrom"},(0,o.kt)("inlineCode",{parentName:"h4"},"Module::getAllFrom()")),(0,o.kt)("p",null,"Same as ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#modulegetall"},(0,o.kt)("inlineCode",{parentName:"a"},"Module::getAll()")),"\nmethod, but import from a path:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Module } from '@athenna/common'\n\nconst paths = ['./object.js', './default.js']\n\nawait Module.getAllFrom(paths)\n// [{ name: 'Jo\xe3o Lenon' }, { name: 'Jo\xe3o Lenon' }]\n")),(0,o.kt)("h4",{id:"modulegetwithalias"},(0,o.kt)("inlineCode",{parentName:"h4"},"Module::getWithAlias()")),(0,o.kt)("p",null,"Get the default module or the first exported module\nof a file with alias:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="MyService.ts"',title:'"MyService.ts"'},"export default class MyService {}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Module } from '@athenna/common'\n\nconst modules = [import('./MyService.js')]\nconst subAlias = 'App/Services'\n\nawait Module.getWithAlias(modules, subAlias)\n// { alias: 'App/Services/MyService', module: [class MyService] }\n")),(0,o.kt)("h4",{id:"modulegetallwithalias"},(0,o.kt)("inlineCode",{parentName:"h4"},"Module::getAllWithAlias()")),(0,o.kt)("p",null,"Get all exported modules of a path and return as array with alias:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Module } from '@athenna/common'\n\nconst modules = [import('./MyService.js')]\nconst subAlias = 'App/Services'\n\nawait Module.getAllWithAlias(modules, subAlias)\n// [{ alias: 'App/Services/MyService', module: { name: 'Jo\xe3o Lenon' } }]\n")),(0,o.kt)("h4",{id:"modulegetfromwithalias"},(0,o.kt)("inlineCode",{parentName:"h4"},"Module::getFromWithAlias()")),(0,o.kt)("p",null,"Same as ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#modulegetwithalias"},(0,o.kt)("inlineCode",{parentName:"a"},"Module::getWithAlias()")),"\nmethod, but import from a path:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Module } from '@athenna/common'\n\nconst paths = ['./MyService.js']\nconst subAlias = 'App/Services'\n\nawait Module.getAllWithAlias(paths, subAlias)\n// [{ alias: 'App/Services/MyService', module: { name: 'Jo\xe3o Lenon' } }]\n")),(0,o.kt)("h4",{id:"modulegetallfromwithalias"},(0,o.kt)("inlineCode",{parentName:"h4"},"Module::getAllFromWithAlias()")),(0,o.kt)("p",null,"Same as ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#modulegetallwithalias"},(0,o.kt)("inlineCode",{parentName:"a"},"Module::getAllWithAlias()")),"\nmethod, but import from a path:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Module } from '@athenna/common'\n\nconst paths = ['./MyService.js']\nconst subAlias = 'App/Services'\n\nawait Module.getAllWithAlias(paths, subAlias)\n// [{ alias: 'App/Services/MyService', module: { name: 'Jo\xe3o Lenon' } }]\n")),(0,o.kt)("h4",{id:"modulegetalljsfilesfrom"},(0,o.kt)("inlineCode",{parentName:"h4"},"Module::getAllJSFilesFrom()")),(0,o.kt)("p",null,"Get all the ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#pathext"},(0,o.kt)("inlineCode",{parentName:"a"},"Path.ext()")),"\nfiles from a path:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File, Path, Module } from '@athenna/common'\n\nconst files: File[] = await Module.getAllJSFilesFrom(Path.app())\n")),(0,o.kt)("h4",{id:"moduleimport"},(0,o.kt)("inlineCode",{parentName:"h4"},"Module::import()")),(0,o.kt)("p",null,"Import a full path using the path href to ensure\ncompatibility between OS's:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Module } from '@athenna/common'\n\nconst module = await Module.import('./MyService.js')\n")),(0,o.kt)("h4",{id:"modulesafeimport"},(0,o.kt)("inlineCode",{parentName:"h4"},"Module::safeImport()")),(0,o.kt)("p",null,"Same as ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#moduleimport"},(0,o.kt)("inlineCode",{parentName:"a"},"Module::import()")),"\nmethod but return null if the module does not exist:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Module } from '@athenna/common'\n\nconst module = await Module.safeImport('./notFound.js')\n")),(0,o.kt)("h4",{id:"moduleresolve"},(0,o.kt)("inlineCode",{parentName:"h4"},"Module::resolve()")),(0,o.kt)("p",null,"Resolve the module path by meta url and import it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Module } from '@athenna/common'\n\nconst module = await Module.resolve('./MyService.js', import.meta.url)\n")),(0,o.kt)("h4",{id:"modulecreatedirname"},(0,o.kt)("inlineCode",{parentName:"h4"},"Module::createDirname()")),(0,o.kt)("p",null,"Crete the old ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/modules.html#__dirname"},(0,o.kt)("inlineCode",{parentName:"a"},"__dirname")),"\nproperty:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Module } from '@athenna/common'\n\nconst __dirname = Module.createDirname(import.meta.url)\n")),(0,o.kt)("h4",{id:"modulecreatefilename"},(0,o.kt)("inlineCode",{parentName:"h4"},"Module::createFilename()")),(0,o.kt)("p",null,"Crete the old ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/modules.html#__filename"},(0,o.kt)("inlineCode",{parentName:"a"},"__filename")),"\nproperty:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Module } from '@athenna/common'\n\nconst __filename = Module.createFilename(import.meta.url)\n")),(0,o.kt)("h4",{id:"modulecreaterequire"},(0,o.kt)("inlineCode",{parentName:"h4"},"Module::createRequire()")),(0,o.kt)("p",null,"Crete the old ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/modules.html#requireid"},(0,o.kt)("inlineCode",{parentName:"a"},"require()")),"\nfunction:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Module } from '@athenna/common'\n\nconst require = Module.createRequire(import.meta.url)\n")),(0,o.kt)("h3",{id:"number"},"Number"),(0,o.kt)("h4",{id:"numbergethigher"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::getHigher()")),(0,o.kt)("p",null,"Get the higher number of an array of numbers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst higher = Number.getHigher([1, 2, 3, 4, 5]) // 5\n")),(0,o.kt)("h4",{id:"numbergetkmradius"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::getKmRadius()")),(0,o.kt)("p",null,"Get km radius between two coordinates:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst centerCord = { \n  latitude: -25503207, \n  longitude: -545390592 \n}\n\nconst pointCord = { \n  latitude: -254957901, \n  longitude: -545671577 \n}\n\nconst radius = Number.getKmRadius(centerCord, pointCord)\n// 5338.683217695541\n")),(0,o.kt)("h4",{id:"numbergetlower"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::getLower()")),(0,o.kt)("p",null,"Get the lower number of an array of numbers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst lower = Number.getLower([1, 2, 3, 4, 5]) // 1\n")),(0,o.kt)("h4",{id:"numberextractnumber"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::extractNumber()")),(0,o.kt)("p",null,"Extract all numbers inside a string and return as\na unique number:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst string = 'Hello 123 World 456'\nconst number = Number.extractNumber(string) // 123456\n")),(0,o.kt)("h4",{id:"numberextractnumbers"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::extractNumbers()")),(0,o.kt)("p",null,"Extract all numbers inside a string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst string = 'Hello 123 World 456'\nconst numbers = Number.extractNumbers(string) // ['123', '456']\n")),(0,o.kt)("h4",{id:"numberargsaverage"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::argsAverage()")),(0,o.kt)("p",null,"Get the average of all numbers in function arguments:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst average = Number.argsAverage(1, 2, 3, 4, 5) // 3\n")),(0,o.kt)("h4",{id:"numberarrayaverage"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::arrayAverage()")),(0,o.kt)("p",null,"Get the average of all numbers in an array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst average = Number.argsAverage([1, 2, 3, 4, 5]) // 3\n")),(0,o.kt)("h4",{id:"numberrandomintfrominterval"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::randomIntFromInterval()")),(0,o.kt)("p",null,"Generate a random integer number between two numbers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst random = Number.randomIntFromInterval(1, 10) // 5\n")),(0,o.kt)("h3",{id:"objectbuilder"},"ObjectBuilder"),(0,o.kt)("h4",{id:"new-objectbuilder"},(0,o.kt)("inlineCode",{parentName:"h4"},"new ObjectBuilder()")),(0,o.kt)("p",null,"Create a new instance of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder({ \n  // Dont create memory referenced values.\n  referencedValues: false,\n  // Dont ignore null values when calling `set()` method.\n  ignoreNull: false,\n  // Ignore undefined values when calling `set()` method.\n  ignoreUndefined: true,\n  // Default value to set if value is undefined on calling `set()` method.\n  defaultValue: 'Hello World' \n})\n\nconst key = 'name'\nconst value = 'Jo\xe3o Lenon'\nconst defaultValue = 'User Name'\n\nbuilder.set(key, value, defaultValue)\nconsole.log(builder.get(key)) // Jo\xe3o Lenon\n\nbuilder.set(key, undefined)\nconsole.log(builder.get(key)) // Hello World\n")),(0,o.kt)("h4",{id:"objectbuilderset"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.set()")),(0,o.kt)("p",null,"Set a value to the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Jo\xe3o Lenon', age: 22, options: { role: 'admin' } })\n\nconsole.log(builder.get())\n// { name: 'Jo\xe3o Lenon', age: 22, options: { role: 'admin' } }\n")),(0,o.kt)("p",null,"Set a value to the object builder using dot notation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\nconst defaultValue = null\n\nbuilder.set('name', 'Jo\xe3o Lenon', defaultValue)\nbuilder.set('age', 22, defaultValue)\nbuilder.set('deletedAt', undefined, defaultValue)\nbuilder.set('options.role', 'admin', defaultValue)\n\nconsole.log(builder.get())\n// { name: 'Jo\xe3o Lenon', age: 22, deletedAt: null, options: { role: 'admin' } }\n")),(0,o.kt)("h4",{id:"objectbuilderdelete"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.delete()")),(0,o.kt)("p",null,"Delete a value from the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\nbuilder.delete('name')\n")),(0,o.kt)("h4",{id:"objectbuilderget"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.get()")),(0,o.kt)("p",null,"Get the value of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon', options: { role: 'admin' } })\n\nconsole.log(builder.get('name')) // Lenon\nconsole.log(builder.get('options.role')) // admin\n")),(0,o.kt)("h4",{id:"objectbuilderkeys"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.keys()")),(0,o.kt)("p",null,"Get all the keys of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nconsole.log(builder.keys()) // ['name']\n")),(0,o.kt)("h4",{id:"objectbuildervalues"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.values()")),(0,o.kt)("p",null,"Get all the values of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nconsole.log(builder.values()) // ['Lenon']\n")),(0,o.kt)("h4",{id:"objectbuilderentries"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.entries()")),(0,o.kt)("p",null,"Get all the entries of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nconsole.log(builder.entries()) // [['name', 'Lenon']]\n")),(0,o.kt)("h4",{id:"objectbuilderforeachkey"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.forEachKey()")),(0,o.kt)("p",null,"Iterate over all the keys of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nbuilder.forEachKey((key) => {\n  console.log(key) // name\n})\n")),(0,o.kt)("h4",{id:"objectbuilderforeachvalue"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.forEachValue()")),(0,o.kt)("p",null,"Iterate over all the values of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nbuilder.forEachValue((value) => {\n  console.log(value) // Lenon\n})\n")),(0,o.kt)("h4",{id:"objectbuilderforeachentry"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.forEachEntry()")),(0,o.kt)("p",null,"Iterate over all the entries of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nbuilder.forEachEntry(([key, value]) => {\n  console.log(key, value) // name Lenon\n})\n")),(0,o.kt)("h4",{id:"objectbuilderis--objectbuilderisnot"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.is()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.isNot()")),(0,o.kt)("p",null,"Verify if the object key path is or not the same value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nbuilder.is('name', 'Lenon') // true\nbuilder.isNot('name', 'Lenon') // false\n")),(0,o.kt)("h4",{id:"objectbuilderexists--objectbuildernotexists"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.exists()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.notExists()")),(0,o.kt)("p",null,"Verify if the object key path exists or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nbuilder.exists('name') // true\nbuilder.notExists('name') // false\n")),(0,o.kt)("h4",{id:"objectbuilderexistsall--objectbuildernotexistsall"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.existsAll()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.notExistsAll()")),(0,o.kt)("p",null,"Verify if all the object key paths exists or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon', age: 22 })\n\nbuilder.existsAll(['name', 'age']) // true\nbuilder.notExistsAll('name', 'age') // false\n")),(0,o.kt)("h3",{id:"options"},"Options"),(0,o.kt)("h4",{id:"optionscreate"},(0,o.kt)("inlineCode",{parentName:"h4"},"Options::create()")),(0,o.kt)("p",null,"Creates an option object with default values:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Options } from '@athenna/common'\n\ntype Options = {\n  opts1?: boolean\n  opts2?: string\n}\n\nfunction doSomething(options: Options = {}) {\n  options = Options.create(options, {\n    opts1: true,\n    opts2: 'Hello World'\n  }) // { opts1: false, opts2: 'Hello World' }\n}\n\ndoSomething({ opts1: false })\n")),(0,o.kt)("h4",{id:"optionsbind"},(0,o.kt)("inlineCode",{parentName:"h4"},"Options::bind()")),(0,o.kt)("p",null,"Return a closure of the object with the same object\ninstance binded on it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Options } from '@athenna/common'\n\nclass Person {\n  constructor(public name: string) {}\n\n  greet() {\n    console.log(`Hello ${this.name}`)\n  }\n}\n\nconst closure = Options.bind(new Person('Jo\xe3o'), 'greet')\n\nclosure() // Hello Jo\xe3o\n")),(0,o.kt)("h4",{id:"optionswhendefined"},(0,o.kt)("inlineCode",{parentName:"h4"},"Options.whenDefined()")),(0,o.kt)("p",null,"Execute some closure only when something is defined:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is, Options } from '@athenna/common'\n\nOptions.whenDefined('Helloo', (statement) => {\n  console.log(statement) // Helloo\n})\n")),(0,o.kt)("h3",{id:"parser"},"Parser"),(0,o.kt)("h4",{id:"parserstringtoarray"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::stringToArray()")),(0,o.kt)("p",null,"Parse a string to an array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst string = 'hello-world-!'\nconst separator = '-'\n\nconst array = Parser.stringToArray(string, separator)\n// ['hello', 'world', '!']\n")),(0,o.kt)("h4",{id:"parserarraytostring"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::arrayToString()")),(0,o.kt)("p",null,"Parse an array of strings to a string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst array = ['hello', 'world', '!']\nconst string = Parser.arrayToString(array, { separator: '-' })\n// 'hello-world-!'\n")),(0,o.kt)("h4",{id:"parserstringtonumber"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::stringToNumber()")),(0,o.kt)("p",null,"Parse a string to a integer or float number:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst integer = Parser.stringToNumber('12345')\n// 12345\n\nconst float = Parser.stringToNumber('100.000,000000')\n// 100000000000\n")),(0,o.kt)("p",null,"You can also set that the string is a coordinate to force\nparsing to a float:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst isCoordinate = true\nconst float = Parser.stringToNumber('15,23456', isCoordinate)\n")),(0,o.kt)("h4",{id:"parserjsontoformdata"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::jsonToFormData()")),(0,o.kt)("p",null,"Parse an object to form data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst formData = Parser.jsonToFormData({\n  name: 'Jo\xe3o Lenon',\n  age: 22,\n})\n// &name=Jo\xe3o%20Lenon&age=22\n")),(0,o.kt)("h4",{id:"parserformdatatojson"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::formDataToJson()")),(0,o.kt)("p",null,"Parse form data to an object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst json = Parser.formDataToJson('&name=Jo\xe3o%20Lenon&age=22')\n// { name: 'Jo\xe3o Lenon', age: '22' }\n")),(0,o.kt)("h4",{id:"parserlinktohref"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::linkToHref()")),(0,o.kt)("p",null,"Parse all links inside the string to HTML link with ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," tag:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst string = 'Visit my website https://athenna.io'\nconst html = Parser.linkToHref(string)\n// Visit my website <a href=\"https://athenna.io\">https://athenna.io</a>\n")),(0,o.kt)("h4",{id:"parsersizetobyte"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::sizeToByte()")),(0,o.kt)("p",null,"Parse a number to byte format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst size = Parser.sizeToByte(1024)\n// 1.00 KB\n")),(0,o.kt)("h4",{id:"parserbytetosize"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::byteToSize()")),(0,o.kt)("p",null,"Parse a byte to number format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst size = Parser.byteToSize('1.00 KB')\n// 1024\n")),(0,o.kt)("h4",{id:"parsertimetoms"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::timeToMs()")),(0,o.kt)("p",null,"Parse a time to milliseconds:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst ms = Parser.timeToMs('1s')\n// 1000\n")),(0,o.kt)("h4",{id:"parsermstotime"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::msToTime()")),(0,o.kt)("p",null,"Parse milliseconds to time:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst ms = Parser.msToTime(1000)\n// 1s\n")),(0,o.kt)("h4",{id:"parserstatuscodetoreason"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::statusCodeToReason()")),(0,o.kt)("p",null,"Parse a status code to a reason string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst reason = Parser.statusCodeToReason(200)\n// OK\n")),(0,o.kt)("h4",{id:"parserreasontostatuscode"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::reasonToStatusCode()")),(0,o.kt)("p",null,"Parse reason to a status code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst statusCode = Parser.reasonToStatusCode('OK')\n// 200\n")),(0,o.kt)("h4",{id:"parserdburltoconnectionobj"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::dbUrlToConnectionObj()")),(0,o.kt)("p",null,"Parses a database url to a connection object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst url = 'mysql://user:pass@localhost:3306/database?hello=true'\nconst connection = Parser.dbUrlToConnectionObj(url)\n// { \n//    protocol: 'mysql', \n//    user: 'user', \n//    password: 'pass', \n//    host: 'localhost', \n//    port: 3306, \n//    database: 'database', \n//    options: { hello: 'true' } \n// }\n")),(0,o.kt)("h4",{id:"parserconnectionobjtodburl"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::connectionObjToDbUrl()")),(0,o.kt)("p",null,"Parses a connection object to a database url:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst connectionObj = { \n   protocol: 'mysql', \n   user: 'user', \n   password: 'pass', \n   host: 'localhost', \n   port: 3306, \n   database: 'database', \n   options: { hello: 'true' } \n}\n\nconst url = Parser.connectionObjToDbUrl(connectionObj)\n// mysql://user:pass@localhost:3306/database?hello=true\n")),(0,o.kt)("h4",{id:"parserobjecttobuilder"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::objectToBuilder()")),(0,o.kt)("p",null,"Parse an object to an ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#object-builder"},(0,o.kt)("inlineCode",{parentName:"a"},"ObjectBuilder"))," instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst object = { name: 'Jo\xe3o Lenon', age: 22 }\nconst builder = Parser.objectToBuilder(object)\n")),(0,o.kt)("h4",{id:"parserarrayobjecttoarraybuilder"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::arrayObjectToArrayBuilder()")),(0,o.kt)("p",null,"Parse an array of objects to an array of ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#object-builder"},(0,o.kt)("inlineCode",{parentName:"a"},"ObjectBuilder"))," instances:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst array = [{ name: 'Jo\xe3o Lenon', age: 22 }]\nconst builders = Parser.arrayObjectToArrayBuilder(array)\n")),(0,o.kt)("h3",{id:"path"},"Path"),(0,o.kt)("h4",{id:"pathdirs"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::dirs")),(0,o.kt)("p",null,"An object with all base directories that ",(0,o.kt)("inlineCode",{parentName:"p"},"Path")," uses to create\nfull paths:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.dirs.services) // app/services\nconsole.log(Path.dirs.controllers) // app/http/controllers\nconsole.log(Path.dirs.bootstrap) // bootstrap\n")),(0,o.kt)("h4",{id:"pathmergedirs"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::mergeDirs()")),(0,o.kt)("p",null,"Merge the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs")," object with a new object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.mergeDirs({\n  services: 'app/internal/services',\n  controllers: 'app/internal/http/controllers',\n  bootstrap: 'bin',\n})\n")),(0,o.kt)("h4",{id:"pathext"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::ext()")),(0,o.kt)("p",null,"Return the default extension that the application is using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nprocess.env.IS_TS = 'true'\n\nconsole.log(Path.ext()) // ts\n\nprocess.env.IS_TS = 'false'\n\nconsole.log(Path.ext()) // js\n")),(0,o.kt)("h4",{id:"pathpwd"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::pwd()")),(0,o.kt)("p",null,"Return the root path where the project is running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.pwd()) // /home/user/athenna-project\n")),(0,o.kt)("h4",{id:"pathsrc"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::src()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.src"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.src()) // /home/user/athenna-project/src\n")),(0,o.kt)("h4",{id:"pathsetsrc"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setSrc()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.src")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setSrc('src/app')\n")),(0,o.kt)("h4",{id:"pathbin"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::bin()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.bin"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.bin()) // /home/user/athenna-project/bin\n")),(0,o.kt)("h4",{id:"pathsetbin"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setBin()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.bin")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setBin('bin/app')\n")),(0,o.kt)("h4",{id:"pathapp"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::app()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.app"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.app()) // /home/user/athenna-project/app\n")),(0,o.kt)("h4",{id:"pathsetapp"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setApp()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.app")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setApp('app/app')\n")),(0,o.kt)("h4",{id:"pathboostrap"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::boostrap()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.boostrap"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.boostrap()) // /home/user/athenna-project/boostrap\n")),(0,o.kt)("h4",{id:"pathsetbootstrap"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setBootstrap()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.bootstrap")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setBootstrap('bootstrap/app')\n")),(0,o.kt)("h4",{id:"pathconfig"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::config()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.config"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.config()) // /home/user/athenna-project/config\n")),(0,o.kt)("h4",{id:"pathsetconfig"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setConfig()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.config")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setConfig('config/app')\n")),(0,o.kt)("h4",{id:"pathdatabase"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::database()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.database"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.database()) // /home/user/athenna-project/database\n")),(0,o.kt)("h4",{id:"pathsetdatabase"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setDatabase()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.database")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setDatabase('database/app')\n")),(0,o.kt)("h4",{id:"pathlang"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::lang()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.lang"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.lang()) // /home/user/athenna-project/lang\n")),(0,o.kt)("h4",{id:"pathsetlang"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setLang()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.lang")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setLang('lang/app')\n")),(0,o.kt)("h4",{id:"pathnodemodules"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::nodeModules()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.nodeModules"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.nodeModules()) // /home/user/athenna-project/nodeModules\n")),(0,o.kt)("h4",{id:"pathsetnodemodules"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setNodeModules()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.nodeModules")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setNodeModules('node_modules/app')\n")),(0,o.kt)("h4",{id:"pathproviders"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::providers()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.providers"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.providers()) // /home/user/athenna-project/providers\n")),(0,o.kt)("h4",{id:"pathsetproviders"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setProviders()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.providers")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setProviders('providers/app')\n")),(0,o.kt)("h4",{id:"pathfacades"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::facades()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.facades"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.facades()) // /home/user/athenna-project/providers/facades\n")),(0,o.kt)("h4",{id:"pathsetfacades"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setFacades()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.facades")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setFacades('pfacades/app')\n")),(0,o.kt)("h4",{id:"pathpublic"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::public()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.public"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.public()) // /home/user/athenna-project/public\n")),(0,o.kt)("h4",{id:"pathsetpublic"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setPublic()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.public")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setPublic('public/app')\n")),(0,o.kt)("h4",{id:"pathresources"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::resources()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.resources"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.resources()) // /home/user/athenna-project/resources\n")),(0,o.kt)("h4",{id:"pathsetresources"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setResources()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.resources")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setResources('resources/app')\n")),(0,o.kt)("h4",{id:"pathroutes"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::routes()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.routes"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.routes()) // /home/user/athenna-project/routes\n")),(0,o.kt)("h4",{id:"pathsetroutes"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setRoutes()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.routes")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setRoutes('routes/app')\n")),(0,o.kt)("h4",{id:"pathstorage"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::storage()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.storage"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.storage()) // /home/user/athenna-project/storage\n")),(0,o.kt)("h4",{id:"pathsetstorage"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setStorage()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.storage")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setStorage('storage/app')\n")),(0,o.kt)("h4",{id:"pathtests"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::tests()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.tests"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.tests()) // /home/user/athenna-project/tests\n")),(0,o.kt)("h4",{id:"pathsettests"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setTests()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.tests")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setTests('tests/app')\n")),(0,o.kt)("h4",{id:"pathlogs"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::logs()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.logs"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.logs()) // /home/user/athenna-project/storage/logs\n")),(0,o.kt)("h4",{id:"pathsetlogs"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setLogs()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.logs")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setLogs('logs/app')\n")),(0,o.kt)("h4",{id:"pathviews"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::views()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.views"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.views()) // /home/user/athenna-project/resources/views\n")),(0,o.kt)("h4",{id:"pathsetviews"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setViews()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.views")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setViews('views/app')\n")),(0,o.kt)("h4",{id:"pathstatic"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::static()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.static"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.static()) // /home/user/athenna-project/public/static\n")),(0,o.kt)("h4",{id:"pathsetstatic"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setStatic()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.static")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setStatic('static/app')\n")),(0,o.kt)("h4",{id:"pathassets"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::assets()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.assets"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.assets()) // /home/user/athenna-project/public/assets\n")),(0,o.kt)("h4",{id:"pathsetassets"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setAssets()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.assets")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setAssets('assets/app')\n")),(0,o.kt)("h4",{id:"pathlocales"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::locales()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.locales"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.locales()) // /home/user/athenna-project/resources/locales\n")),(0,o.kt)("h4",{id:"pathsetlocales"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setLocales()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.locales")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setLocales('locales/app')\n")),(0,o.kt)("h4",{id:"pathstubs"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::stubs()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.stubs"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.stubs()) // /home/user/athenna-project/tests/stubs\n")),(0,o.kt)("h4",{id:"pathsetstubs"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setStubs()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.stubs")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setStubs('stubs/app')\n")),(0,o.kt)("h4",{id:"pathhttp"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::http()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.http"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.http()) // /home/user/athenna-project/app/http\n")),(0,o.kt)("h4",{id:"pathsethttp"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setHttp()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.http")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setHttp('http/app')\n")),(0,o.kt)("h4",{id:"pathconsole"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::console()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.console"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.console()) // /home/user/athenna-project/app/console\n")),(0,o.kt)("h4",{id:"pathsetconsole"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setConsole()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.console")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setConsole('console/app')\n")),(0,o.kt)("h4",{id:"pathservices"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::services()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.services"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.services()) // /home/user/athenna-project/app/services\n")),(0,o.kt)("h4",{id:"pathsetservices"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setServices()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.services")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setServices('services/app')\n")),(0,o.kt)("h4",{id:"pathrepositories"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::repositories()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.repositories"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.repositories()) // /home/user/athenna-project/app/repositories\n")),(0,o.kt)("h4",{id:"pathsetrepositories"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setRepositories()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.repositories")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setRepositories('repositories/app')\n")),(0,o.kt)("h4",{id:"pathcommands"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::commands()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.commands"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.commands()) // /home/user/athenna-project/app/console/commands\n")),(0,o.kt)("h4",{id:"pathsetcommands"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setCommands()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.commands")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setCommands('commands/app')\n")),(0,o.kt)("h4",{id:"pathcontrollers"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::controllers()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.controllers"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.controllers()) // /home/user/athenna-project/app/http/controllers\n")),(0,o.kt)("h4",{id:"pathsetcontrollers"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setControllers()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.controllers")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setControllers('controllers/app')\n")),(0,o.kt)("h4",{id:"pathexceptions"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::exceptions()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.exceptions"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.exceptions()) // /home/user/athenna-project/app/exceptions\n")),(0,o.kt)("h4",{id:"pathsetexceptions"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setExceptions()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.exceptions")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setExceptions('exceptions/app')\n")),(0,o.kt)("h4",{id:"pathmiddlewares"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::middlewares()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.middlewares"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.middlewares()) // /home/user/athenna-project/app/http/middlewares\n")),(0,o.kt)("h4",{id:"pathsetmiddlewares"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setMiddlewares()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.middlewares")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setMiddlewares('middlewares/app')\n")),(0,o.kt)("h4",{id:"pathinterceptors"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::interceptors()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.interceptors"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.interceptors()) // /home/user/athenna-project/app/http/interceptors\n")),(0,o.kt)("h4",{id:"pathsetinterceptors"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setInterceptors()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.interceptors")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setInterceptors('interceptors/app')\n")),(0,o.kt)("h4",{id:"pathterminators"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::terminators()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.terminators"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.terminators()) // /home/user/athenna-project/app/http/terminators\n")),(0,o.kt)("h4",{id:"pathsetterminators"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setTerminators()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.terminators")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setTerminators('terminators/app')\n")),(0,o.kt)("h4",{id:"pathmigrations"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::migrations()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.migrations"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.migrations()) // /home/user/athenna-project/database/migrations\n")),(0,o.kt)("h4",{id:"pathsetmigrations"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setMigrations()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.migrations")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setMigrations('migrations/app')\n")),(0,o.kt)("h4",{id:"pathseeders"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::seeders()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.seeders"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.seeders()) // /home/user/athenna-project/database/seeders\n")),(0,o.kt)("h4",{id:"pathsetseeders"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setSeeders()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.seeders")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setSeeders('seeders/app')\n")),(0,o.kt)("h4",{id:"pathnodemodulesbin"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::nodeModulesBin()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.nodeModulesBin"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.nodeModulesBin()) // /home/user/athenna-project/node_modules/.bin\n")),(0,o.kt)("h4",{id:"pathsetnodemodulesbin"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setNodeModulesBin()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.nodeModulesBin")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setNodeModulesBin('node_modules/.bin/app')\n")),(0,o.kt)("h4",{id:"pathvmtmp"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::vmTmp()")),(0,o.kt)("p",null,"Return the tmp path of your vm."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.vmTmp()) // /tmp\n")),(0,o.kt)("h4",{id:"pathvmhome"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::vmHome()")),(0,o.kt)("p",null,"Return the home path of your vm."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.vmHome()) // /home/user\n")),(0,o.kt)("h4",{id:"paththis"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::this()")),(0,o.kt)("p",null,"Return the execution path of where this method is being called:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/home/user/athenna-project/app/logPath.ts"',title:'"/home/user/athenna-project/app/logPath.ts"'},"import { Path } from '@athenna/common'\n\nexport function logPath() {\n  console.log(Path.this())\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/home/user/athenna-project/bootstrap/index.ts"',title:'"/home/user/athenna-project/bootstrap/index.ts"'},"import { logPath } from '#app/logPath'\n\nlogPath() // /home/user/athenna-project/app\n")),(0,o.kt)("h3",{id:"route"},"Route"),(0,o.kt)("h4",{id:"routegetquerystring"},(0,o.kt)("inlineCode",{parentName:"h4"},"Route::getQueryString()")),(0,o.kt)("p",null,"Get the query string in form data format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route } from '@athenna/common'\n\nconst url = 'http://localhost:3000/user?name=Jo\xe3o%20Lenon&age=21'\nconst queryString = Route.getQueryString(url) // name=Jo\xe3o%20Lenon&age=21\n")),(0,o.kt)("h4",{id:"routeremovequeryparams"},(0,o.kt)("inlineCode",{parentName:"h4"},"Route::removeQueryParams()")),(0,o.kt)("p",null,"Remove the query params from the url:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route } from '@athenna/common'\n\nconst url = 'http://localhost:3000/user?name=Jo\xe3o%20Lenon&age=21'\nconst urlWithoutQueryParams = Route.removeQueryParams(url)\n// http://localhost:3000/user\n")),(0,o.kt)("h4",{id:"routegetqueryparamsvalue"},(0,o.kt)("inlineCode",{parentName:"h4"},"Route::getQueryParamsValue()")),(0,o.kt)("p",null,"Get object with ",(0,o.kt)("strong",{parentName:"p"},"?&queryParams")," values from route:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route } from '@athenna/common'\n\nconst url = 'http://localhost:3000/user?name=Jo\xe3o%20Lenon&age=21'\nconst queryParams = Route.getQueryParamsValue(url)\n// { name: 'Jo\xe3o Lenon', age: '21' }\n")),(0,o.kt)("h4",{id:"routegetqueryparamsname"},(0,o.kt)("inlineCode",{parentName:"h4"},"Route::getQueryParamsName()")),(0,o.kt)("p",null,"Get an array with ",(0,o.kt)("strong",{parentName:"p"},"?&queryParams")," names from route:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route } from '@athenna/common'\n\nconst url = 'http://localhost:3000/user?name=Jo\xe3o%20Lenon&age=21'\nconst queryParams = Route.getQueryParamsName(url)\n// ['name', 'age']\n")),(0,o.kt)("h4",{id:"routegetparamsvalue"},(0,o.kt)("inlineCode",{parentName:"h4"},"Route::getParamsValue()")),(0,o.kt)("p",null,"Get object with ",(0,o.kt)("strong",{parentName:"p"},"/:params")," values from route:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route } from '@athenna/common'\n\nconst urlWithParams = 'http://localhost:3000/user/:id'\nconst urlWithValues = 'http://localhost:3000/user/1'\n\nconst params = Route.getParamsValue(urlWithParams, urlWithValues)\n// { id: '1' }\n")),(0,o.kt)("h4",{id:"routegetparamsname"},(0,o.kt)("inlineCode",{parentName:"h4"},"Route::getParamsName()")),(0,o.kt)("p",null,"Get an array with ",(0,o.kt)("strong",{parentName:"p"},"/:params")," names from route:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route } from '@athenna/common'\n\nconst url = 'http://localhost:3000/user/:id'\n\nconst params = Route.getParamsName(url)\n// ['id']\n")),(0,o.kt)("h4",{id:"routecreatematcher"},(0,o.kt)("inlineCode",{parentName:"h4"},"Route::createMatcher()")),(0,o.kt)("p",null,"Create a RegExp matcher for a route:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route } from '@athenna/common'\n\nconst urlParams = 'http://localhost:3000/user/:id'\nconst urlValues = 'http://localhost:3000/user/1'\nconst regexp = Route.createMatcher(url)\n\nif (regexp.test(urlValues)) {\n  // routes matches, do something...\n}\n")),(0,o.kt)("h3",{id:"string"},"String"),(0,o.kt)("h4",{id:"stringgeneraterandom"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::generateRandom()")),(0,o.kt)("p",null,"Generate a random string with a determined length:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.generateRandom(10)\n")),(0,o.kt)("h4",{id:"stringtocamelcase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toCamelCase()")),(0,o.kt)("p",null,"Transforms the string to ",(0,o.kt)("strong",{parentName:"p"},"camelCase"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toCamelCase('Hello World')\n// helloWorld\n")),(0,o.kt)("h4",{id:"stringtosnakecase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toSnakeCase()")),(0,o.kt)("p",null,"Transforms the string to ",(0,o.kt)("strong",{parentName:"p"},"snake_case"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toSnakeCase('helloWorld')\n// hello_world\n")),(0,o.kt)("h4",{id:"stringtoconstantcase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toConstantCase()")),(0,o.kt)("p",null,"Transforms the string to ",(0,o.kt)("strong",{parentName:"p"},"CONSTANT_CASE"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toConstantCase('hello_world')\n// HELLO_WORLD\n")),(0,o.kt)("h4",{id:"stringtopascalcase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toPascalCase()")),(0,o.kt)("p",null,"Transforms the string to ",(0,o.kt)("strong",{parentName:"p"},"PascalCase"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toPascalCase('HELLO_WORLD')\n// HelloWorld\n")),(0,o.kt)("h4",{id:"stringtosentencecase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toSentenceCase()")),(0,o.kt)("p",null,"Transforms the string to ",(0,o.kt)("strong",{parentName:"p"},"Sentence Case"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toSentenceCase('HelloWorld')\n// Hello World\n")),(0,o.kt)("h4",{id:"stringtodotcase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toDotCase()")),(0,o.kt)("p",null,"Transforms the string to ",(0,o.kt)("strong",{parentName:"p"},"dot.case"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toDotCase('Hello World')\n// hello.world\n")),(0,o.kt)("h4",{id:"stringtodashcase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toDashCase()")),(0,o.kt)("p",null,"Transforms the string to ",(0,o.kt)("strong",{parentName:"p"},"dash-case"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toDashCase('hello.world')\n// hello-world\n")),(0,o.kt)("h4",{id:"stringtonocase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toNoCase()")),(0,o.kt)("p",null,"Removes all sorted cases from string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toNoCase('Hello-World')\n// hello world\n")),(0,o.kt)("h4",{id:"stringpluralize"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::pluralize()")),(0,o.kt)("p",null,"Transforms the string to plural form:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.pluralize('cat') // cats\n")),(0,o.kt)("h4",{id:"stringsingularize"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::singularize()")),(0,o.kt)("p",null,"Transforms the string to singular form:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.singularize('cats') // cat\n")),(0,o.kt)("h4",{id:"stringordinalize"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::ordinalize()")),(0,o.kt)("p",null,"Transforms a number to your ordinal format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.ordinalize('10') // 10th\n")),(0,o.kt)("h4",{id:"stringgeneraterandomcolor"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::generateRandomColor()")),(0,o.kt)("p",null,"Generate a random color in hexadecimal format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst color = String.generateRandomColor()\n// #a0eebc\n")),(0,o.kt)("h4",{id:"stringnormalizebase64"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::normalizeBase64()")),(0,o.kt)("p",null,"Normalizes the string in base64 format removing\nspecial characters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst base64 = String.normalizeBase64('+++///===')\n// '---___'\n")),(0,o.kt)("h3",{id:"uuid"},"Uuid"),(0,o.kt)("h4",{id:"uuidgenerate"},(0,o.kt)("inlineCode",{parentName:"h4"},"Uuid::generate()")),(0,o.kt)("p",null,"Generate a UUID v4:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Uuid } from '@athenna/common'\n\nconst uuid = Uuid.generate()\n// a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n")),(0,o.kt)("p",null,"You can also generate an UUID with a prefixed string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const prefixedUuid = Uuid.generate('adm')\n// adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n")),(0,o.kt)("h4",{id:"uuidverify"},(0,o.kt)("inlineCode",{parentName:"h4"},"Uuid::verify()")),(0,o.kt)("p",null,"Verify if a string is a valid UUID v4:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Uuid } from '@athenna/common'\n\nif (Uuid.verify('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11')) {\n  // do something\n}\n")),(0,o.kt)("p",null,"You can also verify if a string is a valid UUID and if\nthe prefix matches:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const prefixedUuid = 'adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'\n\n// Verify if the string is a valid UUID and the prefix \n// is equals to adm\nif (Uuid.verify(prefixedUuid, { prefix: 'adm' })) {\n  // do something\n}\n")),(0,o.kt)("p",null,"By default, the ",(0,o.kt)("inlineCode",{parentName:"p"},"verify()")," method will ignore the prefix to verify\nif the string is a valid UUID, to avoid this set the ",(0,o.kt)("inlineCode",{parentName:"p"},"ignorePrefix"),"\noption as ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const prefixedUuid = 'adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'\n\nif (Uuid.verify(prefixedUuid, { ignorePrefix: false })) {\n  // will never enter here with the example above, \n  // only with plain UUID's.\n}\n")),(0,o.kt)("h4",{id:"uuidgettoken"},(0,o.kt)("inlineCode",{parentName:"h4"},"Uuid::getToken()")),(0,o.kt)("p",null,"Get the UUID token without the prefix:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Uuid } from '@athenna/common'\n\nconst prefixedUuid = 'adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'\nconst uuid = Uuid.getToken(prefixedUuid)\n// a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n")),(0,o.kt)("h4",{id:"uuidgetprefix"},(0,o.kt)("inlineCode",{parentName:"h4"},"Uuid::getPrefix()")),(0,o.kt)("p",null,"Get the prefix without the UUID token:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Uuid } from '@athenna/common'\n\nconst prefixedUuid = 'adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'\nconst prefix = Uuid.getPrefix(prefixedUuid) // adm\n")),(0,o.kt)("h4",{id:"uuidinjectprefix"},(0,o.kt)("inlineCode",{parentName:"h4"},"Uuid::injectPrefix()")),(0,o.kt)("p",null,"Inject a prefix in the UUID token, if the UUID token is not\nvalid, this method will throw:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Uuid } from '@athenna/common'\n\nconst uuid = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'\nconst prefixedUuid = Uuid.injectPrefix(uuid, 'adm')\n// adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n")),(0,o.kt)("h4",{id:"uuidchangeprefix"},(0,o.kt)("inlineCode",{parentName:"h4"},"Uuid::changePrefix()")),(0,o.kt)("p",null,"Change the prefix of an UUID token, if the UUID token is not\nvalid, this function will throw:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Uuid } from '@athenna/common'\n\nconst uuid = 'adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'\nconst prefixedUuid = Uuid.changePrefix(uuid, 'mng')\n// mng::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n")),(0,o.kt)("h4",{id:"uuidchangeorgenerate"},(0,o.kt)("inlineCode",{parentName:"h4"},"Uuid::changeOrGenerate()")),(0,o.kt)("p",null,"Change the prefix of an UUID token, or generate the token\nif the UUID token is ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Uuid } from '@athenna/common'\n\nconst uuid = undefined\nconst prefixedUuid = Uuid.changeOrGenerate('adm', uuid)\n// adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n\nconst changedPrefixUuid = Uuid.changeOrGenerate('mng', prefixedUuid)\n// mng::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n")))}m.isMDXComponent=!0}}]);