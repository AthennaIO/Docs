"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[2419],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,l=function(e,t){if(null==e)return{};var n,o,l={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var d=o.createContext({}),s=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(d.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,d=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),p=s(n),f=l,h=p["".concat(d,".").concat(f)]||p[f]||m[f]||a;return n?o.createElement(h,i(i({ref:t},c),{},{components:n})):o.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=f;var r={};for(var d in t)hasOwnProperty.call(t,d)&&(r[d]=t[d]);r.originalType=e,r[p]="string"==typeof e?e:l,i[1]=r;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4932:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>s});var o=n(7462),l=(n(7294),n(3905));const a={title:"Helpers",sidebar_position:3,description:"Understand how to use all the Athenna Helpers from @athenna/common and other packages.",tags:["The Basics","Helpers"]},i="Helpers",r={unversionedId:"the-basics/helpers",id:"the-basics/helpers",title:"Helpers",description:"Understand how to use all the Athenna Helpers from @athenna/common and other packages.",source:"@site/docs/the-basics/helpers.mdx",sourceDirName:"the-basics",slug:"/the-basics/helpers",permalink:"/docs/the-basics/helpers",draft:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/the-basics/helpers.mdx",tags:[{label:"The Basics",permalink:"/docs/tags/the-basics"},{label:"Helpers",permalink:"/docs/tags/helpers"}],version:"current",sidebarPosition:3,frontMatter:{title:"Helpers",sidebar_position:3,description:"Understand how to use all the Athenna Helpers from @athenna/common and other packages.",tags:["The Basics","Helpers"]},sidebar:"tutorialSidebar",previous:{title:"Views",permalink:"/docs/the-basics/views"},next:{title:"Digging Deeper",permalink:"/docs/digging-deeper"}},d={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Available helpers",id:"available-helpers",level:2},{value:"<code>Clean</code>",id:"clean",level:3},{value:"<code>Color</code>",id:"color",level:3},{value:"<code>Exec</code>",id:"exec",level:3},{value:"<code>FakeApi</code>",id:"fakeapi",level:3},{value:"<code>File</code>",id:"file",level:3},{value:"<code>File.load()</code> &amp; <code>File.loadSync()</code>",id:"fileload--fileloadsync",level:4},{value:"<code>File.copy()</code> &amp; <code>File.copySync()</code>",id:"filecopy--filecopysync",level:4},{value:"<code>File.move()</code> &amp; <code>File.moveSync()</code>",id:"filemove--filemovesync",level:4},{value:"<code>File.remove()</code> &amp; <code>File.removeSync()</code>",id:"fileremove--fileremovesync",level:4},{value:"<code>File.setContent()</code> &amp; <code>File.setContentSync()</code>",id:"filesetcontent--filesetcontentsync",level:4},{value:"<code>File.getContent()</code> &amp; <code>File.getContentSync()</code>",id:"filegetcontent--filegetcontentsync",level:4},{value:"<code>File.getContentAsString()</code> &amp; <code>File.getContentAsStringSync()</code>",id:"filegetcontentasstring--filegetcontentasstringsync",level:4},{value:"<code>File.getContentAsJson()</code> &amp; <code>File.getContentAsJsonSync()</code>",id:"filegetcontentasjson--filegetcontentasjsonsync",level:4},{value:"<code>File.getContentAsBuilder()</code> &amp; <code>File.getContentAsBuilderSync()</code>",id:"filegetcontentasbuilder--filegetcontentasbuildersync",level:4},{value:"<code>File.append()</code> &amp; <code>File.appendSync()</code>",id:"fileappend--fileappendsync",level:4},{value:"<code>File.prepend()</code> &amp; <code>File.prependSync()</code>",id:"fileprepend--fileprependsync",level:4},{value:"<code>File.createReadStream()</code>",id:"filecreatereadstream",level:4},{value:"<code>File.createWriteStream()</code>",id:"filecreatewritestream",level:4},{value:"<code>File.toJSON()</code>",id:"filetojson",level:4},{value:"<code>File.import()</code>",id:"fileimport",level:4},{value:"<code>File.safeImport()</code>",id:"filesafeimport",level:4},{value:"<code>File::safeRemove()</code>",id:"filesaferemove",level:4},{value:"<code>File::exists()</code> &amp; <code>File::existsSync()</code>",id:"fileexists--fileexistssync",level:4},{value:"<code>File::isFile()</code> &amp; <code>File::isFileSync()</code>",id:"fileisfile--fileisfilesync",level:4},{value:"<code>File::createFileOfSize()</code>",id:"filecreatefileofsize",level:4},{value:"<code>Folder</code>",id:"folder",level:3},{value:"<code>Folder.load()</code> &amp; <code>Folder.loadSync()</code>",id:"folderload--folderloadsync",level:4},{value:"<code>Folder.copy()</code> &amp; <code>Folder.copySync()</code>",id:"foldercopy--foldercopysync",level:4},{value:"<code>Folder.move()</code> &amp; <code>Folder.moveSync()</code>",id:"foldermove--foldermovesync",level:4},{value:"<code>Folder.remove()</code> &amp; <code>Folder.removeSync()</code>",id:"folderremove--folderremovesync",level:4},{value:"<code>Folder.toJSON()</code>",id:"foldertojson",level:4},{value:"<code>Folder.getFilesByPattern()</code>",id:"foldergetfilesbypattern",level:4},{value:"<code>Folder.getFoldersByPattern()</code>",id:"foldergetfoldersbypattern",level:4},{value:"<code>Folder::safeRemove()</code>",id:"foldersaferemove",level:4},{value:"<code>Folder::exists()</code> &amp; <code>Folder::existsSync()</code>",id:"folderexists--folderexistssync",level:4},{value:"<code>Folder::isFolder()</code> &amp; <code>Folder::isFolderSync()</code>",id:"folderisfolder--folderisfoldersync",level:4},{value:"<code>Folder::size()</code> &amp; <code>Folder::sizeSync()</code>",id:"foldersize--foldersizesync",level:4}],c={toc:s},p="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(p,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"helpers"},"Helpers"),(0,l.kt)("p",null,"Understand how to use all the Athenna Helpers from @athenna/common and other packages."),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,'Athenna includes a variety of "helpers" classes inside\nthe ',(0,l.kt)("inlineCode",{parentName:"p"},"@athenna/common")," package that comes by default\ninstalled in your application. Many of these classes are\nused by the framework itself; however, you are free to use\nthem in your own applications if you find them convenient."),(0,l.kt)("h2",{id:"available-helpers"},"Available helpers"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#clean"},(0,l.kt)("inlineCode",{parentName:"a"},"Clean"))," - Remove falsy values\nfrom different data structures."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#color"},(0,l.kt)("inlineCode",{parentName:"a"},"Color"))," - The UI Kit of Athenna\ncommand line applications."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#exec"},(0,l.kt)("inlineCode",{parentName:"a"},"Exec"))," - Simple helpers that executes\nsome operation, like executing a command in a child process."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#fakeapi"},(0,l.kt)("inlineCode",{parentName:"a"},"FakeApi"))," - Create a fake REST API\nusing ",(0,l.kt)("inlineCode",{parentName:"li"},"json")," files to map the routes and their returns (similiar to ",(0,l.kt)("a",{parentName:"li",href:"https://wiremock.org/"},"WireMock"),")."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#file"},(0,l.kt)("inlineCode",{parentName:"a"},"File"))," - Create, copy, move,\ndelete and get information about files."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#folder"},(0,l.kt)("inlineCode",{parentName:"a"},"Folder"))," - Create, copy, move,\ndelete and get information about folders.")),(0,l.kt)("h3",{id:"clean"},(0,l.kt)("inlineCode",{parentName:"h3"},"Clean")),(0,l.kt)("p",null,"Coming soon"),(0,l.kt)("h3",{id:"color"},(0,l.kt)("inlineCode",{parentName:"h3"},"Color")),(0,l.kt)("p",null,"Coming soon"),(0,l.kt)("h3",{id:"exec"},(0,l.kt)("inlineCode",{parentName:"h3"},"Exec")),(0,l.kt)("p",null,"Coming soon"),(0,l.kt)("h3",{id:"fakeapi"},(0,l.kt)("inlineCode",{parentName:"h3"},"FakeApi")),(0,l.kt)("p",null,"Coming soon"),(0,l.kt)("h3",{id:"file"},(0,l.kt)("inlineCode",{parentName:"h3"},"File")),(0,l.kt)("h4",{id:"fileload--fileloadsync"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.load()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"File.loadSync()")),(0,l.kt)("p",null,"Creates the file is does not exist and also load the file information:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst existent = new File(Path.storage('existent.txt'))\nconst nonExistent = new File('./nonExistent.txt', 'File content')\n\n// Load the file info and content.\nawait existent.load({ withContent: true })  \ud83d\udc48\n\n// Create and load the file info without the \n// content (be careful when loading big files).\nnonExistent.loadSync() \ud83d\udc48\n")),(0,l.kt)("p",null,"After loading process, the file will contain new informations:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"createdAt - The date when the file was created."),(0,l.kt)("li",{parentName:"ul"},"accessedAt - The date when the file was last accessed."),(0,l.kt)("li",{parentName:"ul"},"modifiedAt - The date when the file was last modified."),(0,l.kt)("li",{parentName:"ul"},"fileSize - The size of the file in MB."),(0,l.kt)("li",{parentName:"ul"},"content - The content of the file as ",(0,l.kt)("inlineCode",{parentName:"li"},"Buffer")," if ",(0,l.kt)("inlineCode",{parentName:"li"},"withContent")," was ",(0,l.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,l.kt)("h4",{id:"filecopy--filecopysync"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.copy()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"File.copySync()")),(0,l.kt)("p",null,"Create a copy of the file in other location or with other name:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst copiedFile = file.copySync('./copy-of-file.txt')\nconst copiedFile = await file.copy(Path.storage('copy-of-file.txt'))\n")),(0,l.kt)("p",null,"To copy the file and load the content of the copy set the ",(0,l.kt)("inlineCode",{parentName:"p"},"withContent"),"\nas ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst copiedFile = await file.copy(Path.storage('copy-of-file.txt'), {\n  withContent: true \ud83d\udc48\n})\n")),(0,l.kt)("p",null,"When copying the file you can set the ",(0,l.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to create\na file with fake name:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst copiedFile = await file.copy(Path.storage('copy-of-file.txt'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,l.kt)("h4",{id:"filemove--filemovesync"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.move()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"File.moveSync()")),(0,l.kt)("p",null,"Move the file to other location:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst movedFile = file.moveSync('./move-of-file.txt')               \ud83d\udc48\nconst movedFile = await file.move(Path.storage('move-of-file.txt')) \ud83d\udc48\n")),(0,l.kt)("p",null,"To move the file and load the content of the move set the ",(0,l.kt)("inlineCode",{parentName:"p"},"withContent"),"\nas ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst movedFile = await file.move(Path.storage('move-of-file.txt'), {\n  withContent: true \ud83d\udc48\n})\n")),(0,l.kt)("p",null,"When moving the file you can set the ",(0,l.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to create\na file with fake name:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst movedFile = await file.move(Path.storage('file-path.txt'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,l.kt)("h4",{id:"fileremove--fileremovesync"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.remove()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"File.removeSync()")),(0,l.kt)("p",null,"Delete a file from the file system:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nfile.removeSync()   \ud83d\udc48\nawait file.remove() \ud83d\udc48\n")),(0,l.kt)("h4",{id:"filesetcontent--filesetcontentsync"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.setContent()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"File.setContentSync()")),(0,l.kt)("p",null,"Set the content of a file overwriting the existing content:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', 'Hello')\n\nfile.setContentSync('Hello World!')   \ud83d\udc48\nawait file.setContent('Hello World!') \ud83d\udc48\n")),(0,l.kt)("h4",{id:"filegetcontent--filegetcontentsync"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.getContent()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"File.getContentSync()")),(0,l.kt)("p",null,"Get the content of a file as ",(0,l.kt)("inlineCode",{parentName:"p"},"Buffer"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentBuffer = file.getContentSync()   \ud83d\udc48\nconst contentBuffer = await file.getContent() \ud83d\udc48\n")),(0,l.kt)("p",null,"To save the content of the file in the instance set the ",(0,l.kt)("inlineCode",{parentName:"p"},"saveContent")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst content = await file.getContent({ saveContent: true }) \ud83d\udc48\n")),(0,l.kt)("h4",{id:"filegetcontentasstring--filegetcontentasstringsync"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.getContentAsString()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"File.getContentAsStringSync()")),(0,l.kt)("p",null,"Same behavior of ",(0,l.kt)("inlineCode",{parentName:"p"},"getContent()"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"getContentSync()"),", but return the content\nas ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentString = file.getContentAsStringSync()   \ud83d\udc48\nconst contentString = await file.getContentAsString() \ud83d\udc48\n")),(0,l.kt)("h4",{id:"filegetcontentasjson--filegetcontentasjsonsync"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.getContentAsJson()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"File.getContentAsJsonSync()")),(0,l.kt)("p",null,"Same behavior of ",(0,l.kt)("inlineCode",{parentName:"p"},"getContent()"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"getContentSync()"),", but return the content as\n",(0,l.kt)("inlineCode",{parentName:"p"},"object")," if the content is a valid JSON string:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentJSON = file.getContentAsJsonSync()   \ud83d\udc48\nconst contentJSON = await file.getContentAsJson() \ud83d\udc48\n")),(0,l.kt)("h4",{id:"filegetcontentasbuilder--filegetcontentasbuildersync"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.getContentAsBuilder()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"File.getContentAsBuilderSync()")),(0,l.kt)("p",null,"Same behavior of ",(0,l.kt)("inlineCode",{parentName:"p"},"getContent()"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"getContentSync()"),", but return the content as\nan ",(0,l.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#object-builder"},(0,l.kt)("inlineCode",{parentName:"a"},"ObjectBuilder"))," instance if the\ncontent is a valid JSON string:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentObjectBuilder = file.getContentAsBuilderSync()   \ud83d\udc48\nconst contentObjectBuilder = await file.getContentAsBuilder() \ud83d\udc48\n")),(0,l.kt)("h4",{id:"fileappend--fileappendsync"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.append()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"File.appendSync()")),(0,l.kt)("p",null,"Add content to the end of the file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', 'Hello')\n\nfile.appendSync(' World') \ud83d\udc48\nawait file.append('!\\n')  \ud83d\udc48\n")),(0,l.kt)("h4",{id:"fileprepend--fileprependsync"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.prepend()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"File.prependSync()")),(0,l.kt)("p",null,"Add content to the top of the file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', 'World')\n\nfile.prependSync('ello ') \ud83d\udc48\nawait file.prepend('H')   \ud83d\udc48\n")),(0,l.kt)("h4",{id:"filecreatereadstream"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.createReadStream()")),(0,l.kt)("p",null,"Create a ",(0,l.kt)("a",{parentName:"p",href:"https://nodejs.org/api/stream.html#readable-streams"},"readable stream"),"\ninstance of the file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const stream = file.createReadStream()\n")),(0,l.kt)("h4",{id:"filecreatewritestream"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.createWriteStream()")),(0,l.kt)("p",null,"Create a ",(0,l.kt)("a",{parentName:"p",href:"https://nodejs.org/api/stream.html#writable-streams"},"writable stream"),"\ninstance of the file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const stream = file.createWriteStream()\n")),(0,l.kt)("h4",{id:"filetojson"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.toJSON()")),(0,l.kt)("p",null,"Get the informations of the file as JSON:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const infos = file.toJSON() \ud83d\udc48\n")),(0,l.kt)("h4",{id:"fileimport"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.import()")),(0,l.kt)("p",null,"Import the file path if is a valid module:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.js', \"console.log('hello')\")\n\nconst module = await file.import() \ud83d\udc48\n")),(0,l.kt)("h4",{id:"filesafeimport"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.safeImport()")),(0,l.kt)("p",null,"Same as ",(0,l.kt)("inlineCode",{parentName:"p"},"import()")," method, but if the file is not a valid module the exception\nwill be ignored:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', \"console.log('hello')\")\n\nconst module = await file.safeImport() \ud83d\udc48\n")),(0,l.kt)("p",null,"Importing files that got any errors like syntax errors will also not throw:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.js', \"console.log('hello\")\n\nconst module = await file.safeImport() \ud83d\udc48 // Nothing happens\n")),(0,l.kt)("h4",{id:"filesaferemove"},(0,l.kt)("inlineCode",{parentName:"h4"},"File::safeRemove()")),(0,l.kt)("p",null,"Call for a delete operation without worrying about exceptions because the file\ndoes not exist:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nawait File.safeRemove(Path.storage('file.txt'))      \ud83d\udc48\nawait File.safeRemove(Path.storage('not-found.txt')) \ud83d\udc48 // Will not throw\n")),(0,l.kt)("h4",{id:"fileexists--fileexistssync"},(0,l.kt)("inlineCode",{parentName:"h4"},"File::exists()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"File::existsSync()")),(0,l.kt)("p",null,"Verify if a file exists or not:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"if (File.existsSync('package.json')) {\n  // do something\n}\n\nif (await File.exists('package.json')) {\n  // do something\n}\n")),(0,l.kt)("h4",{id:"fileisfile--fileisfilesync"},(0,l.kt)("inlineCode",{parentName:"h4"},"File::isFile()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"File::isFileSync()")),(0,l.kt)("p",null,"Verify if a file is a valid file or not:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"if (File.isFileSync('package.json')) {\n  // do something\n}\n\nif (await File.isFile('package.json')) {\n  // do something\n}\n")),(0,l.kt)("h4",{id:"filecreatefileofsize"},(0,l.kt)("inlineCode",{parentName:"h4"},"File::createFileOfSize()")),(0,l.kt)("p",null,"Create a fake file with determined size for testing purposes:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const file = await File.createFileOfSize('fake.js', 1024 * 1024 * 100) \ud83d\udc48\n")),(0,l.kt)("h3",{id:"folder"},(0,l.kt)("inlineCode",{parentName:"h3"},"Folder")),(0,l.kt)("h4",{id:"folderload--folderloadsync"},(0,l.kt)("inlineCode",{parentName:"h4"},"Folder.load()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"Folder.loadSync()")),(0,l.kt)("p",null,"Creates the folder if it does not exist and also load the folder information:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst existent = new Folder(Path.storage('existent'))\nconst nonExistent = new Folder('./nonExistent')\n\n// Load the folder info with sub folders and with file contents.\nawait existent.load({ withSub: true, withContent: true })  \ud83d\udc48\n\n// Create and load the folder info without the \n// content (be careful when loading big files).\nnonExistent.loadSync() \ud83d\udc48\n")),(0,l.kt)("p",null,"After loading process, the folder will contain new informations:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"createdAt - The date when the folder was created."),(0,l.kt)("li",{parentName:"ul"},"accessedAt - The date when the folder was last accessed."),(0,l.kt)("li",{parentName:"ul"},"modifiedAt - The date when the folder was last modified."),(0,l.kt)("li",{parentName:"ul"},"folderSize - The size of the folder in MB.")),(0,l.kt)("h4",{id:"foldercopy--foldercopysync"},(0,l.kt)("inlineCode",{parentName:"h4"},"Folder.copy()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"Folder.copySync()")),(0,l.kt)("p",null,"Create a copy of the folder in other location or with other name:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst copiedFolder = folder.copySync('./copy-of-folder')\nconst copiedFolder = await folder.copy(Path.storage('copy-of-folder'))\n")),(0,l.kt)("p",null,"To copy the folder and load the sub folders and the content of the\ncopy set the ",(0,l.kt)("inlineCode",{parentName:"p"},"withSub")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"withContent")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst copiedFolder = await folder.copy(Path.storage('copy-of-folder'), {\n  withSub: true,    \ud83d\udc48\n  withContent: true \ud83d\udc48\n})\n")),(0,l.kt)("p",null,"When copying the folder you can set the ",(0,l.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to copy the\nfiles with fake names:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst copiedFolder = await folder.copy(Path.storage('copy-of-file'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,l.kt)("h4",{id:"foldermove--foldermovesync"},(0,l.kt)("inlineCode",{parentName:"h4"},"Folder.move()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"Folder.moveSync()")),(0,l.kt)("p",null,"Move the folder to other location:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst movedFolder = folder.moveSync('./move-of-folder')               \ud83d\udc48\nconst movedFolder = await folder.move(Path.storage('move-of-folder')) \ud83d\udc48\n")),(0,l.kt)("p",null,"To move the folder and load the sub folders and the content of the\nmove set the ",(0,l.kt)("inlineCode",{parentName:"p"},"withSub")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"withContent")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst movedFolder = await folder.move(Path.storage('move-of-folder'), {\n  withSub: true,    \ud83d\udc48\n  withContent: true \ud83d\udc48\n})\n")),(0,l.kt)("p",null,"When moving the folder you can set the ",(0,l.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to move the\nfiles with fake names:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst movedFolder = await folder.move(Path.storage('file-path'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,l.kt)("h4",{id:"folderremove--folderremovesync"},(0,l.kt)("inlineCode",{parentName:"h4"},"Folder.remove()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"Folder.removeSync()")),(0,l.kt)("p",null,"Delete a folder from the folder system:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nfolder.removeSync()   \ud83d\udc48\nawait folder.remove() \ud83d\udc48\n")),(0,l.kt)("h4",{id:"foldertojson"},(0,l.kt)("inlineCode",{parentName:"h4"},"Folder.toJSON()")),(0,l.kt)("p",null,"Get the informations of the folder as JSON:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const infos = folder.toJSON() \ud83d\udc48\n")),(0,l.kt)("h4",{id:"foldergetfilesbypattern"},(0,l.kt)("inlineCode",{parentName:"h4"},"Folder.getFilesByPattern()")),(0,l.kt)("p",null,"Get all the files of a folder using a glob pattern:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const files = folder.getFilesByPattern('**/*.js') \ud83d\udc48\n")),(0,l.kt)("h4",{id:"foldergetfoldersbypattern"},(0,l.kt)("inlineCode",{parentName:"h4"},"Folder.getFoldersByPattern()")),(0,l.kt)("p",null,"Get all the folders of a folder using a glob pattern:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const folders = folder.getFoldersByPattern('**/*') \ud83d\udc48\n")),(0,l.kt)("h4",{id:"foldersaferemove"},(0,l.kt)("inlineCode",{parentName:"h4"},"Folder::safeRemove()")),(0,l.kt)("p",null,"Call for a delete operation without worrying about exceptions because the folder\ndoes not exist:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nawait Folder.safeRemove(Path.storage('folder'))    \ud83d\udc48\nawait Folder.safeRemove(Path.storage('not-found')) \ud83d\udc48 // Will not throw\n")),(0,l.kt)("h4",{id:"folderexists--folderexistssync"},(0,l.kt)("inlineCode",{parentName:"h4"},"Folder::exists()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"Folder::existsSync()")),(0,l.kt)("p",null,"Verify if a folder exists or not:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"if (Folder.existsSync('app')) {\n  // do something\n}\n\nif (await Folder.exists('app')) {\n  // do something\n}\n")),(0,l.kt)("h4",{id:"folderisfolder--folderisfoldersync"},(0,l.kt)("inlineCode",{parentName:"h4"},"Folder::isFolder()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"Folder::isFolderSync()")),(0,l.kt)("p",null,"Verify if a folder is a valid folder or not:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"if (Folder.isFolderSync('app')) {\n  // do something\n}\n\nif (await Folder.isFolder('app')) {\n  // do something\n}\n")),(0,l.kt)("h4",{id:"foldersize--foldersizesync"},(0,l.kt)("inlineCode",{parentName:"h4"},"Folder::size()")," & ",(0,l.kt)("inlineCode",{parentName:"h4"},"Folder::sizeSync()")),(0,l.kt)("p",null,"Get the size of the folder in MB:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"if (Folder.sizeSync('app') === 100) {\n  // do something\n}\n\nif (await Folder.size('app')  === 100) {\n  // do something\n}\n")))}m.isMDXComponent=!0}}]);