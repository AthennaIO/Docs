"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[8692],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(n),u=i,h=m["".concat(l,".").concat(u)]||m[u]||c[u]||r;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var d=2;d<r;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5033:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return p}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),s=["components"],o={sidebar_position:1,id:"getting-started",title:"Getting Started",hide_title:!0,hide_table_of_contents:!0,tags:["Testing"]},l=void 0,d={unversionedId:"testing/getting-started",id:"testing/getting-started",title:"Getting Started",description:"\ud83c\udfe0",source:"@site/docs/testing/testingg.mdx",sourceDirName:"testing",slug:"/testing/getting-started",permalink:"/docs/testing/getting-started",editUrl:"https://github.com/AthennaIO/Docs/docs/testing/testingg.mdx",tags:[{label:"Testing",permalink:"/docs/tags/testing"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"getting-started",title:"Getting Started",hide_title:!0,hide_table_of_contents:!0,tags:["Testing"]},sidebar:"tutorialSidebar",previous:{title:"Extending Models",permalink:"/docs/orm/extending-models"},next:{title:"HTTP Tests",permalink:"/docs/testing/http-tests"}},p=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Environment",id:"id-environment",children:[],level:2},{value:"Creating tests",id:"id-creating-tests",children:[],level:2},{value:"Running tests",id:"id-running-tests",children:[{value:"Reporting tests coverage",id:"id-reporting-tests-coverage",children:[],level:3}],level:2}],c={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("nav",{"aria-label":"breadcrumbs"},(0,r.kt)("ul",{class:"breadcrumbs"},(0,r.kt)("li",{class:"breadcrumbs__item"},(0,r.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,r.kt)("li",{class:"breadcrumbs__item"},(0,r.kt)("a",{class:"breadcrumbs__link"},"Testing")),(0,r.kt)("li",{class:"breadcrumbs__item"},(0,r.kt)("a",{class:"breadcrumbs__link",href:"/docs/testing/getting-started"},"Testing: Getting Started")))),(0,r.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,r.kt)("h1",{id:"testing-getting-started"},"Testing: Getting Started"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"introduction"},(0,r.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"environment"},(0,r.kt)("a",{parentName:"h4",href:"#id-environment"},"Environment"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"creating-tests"},(0,r.kt)("a",{parentName:"h4",href:"#id-creating-tests"},"Creating tests"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"running-tests"},(0,r.kt)("a",{parentName:"h4",href:"#id-running-tests"},"Running tests")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"reporting-tests-coverage"},(0,r.kt)("a",{parentName:"h4",href:"#id-reporting-tests-coverage"},"Reporting tests coverage")))))),(0,r.kt)("h2",{id:"id-introduction"},"Introduction"),(0,r.kt)("p",null,"Athenna is built with testing in mind. In fact, support for testing with ",(0,r.kt)("a",{parentName:"p",href:"https://japa.dev/"},(0,r.kt)("inlineCode",{parentName:"a"},"Japa"))," is included out of the box and a ",(0,r.kt)("inlineCode",{parentName:"p"},"main.js"),"\nfile is already set up for your application. The framework also ships with convenient helper methods that allow you to\nexpressively test your applications."),(0,r.kt)("p",null,"By default, your application's ",(0,r.kt)("inlineCode",{parentName:"p"},"tests")," directory contains two directories: ",(0,r.kt)("inlineCode",{parentName:"p"},"E2E")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Unit"),'. Unit tests are tests that\nfocus on a very small, isolated portion of your code. In fact, most unit tests probably focus on a single method. Tests\nwithin your "Unit" test directory do not boot your Athenna application and therefore are unable to access your application\'s\ndatabase or other framework services.'),(0,r.kt)("p",null,"E2E tests may test a larger portion of your code, including how several objects interact with each other or even a full\nHTTP request to a JSON endpoint. Generally, most of your tests should be feature tests. These types of tests provide the\nmost confidence that your system as a whole is functioning as intended."),(0,r.kt)("p",null,"When you scaffold a new Athenna project it will come with two tests implemented. One is inside E2E folder, the ",(0,r.kt)("inlineCode",{parentName:"p"},"WelcomeTest.js")," file.\nAnd the other is the ",(0,r.kt)("inlineCode",{parentName:"p"},"WelcomeServiceTest.js")," file that is inside Unit folder. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"npm test")," command to run your tests."),(0,r.kt)("h2",{id:"id-environment"},"Environment"),(0,r.kt)("p",null,"When running tests, Athenna will automatically set the configuration environment (NODE_ENV) to testing. You are free to\ndefine other testing environment configuration values as necessary. The testing environment variables may be configured\nin your application's ",(0,r.kt)("inlineCode",{parentName:"p"},"main.js")," file, or you can simply create a ",(0,r.kt)("inlineCode",{parentName:"p"},".env.testing")," file in the root of your application."),(0,r.kt)("h2",{id:"id-creating-tests"},"Creating tests"),(0,r.kt)("p",null,"To create a new test case, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"make:test")," Artisan command. By default, tests will be placed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tests/E2E")," directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan make:test UserTest\n")),(0,r.kt)("p",null,"If you would like to create a test within the ",(0,r.kt)("inlineCode",{parentName:"p"},"tests/Unit")," directory, you may use the ",(0,r.kt)("inlineCode",{parentName:"p"},"--unit")," option when executing the ",(0,r.kt)("inlineCode",{parentName:"p"},"make:test")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan make:test UserTest --unit\n")),(0,r.kt)("p",null,"The Athenna tests are defined as classes by default, if you want to use the normal definition of Japa you can set the ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-class")," flag:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan make:test UserFnTest --no-class\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"In Athenna you can define tests as classes and as functions in the normal way of Japa, all tests will run perfectly!"))),(0,r.kt)("p",null,"Once the test has been generated, you may define your tests as you normally would using ",(0,r.kt)("a",{parentName:"p",href:"https://japa.dev/"},(0,r.kt)("inlineCode",{parentName:"a"},"Japa")),". To run your tests,\nexecute the ",(0,r.kt)("inlineCode",{parentName:"p"},"npm start")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"node artisan test")," command from your terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Test } from '@athenna/test'\n\nexport class ExampleTest extends Test {\n    /**\n     * Before all event. This method is executed\n     * before all tests.\n     *\n     * @return {void | Promise<void>}\n     */\n    async beforeAll() {}\n\n    /**\n     * Before each event. This method is executed\n     * before each test.\n     *\n     * @return {void | Promise<void>}\n     */\n    async beforeEach() {}\n\n    /**\n     * After all event. This method is executed\n     * after all tests.\n     *\n     * @return {void | Promise<void>}\n     */\n    async afterAll() {}\n\n    /**\n     * After each event. This method is executed\n     * after each test.\n     *\n     * @return {void | Promise<void>}\n     */\n    async afterEach() {}\n\n    /**\n     * Set the test timeout for all tests inside the group.\n     *\n     * @example\n     *  Default is 2000\n     *\n     * @return {number}\n     */\n    get timeout() {\n        return 2000\n    }\n\n    /**\n     * Set the test names that can run.\n     *\n     * @example\n     *  Default is ['*']\n     *\n     * @return {string[]}\n     */\n    get runOnly() {\n        return ['shouldBeAbleToRunTests']\n    }\n\n    /**\n     * Run your test.\n     *\n     * @param {import('@athenna/test').HttpTestContext} ctx\n     */\n    async shouldBeAbleToRunTests({ assert }) {\n        assert.equal(2 + 2, 4)\n    }\n}\n")),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Any method/attribute defined in your test class will be considered a test. To get around this you just need to define\nyour method/attribute with an ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," in front of it. Example: ",(0,r.kt)("inlineCode",{parentName:"p"},"_getMyProductId()")))),(0,r.kt)("h2",{id:"id-running-tests"},"Running tests"),(0,r.kt)("p",null,"In addition to the ",(0,r.kt)("inlineCode",{parentName:"p"},"npm test")," command, you may use the ",(0,r.kt)("inlineCode",{parentName:"p"},"test")," Artisan command to run your tests. The Artisan test runner provides\nverbose test reports in order to ease development and debugging:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan test\n")),(0,r.kt)("p",null,"Any arguments that can be passed to the ",(0,r.kt)("a",{parentName:"p",href:"https://japa.dev/"},(0,r.kt)("inlineCode",{parentName:"a"},"Japa"))," command may also be passed to the Artisan test command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan test Unit\n")),(0,r.kt)("p",null,"But you can use the artisan options instead:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan test --e2e --unit\n")),(0,r.kt)("h3",{id:"id-reporting-tests-coverage"},"Reporting tests coverage"),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This feature requires the ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/c8"},(0,r.kt)("inlineCode",{parentName:"a"},"c8"))," library."))),(0,r.kt)("p",null,"When running your application tests, you may want to determine whether your test cases are actually covering the application\ncode and how much application code is used when running your tests. To accomplish this, you may provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"c8")," cli when invoking\nthe test command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"c8 node artisan test\n")),(0,r.kt)("p",null,"To define a minimum test coverage threshold for your application you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},'"c8"')," property inside ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file.\nThe test suite will fail if this threshold is not met. By default, Athenna comes with 70% of coverage in all type of coverages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'"c8": {\n    "all": true,\n    "include": [\n      "app/**/*.js"\n    ],\n    "reporter": [\n      "text-summary",\n      "html"\n    ],\n    "report-dir": "./tests/Coverage",\n    "check-coverage": true,\n    "statements": "70", # <-\n    "branches": "70", # <-\n    "functions": "70", # <-\n    "lines": "70" # <-\n},\n')))}m.isMDXComponent=!0}}]);