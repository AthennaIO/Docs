"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[8995],{4380:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=s(4848),t=s(8453);const r={title:"Query Builder",sidebar_position:2,toc_max_heading_level:2,description:"See how to use the Athenna database query builder."},i="Database: Query Builder",o={id:"database/query-builder",title:"Query Builder",description:"See how to use the Athenna database query builder.",source:"@site/docs/database/query-builder.mdx",sourceDirName:"database",slug:"/database/query-builder",permalink:"/docs/database/query-builder",draft:!1,unlisted:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/database/query-builder.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Query Builder",sidebar_position:2,toc_max_heading_level:2,description:"See how to use the Athenna database query builder."},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/database/getting-started"},next:{title:"Migrations",permalink:"/docs/database/migrations"}},l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Running database queries",id:"running-database-queries",level:2},{value:"Retrieve all rows from a table",id:"retrieve-all-rows-from-a-table",level:3},{value:"Retrieve a single row",id:"retrieve-a-single-row",level:3},{value:"Validate if exists",id:"validate-if-exists",level:3},{value:"Get the client and query builder of a driver",id:"get-the-client-and-query-builder-of-a-driver",level:3},{value:"Agreggates",id:"agreggates",level:3},{value:"Select statements",id:"select-statements",level:2},{value:"Raw expressions",id:"raw-expressions",level:2},{value:"Raw methods",id:"raw-methods",level:3},{value:"<code>selectRaw()</code>",id:"selectraw",level:4},{value:"<code>whereRaw() / orWhereRaw()</code>",id:"whereraw--orwhereraw",level:4},{value:"<code>havingRaw() / orHavingRaw()</code>",id:"havingraw--orhavingraw",level:4},{value:"<code>orderByRaw()</code>",id:"orderbyraw",level:4},{value:"<code>groupByRaw()</code>",id:"groupbyraw",level:4},{value:"Joins",id:"joins",level:2},{value:"Inner join clause",id:"inner-join-clause",level:3},{value:"Other join clauses",id:"other-join-clauses",level:3},{value:"Advanced join clauses",id:"advanced-join-clauses",level:3},{value:"Basic where clauses",id:"basic-where-clauses",level:2},{value:"Where clauses",id:"where-clauses",level:3},{value:"Or where clauses",id:"or-where-clauses",level:3},{value:"Where not clauses",id:"where-not-clauses",level:3},{value:"Additional where clauses",id:"additional-where-clauses",level:3},{value:"<code>whereBetween() / orWhereBetween()</code>",id:"wherebetween--orwherebetween",level:4},{value:"<code>whereNotBetween() / orWhereNotBetween()</code>",id:"wherenotbetween--orwherenotbetween",level:4},{value:"<code>whereIn() / orWhereIn()</code>",id:"wherein--orwherein",level:4},{value:"<code>whereNotIn() /  orWhereNotIn()</code>",id:"wherenotin---orwherenotin",level:4},{value:"<code>whereNull() / orWhereNull()</code>",id:"wherenull--orwherenull",level:4},{value:"<code>whereNotNull() / orWhereNotNull()</code>",id:"wherenotnull--orwherenotnull",level:4},{value:"Logical grouping",id:"logical-grouping",level:3},{value:"Advanced where clauses",id:"advanced-where-clauses",level:2},{value:"Where exists clauses",id:"where-exists-clauses",level:3},{value:"Ordering, grouping, limit &amp; skip",id:"ordering-grouping-limit--skip",level:2},{value:"Ordering",id:"ordering",level:3},{value:"The <code>orderBy()</code> method",id:"the-orderby-method",level:4},{value:"The <code>latest()</code> &amp; <code>oldest()</code> methods",id:"the-latest--oldest-methods",level:4},{value:"Grouping",id:"grouping",level:3},{value:"The <code>groupBy()</code> &amp; <code>having()</code> methods",id:"the-groupby--having-methods",level:4},{value:"Limit &amp; Offset",id:"limit--offset",level:3},{value:"Conditional clauses",id:"conditional-clauses",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Insert statements",id:"insert-statements",level:2},{value:"Create or update (Upsert)",id:"create-or-update-upsert",level:3},{value:"Update statements",id:"update-statements",level:2},{value:"Incrementing &amp; decrementing",id:"incrementing--decrementing",level:3},{value:"Delete statements",id:"delete-statements",level:2},{value:"Debugging",id:"debugging",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"database-query-builder",children:"Database: Query Builder"}),"\n",(0,a.jsx)(n.p,{children:"See how to use the Athenna database query builder."}),"\n",(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(n.p,{children:"Athenna database query builder provides a convenient, fluent interface\nto creating and running database queries. It can be used to perform most\ndatabase operations in your application and works perfectly with all of\nAthenna supported database drivers."}),"\n",(0,a.jsx)(n.h2,{id:"running-database-queries",children:"Running database queries"}),"\n",(0,a.jsx)(n.h3,{id:"retrieve-all-rows-from-a-table",children:"Retrieve all rows from a table"}),"\n",(0,a.jsxs)(n.p,{children:["You may use the ",(0,a.jsx)(n.code,{children:"table()"})," method provided by the ",(0,a.jsx)(n.code,{children:"Database"})," facade to\nbegin a query. The ",(0,a.jsx)(n.code,{children:"table()"})," method returns a fluent query builder\ninstance for the given table, allowing you to chain more constraints\nonto the query and then finally retrieve the results of the query using\nthe ",(0,a.jsx)(n.code,{children:"findMany()"})," method:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { Database } from '@athenna/database'\n\nconst users = await Database.table('users')\n  .select('id', 'name')\n  .whereILike({ name: '%Valmir Barbosa%' })\n  .orderBy('name', 'ASC')\n  .findMany()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Athenna also provides the ",(0,a.jsx)(n.code,{children:"collection()"})," method that returns a\n",(0,a.jsx)(n.a,{href:"/docs/digging-deeper/collections",children:(0,a.jsx)(n.code,{children:"Collection"})})," instance containing\nthe results of the query. You may access each column's value using\nthe ",(0,a.jsx)(n.code,{children:"all()"})," method:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const collection = await Database.table('users')\n  .select('id', 'name')\n  .whereILike({ name: '%Valmir Barbosa%' })\n  .orderBy('name', 'ASC')\n  .collection()\n\nconst users = collection.all()\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Athenna collections provide a variety of extremely powerful methods\nfor mapping and reducing data. For more information on Athenna\ncollections, check out the\n",(0,a.jsx)(n.a,{href:"/docs/digging-deeper/collections",children:"collection documentation"}),"."]})}),"\n",(0,a.jsx)(n.h3,{id:"retrieve-a-single-row",children:"Retrieve a single row"}),"\n",(0,a.jsxs)(n.p,{children:["If you just need to retrieve a single row from a database table,\nyou may use the ",(0,a.jsx)(n.code,{children:"Database"})," facade's ",(0,a.jsx)(n.code,{children:"find()"})," method. This method\nwill return a single object:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const user = await Database.table('users')\n  .select('id', 'name')\n  .where({ name: 'Rodrigo Kamada' })\n  .find()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"validate-if-exists",children:"Validate if exists"}),"\n",(0,a.jsxs)(n.p,{children:["If you just need to validate if exists any row with determined\nconstraints, you may use the ",(0,a.jsx)(n.code,{children:"Database"})," facade's ",(0,a.jsx)(n.code,{children:"exists()"})," method.\nThis method will return ",(0,a.jsx)(n.code,{children:"true"})," if the row exists:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const hasUser = await Database.table('users')\n  .select('id', 'name')\n  .where({ name: 'Rodrigo Kamada' })\n  .exists()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"get-the-client-and-query-builder-of-a-driver",children:"Get the client and query builder of a driver"}),"\n",(0,a.jsxs)(n.p,{children:["To get the vanilla client or query builder of your connection\ndriver, you can use the ",(0,a.jsx)(n.code,{children:"getClient()"})," and ",(0,a.jsx)(n.code,{children:"getQueryBuilder()"}),"\nmethod:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Knex client\nconst client = Database.connection('postgres').getClient()\n\nawait client.close()\n\n// Knex query builder\nconst queryBuilder = Database.connection('postgres').getQueryBuilder()\n\nconst result = await queryBuilder\n  .where({ id: 1, status: 'ACTIVE' })\n  .andWhere('status', 'PENDING')\n"})}),"\n",(0,a.jsx)(n.h3,{id:"agreggates",children:"Agreggates"}),"\n",(0,a.jsxs)(n.p,{children:["The query builder also provides a variety of methods for retrieving\naggregate values like ",(0,a.jsx)(n.strong,{children:"count, max, min, avg,"})," and ",(0,a.jsx)(n.strong,{children:"sum"}),".\nYou may call any of these methods after constructing your query:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const numberOfUsers = await Database.table('users').count()\nconst maxPriceOrder = await Database.table('orders').max('price')\n"})}),"\n",(0,a.jsx)(n.p,{children:"Of course, you may combine these methods with other clauses to\nfine-tune how your aggregate value is calculated:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const priceAverage = await Database.table('orders')\n  .where('finalized', true)\n  .avg('price')\n"})}),"\n",(0,a.jsx)(n.h2,{id:"select-statements",children:"Select statements"}),"\n",(0,a.jsxs)(n.p,{children:["You may not always want to select all columns from a database table.\nUsing the ",(0,a.jsx)(n.code,{children:"select()"}),' method, you can specify a custom "select" clause\nfor the query:']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const { id, name } = await Database.table('users')\n  .select('id', 'name')\n  .find()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If you want to select all fields you can use the ",(0,a.jsx)(n.code,{children:"*"})," operator:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const { id, name, email } = await Database.table('users')\n  .select('*')\n  .find()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"raw-expressions",children:"Raw expressions"}),"\n",(0,a.jsxs)(n.p,{children:["Sometimes you may need to insert an arbitrary string into a query.\nTo create a raw string expression, you may use the ",(0,a.jsx)(n.code,{children:"raw()"})," method\nprovided by the ",(0,a.jsx)(n.code,{children:"Database"})," facade:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .select(Database.raw('count(*) as users_count, status'))\n  .where('status', '<>', 1)\n  .groupBy('status')\n  .findMany()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can also use ",(0,a.jsx)(n.code,{children:"await"})," to wait your query to finish:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.raw('SELECT * FROM users')\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsxs)(n.p,{children:["You should be extremely careful to avoid creating SQL injection\nvulnerabilities using the ",(0,a.jsx)(n.code,{children:"raw()"})," method."]})}),"\n",(0,a.jsx)(n.h3,{id:"raw-methods",children:"Raw methods"}),"\n",(0,a.jsxs)(n.p,{children:["Instead of using the ",(0,a.jsx)(n.code,{children:"Database.raw()"})," method, you may also use the\nfollowing methods to insert a raw expression into various parts of\nyour query. Remember, Athenna can not guarantee that any query using\nraw expressions is protected against SQL injection vulnerabilities."]}),"\n",(0,a.jsx)(n.h4,{id:"selectraw",children:(0,a.jsx)(n.code,{children:"selectRaw()"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"selectRaw()"})," method can be used in place of\n",(0,a.jsx)(n.code,{children:"select(Database.raw(/* ... */))"}),". This method accepts an\noptional array of bindings as its second argument:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const orders = await Database.table('orders')\n  .selectRaw('price * ? as price_with_tax', [1.0825])\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h4,{id:"whereraw--orwhereraw",children:(0,a.jsx)(n.code,{children:"whereRaw() / orWhereRaw()"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"whereRaw()"})," and ",(0,a.jsx)(n.code,{children:"orWhereRaw()"}),' methods can be used to inject a\nraw "where" clause into your query. These methods accept an optional\narray of bindings as their second argument:']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const orders = await Database.table('orders')\n  .whereRaw('price > IF(state= \"TX\", ?, 100)', [200])\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h4,{id:"havingraw--orhavingraw",children:(0,a.jsx)(n.code,{children:"havingRaw() / orHavingRaw()"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"havingRaw()"})," and ",(0,a.jsx)(n.code,{children:"orHavingRaw()"}),' methods may be used to provide a\nraw string as the value of the "having" clause. These methods accept\nan optional array of bindings as their second argument:']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const orders = await Database.table('orders')\n  .select('department', Database.raw('SUM(price) as total_sales'))\n  .groupBy('department')\n  .havingRaw('SUM(price) > ?', [2500])\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h4,{id:"orderbyraw",children:(0,a.jsx)(n.code,{children:"orderByRaw()"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"orderByRaw()"}),' method may be used to provide a raw string as the\nvalue of the "order by" clause:']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const orders = await Database.table('orders')\n  .orderByRaw('updated_at - created_at DESC')\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h4,{id:"groupbyraw",children:(0,a.jsx)(n.code,{children:"groupByRaw()"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"groupByRaw()"}),' method may be used to provide a raw string as the\nvalue of the "group by" clause:']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const orders = await Database.table('orders')\n  .select('city', 'state')\n  .groupByRaw('city, state')\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"joins",children:"Joins"}),"\n",(0,a.jsx)(n.h3,{id:"inner-join-clause",children:"Inner join clause"}),"\n",(0,a.jsxs)(n.p,{children:['The query builder may also be used to add join clauses to your queries.\nTo perform a basic "inner join", you may use the join method on a query\nbuilder instance. The first argument passed to the ',(0,a.jsx)(n.code,{children:"join"})," method is the\nname of the table you need to join to, while the remaining arguments\nspecify the column constraints for the join. You may even join multiple\ntables in a single query:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .join('contacts', 'users.id', '=', 'contacts.user_id')\n  .join('orders', 'users.id', '=', 'orders.user_id')\n  .select('users.*', 'contacts.phone', 'orders.price')\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"other-join-clauses",children:"Other join clauses"}),"\n",(0,a.jsxs)(n.p,{children:['If you would like to perform a "left join" or "right join" instead\nof an "inner join", use the ',(0,a.jsx)(n.code,{children:"leftJoin()"})," or ",(0,a.jsx)(n.code,{children:"rightJoin()"})," methods.\nThey have the same signature of ",(0,a.jsx)(n.code,{children:"join"})," method:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .leftJoin('contacts', 'users.id', '=', 'contacts.user_id')\n  .rightJoin('orders', 'users.id', '=', 'orders.user_id')\n  .select('users.*', 'contacts.phone', 'orders.price')\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.p,{children:"You can use any of the join types bellow in your queries:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"leftJoin()"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"rightJoin()"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"crossJoin()"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"fullOuterJoin()"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"leftOuterJoin()"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"rightOuterJoin()"})}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"advanced-join-clauses",children:"Advanced join clauses"}),"\n",(0,a.jsxs)(n.p,{children:["You may also specify more advanced join clauses using the ",(0,a.jsx)(n.code,{children:"Database"}),"\nfacade:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .join('contacts', join => join.on('users.id', '=', 'contacts.user_id').orOn(/* ... */))\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"basic-where-clauses",children:"Basic where clauses"}),"\n",(0,a.jsx)(n.h3,{id:"where-clauses",children:"Where clauses"}),"\n",(0,a.jsxs)(n.p,{children:["You may use the query builder's ",(0,a.jsx)(n.code,{children:"where()"}),' method to add "where" clauses\nto the query. The most basic call to the ',(0,a.jsx)(n.code,{children:"where()"})," method requires three\narguments. The first argument is the name of the column. The second\nargument is an operator, which can be any of the database's supported\noperators. The third argument is the value to compare against the\ncolumn's value."]}),"\n",(0,a.jsxs)(n.p,{children:["For example, the following query retrieves users where the value of the\n",(0,a.jsx)(n.code,{children:"votes"})," column is equal to ",(0,a.jsx)(n.code,{children:"100"})," and the value of the ",(0,a.jsx)(n.code,{children:"age"}),"\ncolumn is greater than ",(0,a.jsx)(n.code,{children:"35"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const user = await Database.table('users')\n  .where('votes', '=', 100)\n  .where('age', '>', 35)\n  .find()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["For convenience, if you want to verify that a column is ",(0,a.jsx)(n.code,{children:"="})," to a given\nvalue, you may pass the value as the second argument to the ",(0,a.jsx)(n.code,{children:"where()"}),"\nmethod. Athenna will assume you would like to use the ",(0,a.jsx)(n.code,{children:"="})," operator:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .where('votes', 100)\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.p,{children:"As previously mentioned, you may use any operator that is supported\nby your database system:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .where('votes', '>=', 100)\n  .findMany()\n\nconst users = await Database.table('users')\n  .where('votes', '<>', 100)\n  .findMany()\n\nconst users = await Database.table('users')\n  .where('name', 'like', 'J%')\n  .findMany()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You may also pass an object of conditions, but remember that when\nusing objects the operation is always going to be ",(0,a.jsx)(n.code,{children:"="}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .where({ name: 'Jo\xe3o Lenon', deletedAt: null })\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"or-where-clauses",children:"Or where clauses"}),"\n",(0,a.jsxs)(n.p,{children:["When chaining together calls to the query builder's ",(0,a.jsx)(n.code,{children:"where()"}),' method,\nthe "where" clauses will be joined together using\nthe ',(0,a.jsx)(n.code,{children:"and"})," operator. However, you may use the ",(0,a.jsx)(n.code,{children:"orWhere()"})," method to join\na clause to the query using the ",(0,a.jsx)(n.code,{children:"or"})," operator. The ",(0,a.jsx)(n.code,{children:"orWhere()"})," method\naccepts the same arguments as the ",(0,a.jsx)(n.code,{children:"where()"})," method:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .where('votes', '>', 100)\n  .orWhere('name', 'Jo\xe3o')\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"where-not-clauses",children:"Where not clauses"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"whereNot()"})," and ",(0,a.jsx)(n.code,{children:"orWhereNot()"})," methods may be used to negate a\ngiven constraint. For example, the following query\nexcludes the product with ",(0,a.jsx)(n.code,{children:"id"})," ten:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const products = await Database.table('products')\n  .whereNot('id', 10)\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"additional-where-clauses",children:"Additional where clauses"}),"\n",(0,a.jsx)(n.h4,{id:"wherebetween--orwherebetween",children:(0,a.jsx)(n.code,{children:"whereBetween() / orWhereBetween()"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"whereBetween()"})," or ",(0,a.jsx)(n.code,{children:"orWhereBetween()"})," methods verifies that a\ncolumn's value is between two values:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .whereBetween('votes', [1, 100])\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h4,{id:"wherenotbetween--orwherenotbetween",children:(0,a.jsx)(n.code,{children:"whereNotBetween() / orWhereNotBetween()"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"whereNotBetween()"})," or ",(0,a.jsx)(n.code,{children:"orWhereNotBetween()"})," methods verifies that\na column's value lies outside two values:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .whereNotBetween('votes', [1, 100])\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h4,{id:"wherein--orwherein",children:(0,a.jsx)(n.code,{children:"whereIn() / orWhereIn()"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"whereIn()"})," or ",(0,a.jsx)(n.code,{children:"orWhereIn()"})," methods verifies that a given column's\nvalue is contained within the given array:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .whereIn('id', [1, 2, 3])\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h4,{id:"wherenotin---orwherenotin",children:(0,a.jsx)(n.code,{children:"whereNotIn() /  orWhereNotIn()"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"whereNotIn()"})," or ",(0,a.jsx)(n.code,{children:"orWhereNotIn()"})," methods verifies that the given\ncolumn's value is not contained in the given array:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .whereNotIn('id', [1, 2, 3])\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h4,{id:"wherenull--orwherenull",children:(0,a.jsx)(n.code,{children:"whereNull() / orWhereNull()"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"whereNull()"})," or ",(0,a.jsx)(n.code,{children:"orWhereNull()"})," methods verifies that the value of\nthe given column is ",(0,a.jsx)(n.code,{children:"NULL"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .whereNull('deletedAt')\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h4,{id:"wherenotnull--orwherenotnull",children:(0,a.jsx)(n.code,{children:"whereNotNull() / orWhereNotNull()"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"whereNotNull()"})," or ",(0,a.jsx)(n.code,{children:"orWhereNotNull()"})," methods verifies that the\ncolumn's value is not ",(0,a.jsx)(n.code,{children:"NULL"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .whereNotNull('deletedAt')\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"logical-grouping",children:"Logical grouping"}),"\n",(0,a.jsxs)(n.p,{children:['Sometimes you may need to group several "where" clauses within\nparentheses in order to achieve your query\'s desired logical grouping.\nIn fact, you should generally always group calls to the ',(0,a.jsx)(n.code,{children:"orWhere()"}),"\nmethod in parentheses in order to avoid unexpected query behavior. To\naccomplish this, you may pass a closure to the ",(0,a.jsx)(n.code,{children:"where"})," method:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .where('name', '=', 'Jo\xe3o')\n  .where(query => {\n    query\n      .where('votes', '>', 100)\n      .orWhere('title', '=', 'Admin')\n  })\n  .findMany()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["As you can see, passing a closure into the ",(0,a.jsx)(n.code,{children:"where()"})," method instructs\nthe query builder to begin a constraint group. The closure will receive\na query builder instance which you can use to set the constraints that\nshould be contained within the parenthesis group. The example above\nwill produce the following SQL:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"select * from users where name = 'Jo\xe3o' and (votes > 100 or title = 'Admin')\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:["You should always group ",(0,a.jsx)(n.code,{children:"orWhere()"})," calls in order to avoid unexpected\nbehavior when global scopes are applied."]})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-where-clauses",children:"Advanced where clauses"}),"\n",(0,a.jsx)(n.h3,{id:"where-exists-clauses",children:"Where exists clauses"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"whereExists()"}),", ",(0,a.jsx)(n.code,{children:"orWhereExists()"}),", ",(0,a.jsx)(n.code,{children:"whereNotExists()"})," and\n",(0,a.jsx)(n.code,{children:"orWhereNotExists()"}),' methods allows you to write "where exists" SQL\nclauses. They accept a closure which will receive a query builder\ninstance, allowing you to define the query that should be placed inside\nthe "exists" clause:']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .whereExists(Database.table('orders')\n                       .selectRaw(1)\n                       .whereRaw(\"`orders`.`user_id` = `users`.`id`\"))\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.p,{children:"The query above will produce the following SQL:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"select * from users\nwhere exists (\n    select 1\n    from orders\n    where orders.user_id = users.id\n)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"ordering-grouping-limit--skip",children:"Ordering, grouping, limit & skip"}),"\n",(0,a.jsx)(n.h3,{id:"ordering",children:"Ordering"}),"\n",(0,a.jsxs)(n.h4,{id:"the-orderby-method",children:["The ",(0,a.jsx)(n.code,{children:"orderBy()"})," method"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"orderBy()"})," method allows you to sort the results of the query\nby a given column. The first argument accepted by the\n",(0,a.jsx)(n.code,{children:"orderBy()"})," method should be the column you wish to sort by, while\nthe second argument determines the direction of the\nsort and may be either ",(0,a.jsx)(n.code,{children:"asc"}),", ",(0,a.jsx)(n.code,{children:"ASC"}),", ",(0,a.jsx)(n.code,{children:"desc"})," or ",(0,a.jsx)(n.code,{children:"DESC"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .orderBy('name', 'desc')\n  .findMany()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To sort by multiple columns, you may simply invoke ",(0,a.jsx)(n.code,{children:"orderBy()"}),"\nas many times as necessary:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .orderBy('name', 'desc')\n  .orderBy('email', 'asc')\n  .findMany()\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"the-latest--oldest-methods",children:["The ",(0,a.jsx)(n.code,{children:"latest()"})," & ",(0,a.jsx)(n.code,{children:"oldest()"})," methods"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"latest()"})," and ",(0,a.jsx)(n.code,{children:"oldest()"})," methods allow you to easily order results\nby date. By default, the result will be ordered by the table's\n",(0,a.jsx)(n.code,{children:"createdAt"})," column:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const user = await Database.table('users')\n  .latest()\n  .find()\n"})}),"\n",(0,a.jsx)(n.p,{children:"Or, you may pass the column name that you wish to sort by:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const user = await Database.table('users')\n  .oldest('updatedAt')\n  .find()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"grouping",children:"Grouping"}),"\n",(0,a.jsxs)(n.h4,{id:"the-groupby--having-methods",children:["The ",(0,a.jsx)(n.code,{children:"groupBy()"})," & ",(0,a.jsx)(n.code,{children:"having()"})," methods"]}),"\n",(0,a.jsxs)(n.p,{children:["As you might expect, the ",(0,a.jsx)(n.code,{children:"groupBy()"})," and ",(0,a.jsx)(n.code,{children:"having()"})," methods may be used\nto group the query results. The having method's signature is similar\nto that of the ",(0,a.jsx)(n.code,{children:"where()"})," method:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .groupBy('account_id')\n  .having('account_id', '>', 100)\n  .findMany()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can use the ",(0,a.jsx)(n.code,{children:"havingBetween()"})," method to filter the results within\na given range:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .selectRaw('count(id) as number_of_users, account_id')\n  .groupBy('account_id')\n  .havingBetween('number_of_users', [0, 100])\n  .findMany()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You may pass multiple arguments to the ",(0,a.jsx)(n.code,{children:"groupBy()"})," method to group by\nmultiple columns:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .groupBy('first_name', 'status')\n  .having('account_id', '>', 100)\n  .findMany()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To build more advanced ",(0,a.jsx)(n.code,{children:"having()"})," statements, see the\n",(0,a.jsx)(n.a,{href:"/docs/database/query-builder#having-raw",children:(0,a.jsx)(n.code,{children:"havingRaw()"})})," method."]}),"\n",(0,a.jsx)(n.h3,{id:"limit--offset",children:"Limit & Offset"}),"\n",(0,a.jsxs)(n.p,{children:["You may use the ",(0,a.jsx)(n.code,{children:"offset()"})," and ",(0,a.jsx)(n.code,{children:"limit()"})," methods to limit the number\nof results returned from the query or to skip a given number of results\nin the query:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .offset(10)\n  .limit(5)\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"offset()"})," method is equivalent to ",(0,a.jsx)(n.code,{children:"skip()"})," and the ",(0,a.jsx)(n.code,{children:"limit()"}),"\nmethod is equivalent to ",(0,a.jsx)(n.code,{children:"take()"}),". ",(0,a.jsx)(n.code,{children:"take()"})," and ",(0,a.jsx)(n.code,{children:"skip()"})," are usually\nused by other query builders."]})}),"\n",(0,a.jsx)(n.h2,{id:"conditional-clauses",children:"Conditional clauses"}),"\n",(0,a.jsxs)(n.p,{children:["Sometimes you may want certain query clauses to apply to a query based\non another condition. For instance, you may only want to apply a ",(0,a.jsx)(n.code,{children:"where()"}),"\nstatement if a given input value is present on the incoming HTTP request.\nYou may accomplish this using the ",(0,a.jsx)(n.code,{children:"when()"})," method:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const role = request.payload('role')\n\nawait Database.table('users')\n  .when(role, (query, role) => query.where('roleId', role))\n  .findMany()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"when()"})," method only executes the given closure when the first\nargument is ",(0,a.jsx)(n.code,{children:"true"}),". If the first argument is ",(0,a.jsx)(n.code,{children:"false"}),", the closure will\nnot be executed. So, in the example above, the closure given to the\n",(0,a.jsx)(n.code,{children:"when()"})," method will only be invoked if the role field is present on\nthe incoming request and evaluates to a ",(0,a.jsx)(n.strong,{children:"truthy"})," value."]}),"\n",(0,a.jsxs)(n.p,{children:["You can also add two ",(0,a.jsx)(n.code,{children:"when()"})," methods to your query to execute a different\nclosure when the ",(0,a.jsx)(n.code,{children:"role"})," ",(0,a.jsx)(n.strong,{children:"IS NOT"})," present in your query:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const role = request.payload('role')\n\nawait Database.table('users')\n  // Executes if role is present\n  .when(role, (query, role) => query.where('roleId', role))\n  // Executes if role is not present\n  .when(!role, (query, role) => query.where('roleId', role))\n  .findMany()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"pagination",children:"Pagination"}),"\n",(0,a.jsxs)(n.p,{children:["You can paginate the results of your database using the ",(0,a.jsx)(n.code,{children:"paginate()"}),"\nmethod. This method support 3 arguments, the first argument is the\npage (default value is ",(0,a.jsx)(n.code,{children:"0"}),") it defines the page where your pagination\nwill start, the second is the limit (default value is ",(0,a.jsx)(n.code,{children:"10"}),") it defines\nthe limit of data that will be retrieved per page and the third one\ndefines the resource url that Athenna will use to create the pagination\nlinks:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const { data, meta, links } = await Database.table('users')\n  .whereNull('deletedAt')\n  .paginate(0, 10, '/users')\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"data"})," param is where all the data retrieved from database will stay:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"console.log(data) // -> [{...}]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"meta"})," param will have information about the pagination such as\nthe total of items finds using that query, items per page, total\npages left, current page and the number of itens in that specific\nexecution:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"console.log(meta)\n/**\n* {\n*    totalItems: 10,\n*    itemsPerPage: 10,\n*    totalPages: 10,\n*    currentPage: 1,\n*    itemCount: 10\n* }\n*/\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"links"})," object will help ho is consuming you API to know what is\nthe next resource to call to go through your paginated data:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"console.log(links)\n/**\n* {\n*   next: '/users?page=2&limit=10',\n*   previous: '/users?page=0&limit=10',\n*   last: '/users?page=10&limit=10,\n*   first: '/users?&limit=10'\n* }\n*/\n"})}),"\n",(0,a.jsx)(n.h2,{id:"insert-statements",children:"Insert statements"}),"\n",(0,a.jsxs)(n.p,{children:["The query builder also provides the ",(0,a.jsx)(n.code,{children:"create()"})," and ",(0,a.jsx)(n.code,{children:"createMany()"}),"\nmethods that may be used to insert records into the database\ntable. The ",(0,a.jsx)(n.code,{children:"create()"})," method accepts a record with columns names\nand values:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const user = await Database.table('users').create({\n    name: 'Valmir Barbosa',\n    email: 'valmirphp@gmail.com'\n})\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"createMany()"})," method accepts an array of records:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users').createMany([\n    {\n        name: 'Valmir Barbosa',\n        email: 'valmirphp@gmail.com'\n    },\n    {\n        name: 'Danrley Morais',\n        email: 'danrley.morais@gmail.com'\n    }\n])\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create-or-update-upsert",children:"Create or update (Upsert)"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"createOrUpdate()"})," method will insert records that do not exist\nand update the records that already exist with new values that you\nmay specify. The method's first argument consists of the values to\ninsert or update, while the second argument is the column that\nuniquely identify records within the associated table\n(the default is ",(0,a.jsx)(n.code,{children:"id"}),"). In the example above we are going to create\na new record in the users table ",(0,a.jsx)(n.strong,{children:"only if"})," the ",(0,a.jsx)(n.code,{children:"txsoura@athenna.io"}),"\nemail is not already registered in ",(0,a.jsx)(n.code,{children:"users"})," table:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const user = await Database.table('users')\n  .createOrUpdate({\n    name: 'Victor Tesoura',\n    email: 'txsoura@athenna.io'\n  }, 'email') // <- The uniquely identifier\n"})}),"\n",(0,a.jsx)(n.h2,{id:"update-statements",children:"Update statements"}),"\n",(0,a.jsxs)(n.p,{children:["In addition to inserting records into the database, the query builder\ncan also update existing records using the ",(0,a.jsx)(n.code,{children:"update()"})," method. The\n",(0,a.jsx)(n.code,{children:"update()"})," method, like the ",(0,a.jsx)(n.code,{children:"create()"}),' method, accepts a record with\ncolumns names and values indicating the columns to be updated. You\nmay constrain the update query using where clauses. In the example\nabove we are going to "undo" the soft delete by searching for all\nrecords where the ',(0,a.jsx)(n.code,{children:"deletedAt"})," column is not null and setting it to ",(0,a.jsx)(n.code,{children:"null"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const user = await Database.table('users')\n  .whereNotNull('deletedAt')\n  .update({ deletedAt: null })\n"})}),"\n",(0,a.jsx)(n.h3,{id:"incrementing--decrementing",children:"Incrementing & decrementing"}),"\n",(0,a.jsx)(n.p,{children:"The query builder also provides convenient methods for incrementing\nor decrementing the value of a given column. Both of these methods\naccept at least one argument: the column to modify:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"await Database.table('users').increment('votes')\nawait Database.table('users').where('id', 1).increment('votes')\n\nawait Database.table('users').decrement('votes')\nawait Database.table('users').where('id', 1).decrement('votes')\n"})}),"\n",(0,a.jsx)(n.h2,{id:"delete-statements",children:"Delete statements"}),"\n",(0,a.jsxs)(n.p,{children:["The query builder's ",(0,a.jsx)(n.code,{children:"delete()"}),' method may be used to delete records\nfrom the table. You may constrain delete statements by adding "where"\nclauses before calling the ',(0,a.jsx)(n.code,{children:"delete()"})," method:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"await Database.table('users').delete()\nawait Database.table('users').where('votes', '>', 100).delete()\n"})}),"\n",(0,a.jsx)(n.p,{children:"If you wish to truncate an entire table, which will remove all records\nfrom the table and reset the auto-incrementing ID to zero, you may use\nthe truncate method:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const tableName = 'users'\n\nawait Database.truncate(tableName)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,a.jsxs)(n.p,{children:["You may use the ",(0,a.jsx)(n.code,{children:"dump()"})," method while building a query to dump the\ncurrent query bindings and SQL. The ",(0,a.jsx)(n.code,{children:"dump()"})," method will display\nthe debug information and continue executing the code:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const users = await Database.table('users')\n  .whereNull('deletedAt')\n  .dump() // <- Will log in the terminal your query until this point\n  .oldest('deletedAt')\n  .dump() // <- Will log in the terminal your query until this point\n  .findMany()\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var a=s(6540);const t={},r=a.createContext(t);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);