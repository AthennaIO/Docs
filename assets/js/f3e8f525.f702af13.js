"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[2204],{8624:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var l=i(5893),t=i(1151);const s={title:"Annotations",sidebar_position:5,description:"Check all available ORM annotations and it options."},o="ORM: Annotations",a={id:"orm/annotations",title:"Annotations",description:"Check all available ORM annotations and it options.",source:"@site/docs/orm/annotations.mdx",sourceDirName:"orm",slug:"/orm/annotations",permalink:"/docs/orm/annotations",draft:!1,unlisted:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/orm/annotations.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Annotations",sidebar_position:5,description:"Check all available ORM annotations and it options."},sidebar:"tutorialSidebar",previous:{title:"Extending Models",permalink:"/docs/orm/extending-models"},next:{title:"Factories",permalink:"/docs/orm/factories"}},d={},c=[{value:"<code>@Column()</code>",id:"column",level:2},{value:"<code>name</code>",id:"name",level:4},{value:"<code>type</code>",id:"type",level:4},{value:"<code>length</code>",id:"length",level:4},{value:"<code>defaultTo</code>",id:"defaultto",level:4},{value:"<code>isPrimary</code>",id:"isprimary",level:4},{value:"<code>isHidden</code>",id:"ishidden",level:4},{value:"<code>isUnique</code>",id:"isunique",level:4},{value:"<code>isNullable</code>",id:"isnullable",level:4},{value:"<code>isIndex</code>",id:"isindex",level:4},{value:"<code>isSparse</code>",id:"issparse",level:4},{value:"<code>persist</code>",id:"persist",level:4},{value:"<code>isCreateDate</code>",id:"iscreatedate",level:4},{value:"<code>isUpdateDate</code>",id:"isupdatedate",level:4},{value:"<code>isDeleteDate</code>",id:"isdeletedate",level:4},{value:"<code>@HasOne()</code>",id:"hasone",level:2},{value:"<code>@HasMany()</code>",id:"hasmany",level:2},{value:"<code>@BelongsTo()</code>",id:"belongsto",level:2},{value:"<code>@BelongsToMany()</code>",id:"belongstomany",level:2}];function r(e){const n={admonition:"admonition",code:"code",div:"div",h1:"h1",h2:"h2",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"orm-annotations",children:"ORM: Annotations"}),"\n",(0,l.jsx)(n.p,{children:"Check all available ORM annotations and it options."}),"\n",(0,l.jsx)(n.h2,{id:"column",children:(0,l.jsx)(n.code,{children:"@Column()"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"@Column()"})," annotations marks a model property as a database column:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"import { Column, BaseModel } from '@athenna/database'\n\nexport class Flight extends BaseModel {\n  @Column()\n  public id: number\n\n  @Column()\n  public from: string\n\n  @Column()\n  public to: string\n\n  @Column({ isCreateDate: true })\n  public createdAt: Date\n\n  @Column({ isUpdateDate: true })\n  public updatedAt: Date\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"You can also define any of the following optional properties:"}),"\n",(0,l.jsx)(n.h4,{id:"name",children:(0,l.jsx)(n.code,{children:"name"})}),"\n",(0,l.jsx)(n.p,{children:"Map which will be the name of your column in database:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"@Column({ name: 'my_name' })\npublic name: string\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The default value of this property will be the name of\nyour class property as ",(0,l.jsx)(n.strong,{children:"camelCase"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"type",children:(0,l.jsx)(n.code,{children:"type"})}),"\n",(0,l.jsx)(n.p,{children:"Map the type of your column. This property is usefull\nonly to synchronize your model with database:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"@Column({ type: Number })\npublic id: string\n"})}),"\n",(0,l.jsxs)(n.p,{children:["By default the type of your model will be set as the\ntype of your class property, in the example above, if\nwe remove the ",(0,l.jsx)(n.code,{children:"type"})," property, it would automatically\nbe set as ",(0,l.jsx)(n.code,{children:"String"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"length",children:(0,l.jsx)(n.code,{children:"length"})}),"\n",(0,l.jsx)(n.p,{children:"Map the column length in database. This property is\nusefull only when synchronizing your model with database:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"@Column({ length: 10 })\npublic name: string\n"})}),"\n",(0,l.jsx)(n.h4,{id:"defaultto",children:(0,l.jsx)(n.code,{children:"defaultTo"})}),"\n",(0,l.jsxs)(n.p,{children:["This property doesn't change the behavior in your database,\nthey are used only when the class property is undefined or\nnull before running your model ",(0,l.jsx)(n.code,{children:"create()"}),", ",(0,l.jsx)(n.code,{children:"createMany()"}),",\n",(0,l.jsx)(n.code,{children:"update()"})," and ",(0,l.jsx)(n.code,{children:"createOrUpdate()"})," methods:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"@Column({ defaultTo: null })\npublic deletedAt: Date\n"})}),"\n",(0,l.jsx)(n.div,{children:(0,l.jsxs)(n.p,{children:["The value set to ",(0,l.jsx)(n.code,{children:"defaulTo"})," property will only be used when\nthe value for the specified column was not provided when calling\nthe above methods and also when it was not set in static ",(0,l.jsx)(n.code,{children:"attributes()"}),"\nmethod of your model."]})}),"\n",(0,l.jsx)(n.h4,{id:"isprimary",children:(0,l.jsx)(n.code,{children:"isPrimary"})}),"\n",(0,l.jsx)(n.p,{children:"Set if the column is a primary key:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"@Column({ isPrimary: true })\npublic id: number\n"})}),"\n",(0,l.jsx)(n.h4,{id:"ishidden",children:(0,l.jsx)(n.code,{children:"isHidden"})}),"\n",(0,l.jsx)(n.p,{children:"Set if the column should be hidden when retrieving it from database:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"@Column({ isHidden: true })\npublic password: string\n"})}),"\n",(0,l.jsx)(n.h4,{id:"isunique",children:(0,l.jsx)(n.code,{children:"isUnique"})}),"\n",(0,l.jsx)(n.p,{children:"Set if the column needs to have a unique value in database:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"@Column({ isUnique: true })\npublic email: string\n"})}),"\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsx)(n.p,{children:"If you try to create duplicated values Athenna will throw an\nexception until it gets in your database. This means that you\nmigration could have or not the unique index defined"})}),"\n",(0,l.jsx)(n.h4,{id:"isnullable",children:(0,l.jsx)(n.code,{children:"isNullable"})}),"\n",(0,l.jsx)(n.p,{children:"Set if the column is nullable or not:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"@Column({ isNullable: false })\npublic name: string\n"})}),"\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsxs)(n.p,{children:["Just like ",(0,l.jsx)(n.code,{children:"isUnique"})," property, if ",(0,l.jsx)(n.code,{children:"isNullable"})," is set to false\nand you try to create a model with null or undefined ",(0,l.jsx)(n.code,{children:"name"}),", it\nwill throw an exception."]})}),"\n",(0,l.jsx)(n.h4,{id:"isindex",children:(0,l.jsx)(n.code,{children:"isIndex"})}),"\n",(0,l.jsx)(n.p,{children:"Set if the column is an index:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"@Column({ isIndex: true })\npublic email: string\n"})}),"\n",(0,l.jsx)(n.h4,{id:"issparse",children:(0,l.jsx)(n.code,{children:"isSparse"})}),"\n",(0,l.jsx)(n.p,{children:"Set if the column is an index sparse:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"@Column({ isSparse: true })\npublic email: string\n"})}),"\n",(0,l.jsx)(n.h4,{id:"persist",children:(0,l.jsx)(n.code,{children:"persist"})}),"\n",(0,l.jsxs)(n.p,{children:["Set if the column should be persist in database\nor not. If set as ",(0,l.jsx)(n.code,{children:"false"}),", Athenna will remove this\ncolumn from operations like create or update, but it\nwill still me available in listing operations:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"@Column({ persist: false })\npublic name: string\n"})}),"\n",(0,l.jsx)(n.h4,{id:"iscreatedate",children:(0,l.jsx)(n.code,{children:"isCreateDate"})}),"\n",(0,l.jsxs)(n.p,{children:["Set if the column is a createdAt column. If this option\nis ",(0,l.jsx)(n.code,{children:"true"}),", Athenna will automatically set a ",(0,l.jsx)(n.code,{children:"new Date()"}),"\nvalue in the column when creating it:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"@Column({ isCreateDate: true })\npublic createdAt: Date\n"})}),"\n",(0,l.jsx)(n.h4,{id:"isupdatedate",children:(0,l.jsx)(n.code,{children:"isUpdateDate"})}),"\n",(0,l.jsxs)(n.p,{children:["Set if the column is an updatedAt column. If this option\nis ",(0,l.jsx)(n.code,{children:"true"}),", Athenna will automatically set a ",(0,l.jsx)(n.code,{children:"new Date()"}),"\nvalue in the column when creating it:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"@Column({ isUpdateDate: true })\npublic updatedAt: Date\n"})}),"\n",(0,l.jsx)(n.h4,{id:"isdeletedate",children:(0,l.jsx)(n.code,{children:"isDeleteDate"})}),"\n",(0,l.jsxs)(n.p,{children:["Set if the column is a deletedAt column and also if the model\nis using soft delete approach. If this option is ",(0,l.jsx)(n.code,{children:"true"}),", Athenna\nwill automatically set a ",(0,l.jsx)(n.code,{children:"new Date()"})," value in the column when\ndeleting it:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"@Column({ isDeleteDate: true })\npublic deletedAt: Date\n"})}),"\n",(0,l.jsx)(n.h2,{id:"hasone",children:(0,l.jsx)(n.code,{children:"@HasOne()"})}),"\n",(0,l.jsx)(n.p,{children:"Comming soon..."}),"\n",(0,l.jsx)(n.h2,{id:"hasmany",children:(0,l.jsx)(n.code,{children:"@HasMany()"})}),"\n",(0,l.jsx)(n.p,{children:"Comming soon..."}),"\n",(0,l.jsx)(n.h2,{id:"belongsto",children:(0,l.jsx)(n.code,{children:"@BelongsTo()"})}),"\n",(0,l.jsx)(n.p,{children:"Comming soon..."}),"\n",(0,l.jsx)(n.h2,{id:"belongstomany",children:(0,l.jsx)(n.code,{children:"@BelongsToMany()"})}),"\n",(0,l.jsx)(n.p,{children:"Comming soon..."})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(r,{...e})}):r(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>o});var l=i(7294);const t={},s=l.createContext(t);function o(e){const n=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);