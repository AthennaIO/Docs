"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[2628],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(t),u=o,g=m["".concat(p,".").concat(u)]||m[u]||d[u]||i;return t?r.createElement(g,a(a({ref:n},c),{},{components:t})):r.createElement(g,a({ref:n},c))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[m]="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1648:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(7462),o=(t(7294),t(3905));const i={title:"REPL",sidebar_position:1,description:"See how to create a REPL session with Athenna Framework ecosystem."},a="REPL",l={unversionedId:"digging-deeper/repl",id:"digging-deeper/repl",title:"REPL",description:"See how to create a REPL session with Athenna Framework ecosystem.",source:"@site/docs/digging-deeper/repl.mdx",sourceDirName:"digging-deeper",slug:"/digging-deeper/repl",permalink:"/docs/digging-deeper/repl",draft:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/digging-deeper/repl.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"REPL",sidebar_position:1,description:"See how to create a REPL session with Athenna Framework ecosystem."},sidebar:"tutorialSidebar",previous:{title:"Digging Deeper",permalink:"/docs/digging-deeper"},next:{title:"Graceful Shutdown",permalink:"/docs/digging-deeper/graceful-shutdown"}},p={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Booting REPL",id:"booting-repl",level:2},{value:"Importing modules in REPL session",id:"importing-modules-in-repl-session",level:2},{value:"Pre-importing modules",id:"pre-importing-modules",level:2}],c={toc:s},m="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"repl"},"REPL"),(0,o.kt)("p",null,"See how to create a REPL session with Athenna Framework ecosystem."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"From ",(0,o.kt)("a",{parentName:"p",href:"https://www.digitalocean.com/community/tutorials/what-is-repl"},"Digital ocean article"),":\nA Read-Eval-Print Loop, or REPL, is a computer environment\nwhere user inputs are read and evaluated, and then the results\nare returned to the user. REPLs provide an interactive\nenvironment to explore tools available in specific environments\nor programming languages. Some examples include the Node.js\nconsole, IPython, the Bash shell, and the developer console\nfound in most web browsers."),(0,o.kt)("p",null,"Athenna can easily integrate with\n",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/repl.html#repl"},(0,o.kt)("inlineCode",{parentName:"a"},"node:repl"))," package\nto run your entire infrastructure in parallel with the package."),(0,o.kt)("h2",{id:"booting-repl"},"Booting REPL"),(0,o.kt)("p",null,"REPL allows you to interact with your entire Athenna\napplication on the command line, including your models,\njobs, events, and more. To enter the REPL environment,\nrun the Artisan command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"./node artisan repl\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"When running this command, Athenna will use the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Path.bootstrap('repl.ts')")," file to execute your session.")),(0,o.kt)("h2",{id:"importing-modules-in-repl-session"},"Importing modules in REPL session"),(0,o.kt)("p",null,"To import modules inside REPL you need to use dynamic imports:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"{ Log } = await import('@athenna/logger') // Destructuring import\nhelpers = await import('#app/helpers/index') // Default import\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"If you don't use ",(0,o.kt)("inlineCode",{parentName:"p"},"var/let/const")," in front of your importation,\nthe variable will be set globally in your REPL session.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You can check the global context of your REPL session\nrunning ",(0,o.kt)("inlineCode",{parentName:"p"},".ls"),". You can type ",(0,o.kt)("inlineCode",{parentName:"p"},".help")," to check all REPL\ncommands available.")),(0,o.kt)("h2",{id:"pre-importing-modules"},"Pre-importing modules"),(0,o.kt)("p",null,"You can pre-import modules in your REPL session to avoid keep\nimporting them everytime inside your REPL session. You can do that\nin your ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.bootstrap('repl.ts')")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Ignite } from '@athenna/core'\n\nconst ignite = await new Ignite().load(import.meta.url, { bootLogs: false })\n\nconst repl = await ignite.repl()\n\nawait import('@athenna/common').then(common => {\n  Object.keys(common).forEach(key => (\n    repl.context[key] = common[key] \ud83d\udc48\n  ))\n})\n\nrepl.context.helloWorld = 'Hello World!' \ud83d\udc48\nrepl.context.appService = ioc.safeUse('App/Services/AppService') \ud83d\udc48\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"As you can see in the implementation above, by default Athenna\npre-imports all the ",(0,o.kt)("inlineCode",{parentName:"p"},"@athenna/common")," helpers to your REPL session.")))}d.isMDXComponent=!0}}]);