"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[1002],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),g=a,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:a,o[1]=p;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6016:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={title:"Tracing Requests",sidebar_position:8,description:"Understand how to trace requests in your REST API application of Athenna.",tags:["REST API Application","Tracing Requests"]},o="Tracing Requests",p={unversionedId:"rest-api-application/tracing-requests",id:"rest-api-application/tracing-requests",title:"Tracing Requests",description:"Understand how to trace requests in your REST API application of Athenna.",source:"@site/docs/rest-api-application/tracing-requests.mdx",sourceDirName:"rest-api-application",slug:"/rest-api-application/tracing-requests",permalink:"/docs/rest-api-application/tracing-requests",draft:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/rest-api-application/tracing-requests.mdx",tags:[{label:"REST API Application",permalink:"/docs/tags/rest-api-application"},{label:"Tracing Requests",permalink:"/docs/tags/tracing-requests"}],version:"current",sidebarPosition:8,frontMatter:{title:"Tracing Requests",sidebar_position:8,description:"Understand how to trace requests in your REST API application of Athenna.",tags:["REST API Application","Tracing Requests"]},sidebar:"tutorialSidebar",previous:{title:"Rate Limiting",permalink:"/docs/rest-api-application/rate-limiting"},next:{title:"CLI Application",permalink:"/docs/cli-application"}},s={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Basic usage",id:"basic-usage",level:2},{value:"Disabling tracer",id:"disabling-tracer",level:2}],c={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tracing-requests"},"Tracing Requests"),(0,a.kt)("p",null,"Understand how to trace requests in your REST API application of Athenna."),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Briefly, tracing represents a single user's\njourney through an entire app stack. By\ntracing through a stack, developers can identify\nwhat happened with determined request and also\nidentify bottlenecks and focus on improving performance."),(0,a.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,a.kt)("p",null,"Athenna uses the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/puzpuzpuz/cls-rtracer"},(0,a.kt)("inlineCode",{parentName:"a"},"cls-rtracer")),"\nplugin inside ",(0,a.kt)("inlineCode",{parentName:"p"},"HttpKernel"),". All the configurations\nthat ",(0,a.kt)("inlineCode",{parentName:"p"},"cls-rtracer")," supports can be set inside\n",(0,a.kt)("inlineCode",{parentName:"p"},"Path.config('http.ts')")," file in the ",(0,a.kt)("inlineCode",{parentName:"p"},"rTracer")," object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n  trace: true,\n  rTracer: {\n    echoHeader: false,\n    useHeader: false,\n    headerName: 'X-Request-Id',\n    useFastifyRequestId: false,\n  },\n}\n")),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"trace")," is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"cls-rtracer"),"\nplugin will be enabled and a UUID will be generated\nfor each request. This UUID will be available in\n",(0,a.kt)("inlineCode",{parentName:"p"},"request.id")," property of your routes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Log } from '@athenna/logger'\nimport { Route } from '@athenna/http'\n\nRoute.get('/', ({ request }) => {\n  Log.info(request.id) // 123e4567-e89b-12d3-a456-426614174000\n\n  return 'Hello World!'\n})\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Athenna request logger enabled by ",(0,a.kt)("inlineCode",{parentName:"p"},"http.logger"),"\nconfiguration will automatically log the request\nID for you.")),(0,a.kt)("h2",{id:"disabling-tracer"},"Disabling tracer"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"HttpKernel")," class will automatically disable the\nplugin registration if the package does not exist, so\nto disable tracer in Athenna you need to remove the\n",(0,a.kt)("inlineCode",{parentName:"p"},"cls-rtracer")," package from your application:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npm remove cls-rtracer\n")),(0,a.kt)("p",null,"You can also disable the tracer by setting ",(0,a.kt)("inlineCode",{parentName:"p"},"http.trace")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=\"Path.config('http.ts')\"",title:"\"Path.config('http.ts')\""},"export default {\n  trace: false,\n}\n")),(0,a.kt)("p",null,"Or by setting the ",(0,a.kt)("inlineCode",{parentName:"p"},"tracer")," option as ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," when booting the\nserver in ",(0,a.kt)("inlineCode",{parentName:"p"},"Ignite.httpServer()")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=\"Path.bootstrap('main.ts')\"",title:"\"Path.bootstrap('main.ts')\""},"import { Ignite } from '@athenna/core'\n\nconst ignite = await new Ignite().load(import.meta.url)\n\nawait ignite.httpServer({\n  trace: false, \ud83d\udc48\n})\n")))}d.isMDXComponent=!0}}]);