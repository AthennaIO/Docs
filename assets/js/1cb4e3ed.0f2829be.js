"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[6805],{5099:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>r});var i=t(5893),a=t(1151);const l={title:"Getting Started",sidebar_position:1,description:"See how to create models in Athenna Framework."},s="ORM: Getting Started",d={id:"orm/getting-started",title:"Getting Started",description:"See how to create models in Athenna Framework.",source:"@site/docs/orm/getting-started.mdx",sourceDirName:"orm",slug:"/orm/getting-started",permalink:"/docs/orm/getting-started",draft:!1,unlisted:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/orm/getting-started.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Getting Started",sidebar_position:1,description:"See how to create models in Athenna Framework."},sidebar:"tutorialSidebar",previous:{title:"ORM",permalink:"/docs/orm"},next:{title:"Testing",permalink:"/docs/testing"}},o={},r=[{value:"Introduction",id:"introduction",level:2},{value:"Generating models",id:"generating-models",level:2},{value:"Columns",id:"columns",level:2},{value:"Column options",id:"column-options",level:3},{value:"<code>name</code>",id:"name",level:4},{value:"<code>type</code>",id:"type",level:4},{value:"<code>length</code>",id:"length",level:4},{value:"<code>defaultTo</code>",id:"defaultto",level:4},{value:"<code>isPrimary</code>",id:"isprimary",level:4},{value:"<code>isHidden</code>",id:"ishidden",level:4},{value:"<code>isUnique</code>",id:"isunique",level:4},{value:"<code>isNullable</code>",id:"isnullable",level:4},{value:"<code>isIndex</code>",id:"isindex",level:4},{value:"<code>isSparse</code>",id:"issparse",level:4},{value:"<code>persist</code>",id:"persist",level:4},{value:"<code>isCreateDate</code>",id:"iscreatedate",level:4},{value:"<code>isUpdateDate</code>",id:"isupdatedate",level:4},{value:"<code>isDeleteDate</code>",id:"isdeletedate",level:4},{value:"Model conventions",id:"model-conventions",level:2},{value:"Table names",id:"table-names",level:3},{value:"Primary keys",id:"primary-keys",level:3},{value:"Default attributes values",id:"default-attributes-values",level:3},{value:"Database connections",id:"database-connections",level:3},{value:"Retrieving models",id:"retrieving-models",level:2},{value:"Building queries",id:"building-queries",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",div:"div",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"orm-getting-started",children:"ORM: Getting Started"}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:'Athenna has an object-relational mapper (ORM) that makes it enjoyable\nto interact with your database. When using the Athenna ORM, each database\ntable has a corresponding "Model" that is used to interact with that\ntable. In addition to retrieving records from the database table, the\nmodels allow you to insert, update, and delete records from the table\nas well.'}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Before getting started, be sure to configure a database connection in\nyour application's ",(0,i.jsx)(n.code,{children:"Path.config('database.ts')"})," configuration file.\nFor more information on configuring your database, check out\n",(0,i.jsx)(n.a,{href:"/docs/database/getting-started",children:(0,i.jsx)(n.code,{children:"the database configuration documentation."})})]})}),"\n",(0,i.jsx)(n.h2,{id:"generating-models",children:"Generating models"}),"\n",(0,i.jsxs)(n.p,{children:["To get started, let's create a model. Models typically live in the\n",(0,i.jsx)(n.code,{children:"app/models"})," directory (",(0,i.jsx)(n.code,{children:"Path.models()"}),") and extend the ",(0,i.jsx)(n.a,{href:"https://github.com/AthennaIO/Database/blob/develop/src/models/BaseModel.ts",children:(0,i.jsx)(n.code,{children:"BaseModel"})}),"\nclass. You may use the ",(0,i.jsx)(n.code,{children:"make:model"})," Artisan command to generate a\nnew model:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"node artisan make:model Flight\n"})}),"\n",(0,i.jsx)(n.h2,{id:"columns",children:"Columns"}),"\n",(0,i.jsxs)(n.p,{children:["You will have to define your database columns as properties on the\nclass and annotate them using the ",(0,i.jsx)(n.code,{children:"@Column()"})," annotation. Any property\nannotate with it could be distinguished between standard class properties\nand database columns. Let's see an example of defining the flight table\ncolumns as properties on the ",(0,i.jsx)(n.code,{children:"Flight"})," model:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Column, BaseModel } from '@athenna/database'\n\nexport class Flight extends BaseModel { \n  @Column()\n  public id: number\n\n  @Column()\n  public from: string\n\n  @Column()\n  public to: string\n\n  @Column({ isCreateDate: true })\n  public createdAt: Date\n\n  @Column({ isUpdateDate: true })\n  public updatedAt: Date\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"column-options",children:"Column options"}),"\n",(0,i.jsx)(n.h4,{id:"name",children:(0,i.jsx)(n.code,{children:"name"})}),"\n",(0,i.jsx)(n.p,{children:"Map which will be the name of your column in database:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Column({ name: 'my_name' })\npublic name: string\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The default value of this property will be the name of\nyour class property as ",(0,i.jsx)(n.strong,{children:"camelCase"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"type",children:(0,i.jsx)(n.code,{children:"type"})}),"\n",(0,i.jsx)(n.p,{children:"Map the type of your column. This property is usefull\nonly to synchronize your model with database:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Column({ type: Number })\npublic id: string\n"})}),"\n",(0,i.jsxs)(n.p,{children:["By default the type of your model will be set as the\ntype of your class property, in the example above, if\nwe remove the ",(0,i.jsx)(n.code,{children:"type"})," property, it would automatically\nbe set as ",(0,i.jsx)(n.code,{children:"String"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"length",children:(0,i.jsx)(n.code,{children:"length"})}),"\n",(0,i.jsx)(n.p,{children:"Map the column length in database. This property is\nusefull only when synchronizing your model with database:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Column({ length: 10 })\npublic name: string\n"})}),"\n",(0,i.jsx)(n.h4,{id:"defaultto",children:(0,i.jsx)(n.code,{children:"defaultTo"})}),"\n",(0,i.jsxs)(n.p,{children:["This property doesn't change the behavior in your database,\nthey are used only when the class property is undefined or\nnull before running your model ",(0,i.jsx)(n.code,{children:"create()"}),", ",(0,i.jsx)(n.code,{children:"createMany()"}),",\n",(0,i.jsx)(n.code,{children:"update()"})," and ",(0,i.jsx)(n.code,{children:"createOrUpdate()"})," methods:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Column({ defaultTo: null })\npublic deletedAt: Date\n"})}),"\n",(0,i.jsx)(n.div,{children:(0,i.jsxs)(n.p,{children:["The value set to ",(0,i.jsx)(n.code,{children:"defaulTo"})," property will only be used when\nthe value for the specified column was not provided when calling\nthe above methods and also when it was not set in static ",(0,i.jsx)(n.code,{children:"attributes()"}),"\nmethod of your model."]})}),"\n",(0,i.jsx)(n.h4,{id:"isprimary",children:(0,i.jsx)(n.code,{children:"isPrimary"})}),"\n",(0,i.jsx)(n.p,{children:"Set if the column is a primary key:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Column({ isPrimary: true })\npublic id: number\n"})}),"\n",(0,i.jsx)(n.h4,{id:"ishidden",children:(0,i.jsx)(n.code,{children:"isHidden"})}),"\n",(0,i.jsx)(n.p,{children:"Set if the column should be hidden when retrieving it from database:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Column({ isHidden: true })\npublic password: string\n"})}),"\n",(0,i.jsx)(n.h4,{id:"isunique",children:(0,i.jsx)(n.code,{children:"isUnique"})}),"\n",(0,i.jsx)(n.p,{children:"Set if the column needs to have a unique value in database:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Column({ isUnique: true })\npublic email: string\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"If you try to create duplicated values Athenna will throw an\nexception until it gets in your database. This means that you\nmigration could have or not the unique index defined"})}),"\n",(0,i.jsx)(n.h4,{id:"isnullable",children:(0,i.jsx)(n.code,{children:"isNullable"})}),"\n",(0,i.jsx)(n.p,{children:"Set if the column is nullable or not:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Column({ isNullable: false })\npublic name: string\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Just like ",(0,i.jsx)(n.code,{children:"isUnique"})," property, if ",(0,i.jsx)(n.code,{children:"isNullable"})," is set to false\nand you try to create a model with null or undefined ",(0,i.jsx)(n.code,{children:"name"}),", it\nwill throw an exception."]})}),"\n",(0,i.jsx)(n.h4,{id:"isindex",children:(0,i.jsx)(n.code,{children:"isIndex"})}),"\n",(0,i.jsx)(n.p,{children:"Set if the column is an index:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Column({ isIndex: true })\npublic email: string\n"})}),"\n",(0,i.jsx)(n.h4,{id:"issparse",children:(0,i.jsx)(n.code,{children:"isSparse"})}),"\n",(0,i.jsx)(n.p,{children:"Set if the column is an index sparse:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Column({ isSparse: true })\npublic email: string\n"})}),"\n",(0,i.jsx)(n.h4,{id:"persist",children:(0,i.jsx)(n.code,{children:"persist"})}),"\n",(0,i.jsxs)(n.p,{children:["Set if the column should be persist in database\nor not. If set as ",(0,i.jsx)(n.code,{children:"false"}),", Athenna will remove this\ncolumn from operations like create or update, but it\nwill still me available in listing operations:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Column({ persist: false })\npublic name: string\n"})}),"\n",(0,i.jsx)(n.h4,{id:"iscreatedate",children:(0,i.jsx)(n.code,{children:"isCreateDate"})}),"\n",(0,i.jsxs)(n.p,{children:["Set if the column is a createdAt column. If this option\nis ",(0,i.jsx)(n.code,{children:"true"}),", Athenna will automatically set a ",(0,i.jsx)(n.code,{children:"new Date()"}),"\nvalue in the column when creating it:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Column({ isCreateDate: true })\npublic createdAt: Date\n"})}),"\n",(0,i.jsx)(n.h4,{id:"isupdatedate",children:(0,i.jsx)(n.code,{children:"isUpdateDate"})}),"\n",(0,i.jsxs)(n.p,{children:["Set if the column is an updatedAt column. If this option\nis ",(0,i.jsx)(n.code,{children:"true"}),", Athenna will automatically set a ",(0,i.jsx)(n.code,{children:"new Date()"}),"\nvalue in the column when creating it:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Column({ isUpdateDate: true })\npublic updatedAt: Date\n"})}),"\n",(0,i.jsx)(n.h4,{id:"isdeletedate",children:(0,i.jsx)(n.code,{children:"isDeleteDate"})}),"\n",(0,i.jsxs)(n.p,{children:["Set if the column is a deletedAt column and also if the model\nis using soft delete approach. If this option is ",(0,i.jsx)(n.code,{children:"true"}),", Athenna\nwill automatically set a ",(0,i.jsx)(n.code,{children:"new Date()"})," value in the column when\ndeleting it:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Column({ isDeleteDate: true })\npublic deletedAt: Date\n"})}),"\n",(0,i.jsx)(n.h2,{id:"model-conventions",children:"Model conventions"}),"\n",(0,i.jsxs)(n.p,{children:["Models generated by the ",(0,i.jsx)(n.code,{children:"make:model"})," command will be placed in the\n",(0,i.jsx)(n.code,{children:"Path.models()"})," directory. Let's examine a basic model class and\ndiscuss some of Model's key conventions:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { BaseModel } from '@athenna/database'\n\nexport class Flight extends BaseModel {\n  @Column()\n  public id: number\n\n  public static attributes(): Partial<Flight> {\n    return {}\n  }\n\n  public static async definition(): Promise<Partial<Flight>> {\n    return {\n      id: this.faker.number.int()\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"table-names",children:"Table names"}),"\n",(0,i.jsxs)(n.p,{children:["After glancing at the example above, you may have noticed that we\ndid not tell the model which database table corresponds to our ",(0,i.jsx)(n.code,{children:"Flight"}),'\nmodel. By convention, the "snake_case", plural name of the class will\nbe used as the table name unless another name is explicitly specified.\nSo, in this case, the model will assume the ',(0,i.jsx)(n.code,{children:"Flight"})," model stores records\nin the ",(0,i.jsx)(n.code,{children:"flights"})," table, while an ",(0,i.jsx)(n.code,{children:"AirTrafficController"})," model would store\nrecords in an ",(0,i.jsx)(n.code,{children:"air_traffic_controllers"})," table."]}),"\n",(0,i.jsxs)(n.p,{children:["If your model's corresponding database table does not fit this convention, you may manually specify the model's table name by\ndefining a static getter ",(0,i.jsx)(n.code,{children:"table"})," on the model:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { BaseModel } from '@athenna/database'\n\nexport class Flight extends BaseModel {\n  public static table() {\n    return 'my_flights'\n  }\n\n  /*...*/\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"primary-keys",children:"Primary keys"}),"\n",(0,i.jsxs)(n.p,{children:["The model will also assume that each model's corresponding database\ntable has a primary key column named ",(0,i.jsx)(n.code,{children:"id"})," if using a SQL driver and\n",(0,i.jsx)(n.code,{children:"_id"})," if using mongo driver. If necessary, you may define\na property ",(0,i.jsx)(n.code,{children:"isMainPrimary"})," as true in one of your model columns to\nspecify a different column that serves as your model's main primary\nkey:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Column, BaseModel } from '@athenna/database'\n\nexport class Flight extends BaseModel {\n  @Column({ isMainPrimary: true })\n  public id: number\n\n  /*...*/\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"default-attributes-values",children:"Default attributes values"}),"\n",(0,i.jsxs)(n.p,{children:["By default, a newly instantiated model instance will not contain any\nattribute values. If you would like to define the default values\nfor some of your model's attributes, you may define a static method\n",(0,i.jsx)(n.code,{children:"attributes()"})," on your model:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Uuid } from '@athenna/common'\nimport { BaseModel } from '@athenna/database'\n\nexport class Flight extends BaseModel {\n  public static attributes(): Partial<Flight> {\n    return {\n      id: Uuid.generate() \n    }\n  }\n\n  /*...*/\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["As you can see we are defining an ",(0,i.jsx)(n.code,{children:"id"})," property in our static method\n",(0,i.jsx)(n.code,{children:"attributes()"}),". This property will have the value of a generated\nuuid randomly everytime that Athenna calls the ",(0,i.jsx)(n.code,{children:"attributes()"})," method.\nAthenna will call the ",(0,i.jsx)(n.code,{children:"attributes()"})," method everytime that ",(0,i.jsx)(n.code,{children:"create()"}),",\n",(0,i.jsx)(n.code,{children:"createMany()"}),", ",(0,i.jsx)(n.code,{children:"update()"})," and ",(0,i.jsx)(n.code,{children:"createOrUpdate()"})," methods are called,\nthis means that a new uuid will be generated for each call:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Flight } from '#app/models/Flight'\n\nconst flight1 = await Flight.create()\nconst flight2 = await Flight.query().create()\n\nconsole.log(flight1.id) // 43bf66ec-658a-4f59-8f89-2aac5ae96e6a\nconsole.log(flight2.id) // cbe35c9c-60f3-11ed-9b6a-0242ac120002\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["But always remember that if you have already set the property in\none of these methods, the ",(0,i.jsx)(n.code,{children:"attributes()"})," method will not overwrite\nthem:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Flight } from '#app/models/Flight'\n\n// Setting my own id attribute\nconst flight = await Flight.create({ \n  id: '299dabf8-60f4-11ed-9b6a-0242ac120002' \n})\n\nconsole.log(flight.id) // 299dabf8-60f4-11ed-9b6a-0242ac120002\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"database-connections",children:"Database connections"}),"\n",(0,i.jsxs)(n.p,{children:["By default, all models will use the default database connection that\nis configured for your application. If you would like to specify a\ndifferent connection that should be used when interacting with a\nparticular model, you should define a static ",(0,i.jsx)(n.code,{children:"connection()"})," method on\nthe model:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { BaseModel } from '@athenna/database'\n\nexport class Article extends BaseModel {\n  public static connection() {\n    return 'mysql'\n  }\n\n  /*...*/\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"retrieving-models",children:"Retrieving models"}),"\n",(0,i.jsxs)(n.p,{children:["Once you have created a model and its associated database table, you\nare ready to start retrieving data from your database. You can think\nof each model as a powerful query builder allowing you to fluently\nquery the database table associated with the model. The model's\n",(0,i.jsx)(n.code,{children:"findMany()"})," method will retrieve all the records from the model's\nassociated database table:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Flight } from '#app/models/Flight'\n\nconst flights = await Flight.findMany()\n\nflights.forEach(flight => console.log(flight.name))\n"})}),"\n",(0,i.jsx)(n.h3,{id:"building-queries",children:"Building queries"}),"\n",(0,i.jsx)(n.p,{children:"Coming soon..."})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>s});var i=t(7294);const a={},l=i.createContext(a);function s(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);