"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[5689],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=d(t),u=i,c=h["".concat(l,".").concat(u)]||h[u]||m[u]||o;return t?a.createElement(c,r(r({ref:n},p),{},{components:t})):a.createElement(c,r({ref:n},p))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var d=2;d<o;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},4890:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var a=t(7462),i=t(3366),o=(t(7294),t(3905)),r=["components"],s={sidebar_position:3,id:"relationships",title:"Relationships",hide_title:!0,hide_table_of_contents:!0,tags:["ORM","Database","Relationships"]},l=void 0,d={unversionedId:"orm/relationships",id:"orm/relationships",title:"Relationships",description:"\ud83c\udfe0",source:"@site/docs/orm/relationships.mdx",sourceDirName:"orm",slug:"/orm/relationships",permalink:"/docs/orm/relationships",editUrl:"https://github.com/AthennaIO/Docs/docs/orm/relationships.mdx",tags:[{label:"ORM",permalink:"/docs/tags/orm"},{label:"Database",permalink:"/docs/tags/database"},{label:"Relationships",permalink:"/docs/tags/relationships"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"relationships",title:"Relationships",hide_title:!0,hide_table_of_contents:!0,tags:["ORM","Database","Relationships"]},sidebar:"tutorialSidebar",previous:{title:"Criterias",permalink:"/docs/orm/criterias"},next:{title:"Resources",permalink:"/docs/orm/resources"}},p=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Defining relationships",id:"id-defining-relationships",children:[{value:"Has One",id:"id-has-one",children:[{value:"Defining the inverse side of the has one",id:"id-defining-the-inverse-side-of-the-has-one",children:[],level:4}],level:3},{value:"Has Many",id:"id-has-many",children:[{value:"Defining the inverse side of the has many",id:"id-defining-the-inverse-side-of-the-has-many",children:[],level:4}],level:3},{value:"Belongs To Many",id:"id-belongs-to-many",children:[{value:"Table structure",id:"id-table-structure",children:[],level:4},{value:"Model structure",id:"id-model-structure",children:[],level:4},{value:"Defining the inverse side of the belongs to many",id:"id-defining-the-inverse-side-of-the-belongs-to-many",children:[],level:4},{value:"Retrieving pivot table columns",id:"id-retrieving-pivot-table-columns",children:[],level:4}],level:3}],level:2},{value:"Querying relationships",id:"id-querying-relationships",children:[{value:"Eager loading",id:"id-eager-loading",children:[],level:3},{value:"Sub-queries in relationships",id:"id-sub-queries-in-relationships",children:[],level:3},{value:"Loading nested relations",id:"id-loading-nested-relations",children:[],level:3},{value:"Lazy eager loading",id:"id-lazy-eager-loading",children:[],level:3},{value:"Querying relationships existence",id:"id-querying-relationships-existence",children:[],level:3}],level:2},{value:"Defining relationships queries in models",id:"id-defining-relationships-queries-in-models",children:[],level:2},{value:"Inserting, updating &amp; deleting related tables",id:"id-inserting-updating-and-deleting-related-tables",children:[{value:"The <code>create</code> method",id:"id-the-create-method",children:[],level:3},{value:"The <code>update</code> method",id:"id-the-update-method",children:[],level:3},{value:"Manipulating relationships with instance methods",id:"id-manipulating-relationships-with-instance-methods",children:[],level:3},{value:"Belongs to relationship",id:"id-belongs-to-relationship",children:[],level:3},{value:"Many to many relationships",id:"id-many-to-many-relationships",children:[{value:"Using instance properties in many-to-many",id:"id-using-instance-properties-in-many-to-many",children:[],level:4}],level:3}],level:2}],m={toc:p};function h(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("nav",{"aria-label":"breadcrumbs"},(0,o.kt)("ul",{class:"breadcrumbs"},(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link"},"ORM")),(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link",href:"/docs/orm/relationships"},"Relationships")))),(0,o.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,o.kt)("h1",{id:"orm-relationships"},"ORM: Relationships"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"introduction"},(0,o.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"defining-relationships"},(0,o.kt)("a",{parentName:"h4",href:"#id-defining-relationships"},"Defining relationships")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"has-one"},(0,o.kt)("a",{parentName:"h4",href:"#id-has-one"},"Has One"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"has-many"},(0,o.kt)("a",{parentName:"h4",href:"#id-has-many"},"Has Many"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"belongs-to-many"},(0,o.kt)("a",{parentName:"h4",href:"#id-belongs-to-many"},"Belongs To Many"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"querying-relationships"},(0,o.kt)("a",{parentName:"h4",href:"#id-querying-relationships"},"Querying relationships")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"eager-loading"},(0,o.kt)("a",{parentName:"h4",href:"#id-eager-loading"},"Eager loading"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"sub-queries-in-relationships"},(0,o.kt)("a",{parentName:"h4",href:"#id-sub-queries-in-relationships"},"Sub-queries in relationships"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"loading-nested-relations"},(0,o.kt)("a",{parentName:"h4",href:"#id-loading-nested-relations"},"Loading nested relations"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"lazy-eager-loading"},(0,o.kt)("a",{parentName:"h4",href:"#id-lazy-eager-loading"},"Lazy eager loading"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"querying-relationships-existence"},(0,o.kt)("a",{parentName:"h4",href:"#id-querying-relationships-existence"},"Querying relationships existence"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"defining-relationships-queries-in-models"},(0,o.kt)("a",{parentName:"h4",href:"#id-defining-relationships-queries-in-models"},"Defining relationships queries in models"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"inserting-updating-and-deleting-related-tables"},(0,o.kt)("a",{parentName:"h4",href:"#id-inserting-updating-and-deleting-related-tables"},"Inserting, updating and deleting related tables")))),(0,o.kt)("h2",{id:"id-introduction"},"Introduction"),(0,o.kt)("p",null,"Database tables are often related to one another. For example, a blog post may have many comments or an order could be related to the user who placed it.\nAthenna makes managing and working with these relationships easy, and supports a variety of common relationships:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/orm/relationships#id-has-one"},(0,o.kt)("inlineCode",{parentName:"a"},"Has One"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/orm/relationships#id-has-many"},(0,o.kt)("inlineCode",{parentName:"a"},"Has Many"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/orm/relationships#id-belongs-to-many"},(0,o.kt)("inlineCode",{parentName:"a"},"Belongs To Many")))),(0,o.kt)("h2",{id:"id-defining-relationships"},"Defining relationships"),(0,o.kt)("p",null,"Athenna relationships are defined in the static ",(0,o.kt)("inlineCode",{parentName:"p"},"schema")," method using the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/AthennaIO/Database/blob/develop/src/Relations/Relation.js"},(0,o.kt)("inlineCode",{parentName:"a"},"Relation")),"\nclass in your model classes. Let's learn how to define each type of relationship supported by Athenna."),(0,o.kt)("h3",{id:"id-has-one"},"Has One"),(0,o.kt)("p",null,"A one-to-one relationship is a very basic type of database relationship. For example, a ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," model might be associated with one ",(0,o.kt)("inlineCode",{parentName:"p"},"Phone")," model. To define\nthis relationship, we will place a ",(0,o.kt)("inlineCode",{parentName:"p"},"phone")," property in the ",(0,o.kt)("inlineCode",{parentName:"p"},"schema")," method on the ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," model. The ",(0,o.kt)("inlineCode",{parentName:"p"},"phone")," property should call the ",(0,o.kt)("inlineCode",{parentName:"p"},"hasOne")," method from the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Relation")," class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Phone } from '#app/Models/Phone'\nimport { Model, Column, Relation } from '@athenna/database'\n\nexport class User extends Model {\n  static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      name: Column.string(),\n      phoneId: Column.integer('phone_id'),\n      phone: Relation.hasOne(Phone, 'user'),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n  }\n\n  /*...*/\n}\n")),(0,o.kt)("p",null,"The first argument passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"hasOne")," method is the related model class and the second is the inverse side of the relation in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Phone")," class.\nOnce the relationship is defined, we may retrieve the related record using the ",(0,o.kt)("a",{parentName:"p",href:"/docs/orm/relationships#id-eager-loading"},(0,o.kt)("inlineCode",{parentName:"a"},"with method"))," of the model\nquery builder, the ",(0,o.kt)("a",{parentName:"p",href:"/docs/orm/relationships#id-lazy-eager-loading"},(0,o.kt)("inlineCode",{parentName:"a"},"load method"))," of the model instance or the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/orm/relationships#id-defining-relationships-queries-in-models"},(0,o.kt)("inlineCode",{parentName:"a"},"relationships model queries")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Using with method"',title:'"Using',with:!0,'method"':!0},"const user = await User.query().with('phone').find()\nconst phone = user.phone\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Using load method"',title:'"Using',load:!0,'method"':!0},"const user = await User.find()\n\nawait user.load('phone')\n\nconst phone = user.phone\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Using relationships model queries"',title:'"Using',relationships:!0,model:!0,'queries"':!0},"const user = await User.find()\n\nconst phone = await user.phoneQuery().find()\n")),(0,o.kt)("p",null,"Athenna determines the foreign key of the relationship based on the parent model name. In this case, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Phone")," model is automatically assumed to have a\n",(0,o.kt)("inlineCode",{parentName:"p"},"userId")," foreign key. If you wish to override this convention, you may construct your relation from scratch with the ",(0,o.kt)("inlineCode",{parentName:"p"},"Relation")," class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Phone } from '#app/Models/Phone'\nimport { Model, Column, Relation } from '@athenna/database'\n\nexport class User extends Model {\n  static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      name: Column.string(),\n      phoneId: Column.integer('phone_id'),\n      phone: Relation.type('hasOne')\n                      .model(Phone)\n                      .inverseSide('user')\n                      .foreignKey('user_id') // <-\n                      .get(),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n  }\n\n  /*...*/\n}\n")),(0,o.kt)("p",null,"Additionally, Athenna assumes that the foreign key should have a value matching the primary key column of the parent. In other words, Athenna will look\nfor the value of the user's ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," column in the ",(0,o.kt)("inlineCode",{parentName:"p"},"userId")," column of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Phone")," record. If you would like the relationship to use a primary key value other\nthan id or your model's static getter ",(0,o.kt)("inlineCode",{parentName:"p"},"primaryKey"),", you may pass a ",(0,o.kt)("inlineCode",{parentName:"p"},"primaryKey")," method to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Relation")," class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Phone } from '#app/Models/Phone'\nimport { Model, Column, Relation } from '@athenna/database'\n\nexport class User extends Model {\n  static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      name: Column.string(),\n      phoneId: Column.integer('phone_id'),\n      phone: Relation.type('hasOne')\n                      .model(Phone)\n                      .inverseSide('user')\n                      .primaryKey('id') // <-\n                      .foreignKey('user_id')\n                      .get(),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n  }\n\n  /*...*/\n}\n")),(0,o.kt)("h4",{id:"id-defining-the-inverse-side-of-the-has-one"},"Defining the inverse side of the has one"),(0,o.kt)("p",null,"So, we can access the ",(0,o.kt)("inlineCode",{parentName:"p"},"Phone")," model from our ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," model. Next, let's define a relationship on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Phone")," model that will let us access the ",(0,o.kt)("inlineCode",{parentName:"p"},"user")," that\nowns the ",(0,o.kt)("inlineCode",{parentName:"p"},"phone"),". We can define the inverse of a ",(0,o.kt)("inlineCode",{parentName:"p"},"hasOne")," relationship using the ",(0,o.kt)("inlineCode",{parentName:"p"},"belongsTo")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { User } from '#app/Models/Phone'\nimport { Model, Column, Relation } from '@athenna/database'\n\nexport class Phone extends Model {\n  static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      number: Column.string(),\n      userId: Column.integer('user_id'),\n      user: Relation.belongsTo(User, 'phone'),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n  }\n\n  /*...*/\n}\n")),(0,o.kt)("p",null,"When invoking the ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," method with the ",(0,o.kt)("inlineCode",{parentName:"p"},"user")," in first param, Athenna will attempt to find a ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," model that has an ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," which matches the ",(0,o.kt)("inlineCode",{parentName:"p"},"userId"),"\ncolumn on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Phone")," model."),(0,o.kt)("p",null,"Athenna determines the foreign key name by examining the name of the relationship method and suffixing the method name with ",(0,o.kt)("inlineCode",{parentName:"p"},"Id"),". So, in this case,\nAthenna assumes that the ",(0,o.kt)("inlineCode",{parentName:"p"},"Phone")," model has a ",(0,o.kt)("inlineCode",{parentName:"p"},"userId")," column. However, if the foreign key on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Phone")," model is not ",(0,o.kt)("inlineCode",{parentName:"p"},"userId"),", you may build your relation\nfrom scratch to set it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { User } from '#app/Models/Phone'\nimport { Model, Column, Relation } from '@athenna/database'\n\nexport class Phone extends Model {\n  static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      number: Column.string(),\n      userId: Column.integer('user_id'),\n      user: Relation.type('belongsTo')\n                      .model(User)\n                      .inverseSide('phone')\n                      .foreignKey('phone_id') // <-\n                      .get(),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n  }\n\n  /*...*/\n}\n")),(0,o.kt)("p",null,"If the parent model does not use ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," as its primary key, or you wish to find the associated model using a different column, you may pass a ",(0,o.kt)("inlineCode",{parentName:"p"},"primaryKey"),"\nmethod to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Relation")," class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { User } from '#app/Models/Phone'\nimport { Model, Column, Relation } from '@athenna/database'\n\nexport class Phone extends Model {\n  static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      number: Column.string(),\n      userId: Column.integer('user_id'),\n      user: Relation.type('belongsTo')\n                      .model(User)\n                      .inverseSide('phone')\n                      .primaryKey('id') // <-\n                      .foreignKey('phone_id')\n                      .get(),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n  }\n\n  /*...*/\n}\n")),(0,o.kt)("h3",{id:"id-has-many"},"Has Many"),(0,o.kt)("p",null,"A has many relationship is used to define relationships where a single model is the parent to one or more child models. For example, a blog post may have\nan infinite number of comments. Like all other Athenna ORM relationships, has many relationships are defined by placing the relation property in the ",(0,o.kt)("inlineCode",{parentName:"p"},"schema"),"\nmethod:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Comment } from '#app/Models/Comment'\nimport { Model, Column, Relation } from '@athenna/database'\n\nexport class Post extends Model {\n  static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      title: Column.string(),\n      comments: Relation.hasMany(Comment, 'post'),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n  }\n\n  /*...*/\n}\n")),(0,o.kt)("p",null,"Remember, Athenna will automatically determine the proper foreign key column for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Comment"),' model. By convention, Athenna will take the "camelCase" name\nof the parent model and suffix it with ',(0,o.kt)("inlineCode",{parentName:"p"},"Id"),". So, in this example, Athenna will assume the foreign key column on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Comment")," model is ",(0,o.kt)("inlineCode",{parentName:"p"},"postId"),"."),(0,o.kt)("p",null,"Once the relationship is defined, we may retrieve the related record using the ",(0,o.kt)("a",{parentName:"p",href:"/docs/orm/relationships#id-eager-loading"},(0,o.kt)("inlineCode",{parentName:"a"},"with method"))," of the model\nquery builder, the ",(0,o.kt)("a",{parentName:"p",href:"/docs/orm/relationships#id-lazy-eager-loading"},(0,o.kt)("inlineCode",{parentName:"a"},"load method"))," of the model instance or the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/orm/relationships#id-defining-relationships-queries-in-models"},(0,o.kt)("inlineCode",{parentName:"a"},"relationships model queries")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Using with method"',title:'"Using',with:!0,'method"':!0},"const post = await Post.query().with('comments').find()\nconst comments = post.comments\n\ncomments.forEach(comment => {\n    //\n})\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Using load method"',title:'"Using',load:!0,'method"':!0},"const post = await Post.find()\n\nawait post.load('user')\n\nconst user = post.user\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Using relationships model queries"',title:'"Using',relationships:!0,model:!0,'queries"':!0},"const post = await Post.find()\n\nconst user = await post.userQuery().find()\n")),(0,o.kt)("p",null,"Like the ",(0,o.kt)("inlineCode",{parentName:"p"},"hasOne")," method, you may also override the foreign and local keys by building the relationship from scratch:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      title: Column.string(),\n      comments: Relation.type('hasMany')\n                      .model(Comment)\n                      .inverseSide('post')\n                      .primaryKey('id') // <-\n                      .foreignKey('post_id') // <-\n                      .get(),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n}\n")),(0,o.kt)("h4",{id:"id-defining-the-inverse-side-of-the-has-many"},"Defining the inverse side of the has many"),(0,o.kt)("p",null,"Now that we can access all of a post's comments, let's define a relationship to allow a comment to access its parent post. To define the inverse of a\n",(0,o.kt)("inlineCode",{parentName:"p"},"hasMany")," relationship, define a relationship property on the child model ",(0,o.kt)("inlineCode",{parentName:"p"},"schema")," which calls the ",(0,o.kt)("inlineCode",{parentName:"p"},"belongsTo")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Post } from '#app/Models/Post'\nimport { Model, Column, Relation } from '@athenna/database'\n\nexport class Comment extends Model {\n  static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      content: Column.string(),\n      postId: Column.string(),\n      post: Relation.belongsTo(Post, 'comments'),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n  }\n\n  /*...*/\n}\n")),(0,o.kt)("p",null,"Once the relationship has been defined, we can retrieve a comment's parent post using the ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Comment } from '#app/Models/Comment'\n\nconst comment = await Comment.query().with('post').find()\n\nconsole.log(comment.post.title)\n")),(0,o.kt)("p",null,"In the example above, Athenna will attempt to find a ",(0,o.kt)("inlineCode",{parentName:"p"},"Post")," model that has an ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," which matches the ",(0,o.kt)("inlineCode",{parentName:"p"},"postId")," column on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Comment")," model."),(0,o.kt)("p",null,'Athenna determines the default foreign key name by examining the name of the relationship property and suffixing the method name with the name of the\nparent model\'s primary key column in "camelCase" style. So, in this example, Athenna will assume the ',(0,o.kt)("inlineCode",{parentName:"p"},"Post")," model's foreign key on the ",(0,o.kt)("inlineCode",{parentName:"p"},"comments")," table\nis ",(0,o.kt)("inlineCode",{parentName:"p"},"postId"),"."),(0,o.kt)("p",null,"However, if the foreign key for your relationship does not follow these conventions, you may create your ",(0,o.kt)("inlineCode",{parentName:"p"},"belongsTo")," relation from scratch:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      content: Column.string(),\n      postId: Column.string(),\n      post: Relation.type('belongsTo')\n                    .model(Post)\n                    .inverseSide('comments')\n                    .foreignKey('post_id') // <-\n                    .get(),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n}\n")),(0,o.kt)("p",null,"If your parent model does not use ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," as its primary key, or you wish to find the associated model using a different column, you may use the ",(0,o.kt)("inlineCode",{parentName:"p"},"primaryKey")," method\nin the relation construction:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      content: Column.string(),\n      postId: Column.string(),\n      post: Relation.type('belongsTo')\n                    .model(Post)\n                    .inverseSide('comments')\n                    .primaryKey('id') // <-\n                    .foreignKey('post_id')\n                    .get(),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n}\n")),(0,o.kt)("h3",{id:"id-belongs-to-many"},"Belongs To Many"),(0,o.kt)("p",null,"Belongs to many relations are slightly more complicated than ",(0,o.kt)("inlineCode",{parentName:"p"},"hasOne")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"hasMany"),' relationships. An example of a belongs-to-many (many-to-many)\nrelationship is a user that has many roles and those roles are also shared by other users in the application. For example, a user may be assigned\nthe role of "Author" and "Editor"; however, those roles may also be assigned to other users as well. So, a user has many roles and a role has many\nusers.'),(0,o.kt)("h4",{id:"id-table-structure"},"Table structure"),(0,o.kt)("p",null,"To define this relationship, three database tables are needed: ",(0,o.kt)("inlineCode",{parentName:"p"},"users"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"roles"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"role_user"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"role_user")," table is derived from the alphabetical\norder of the related model names and contains ",(0,o.kt)("inlineCode",{parentName:"p"},"userId")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"roleId")," columns. This table is used as an intermediate table linking the users and roles."),(0,o.kt)("p",null,"Remember, since a role can belong to many users, we cannot simply place a ",(0,o.kt)("inlineCode",{parentName:"p"},"userId")," column on the ",(0,o.kt)("inlineCode",{parentName:"p"},"roles")," table. This would mean that a role could only\nbelong to a single user. In order to provide support for roles being assigned to multiple users, the ",(0,o.kt)("inlineCode",{parentName:"p"},"role_user")," table is needed. We can summarize the\nrelationship's table structure like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"users\n    id - integer\n    name - string\n\nroles\n    id - integer\n    name - string\n\nroles_users\n    userId - integer\n    roleId - integer\n")),(0,o.kt)("h4",{id:"id-model-structure"},"Model structure"),(0,o.kt)("p",null,"Many-to-many relationships are defined by writing a property using the ",(0,o.kt)("inlineCode",{parentName:"p"},"belongsToMany")," method from ",(0,o.kt)("inlineCode",{parentName:"p"},"Relation")," class. For example, let's define a ",(0,o.kt)("inlineCode",{parentName:"p"},"roles"),"\nproperty on our ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," model schema. The first argument passed to this method is the model of the related table and the second argument is the inverse\nside of the relation in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Role")," model:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Role } from '#app/Models/Role'\nimport { Model, Column, Relation } from '@athenna/database'\n\nexport class User extends Model {\n  static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      name: Column.string(),\n      roles: Relation.belongsToMany(Role, 'users'),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n  }\n\n  /*...*/\n}\n")),(0,o.kt)("p",null,"Once the relationship is defined, we may retrieve the related record using the ",(0,o.kt)("a",{parentName:"p",href:"/docs/orm/relationships#id-eager-loading"},(0,o.kt)("inlineCode",{parentName:"a"},"with method"))," of the model\nquery builder, the ",(0,o.kt)("a",{parentName:"p",href:"/docs/orm/relationships#id-lazy-eager-loading"},(0,o.kt)("inlineCode",{parentName:"a"},"load method"))," of the model instance or the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/orm/relationships#id-defining-relationships-queries-in-models"},(0,o.kt)("inlineCode",{parentName:"a"},"relationships model queries")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Using with method"',title:'"Using',with:!0,'method"':!0},"const user = await User.query().with('roles').find()\nconst roles = user.roles\n\nroles.forEach(role => {\n    //\n})\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Using load method"',title:'"Using',load:!0,'method"':!0},"const user = await User.find()\n\nawait user.load('roles')\n\nconst roles = user.roles\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Using relationships model queries"',title:'"Using',relationships:!0,model:!0,'queries"':!0},"const user = await User.find()\nconst roles = await user.rolesQuery().findMany()\n")),(0,o.kt)("p",null,"To determine the table name of the relationship's intermediate table, Athenna will join the two related model names in alphabetical order. However, you\nare free to override this convention. You may do so by passing a third argument to the ",(0,o.kt)("inlineCode",{parentName:"p"},"belongsToMany")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      name: Column.string(),\n      roles: Relation.belongsToMany(Role, 'users', 'users_roles'),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n}\n")),(0,o.kt)("p",null,"In addition to customizing the name of the intermediate table, you may also customize the column names of the keys on the table by build the many-to-many\nrelation from scratch. The ",(0,o.kt)("inlineCode",{parentName:"p"},"pivotLocalForeignKey")," method defines the foreign key name of the model on which you are defining the relationship, while the\n",(0,o.kt)("inlineCode",{parentName:"p"},"pivotRelationForeignKey")," method defines the foreign key name of the model that you are joining to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      name: Column.string(),\n      roles: Relation.type('belongsToMany')\n                     .model(Role)\n                     .inverseSide('users')\n                     .pivotTable('users_roles')\n                     .pivotLocalForeignKey('user_id')\n                     .pivotRelationForeignKey('role_id')\n                     .get(),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n}\n")),(0,o.kt)("h4",{id:"id-defining-the-inverse-side-of-the-belongs-to-many"},"Defining the inverse side of the belongs to many"),(0,o.kt)("p",null,'To define the "inverse" of a belongs-to-many relationship, you should define a property on the related model which also returns the result of the\n',(0,o.kt)("inlineCode",{parentName:"p"},"belongsToMany")," method. To complete our user / role example, let's define the ",(0,o.kt)("inlineCode",{parentName:"p"},"users")," property on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Role")," model:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { User } from '#app/Models/User'\nimport { Model, Column, Relation } from '@athenna/database'\n\nexport class Role extends Model {\n  static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      name: Column.string(),\n      users: Relation.belongsToMany(User, 'roles'),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n  }\n\n  /*...*/\n}\n")),(0,o.kt)("p",null,"As you can see, the relationship is defined exactly the same as its ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," model counterpart with the exception of referencing the ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," model and a different\ninverse side. Since we're reusing the ",(0,o.kt)("inlineCode",{parentName:"p"},"belongsToMany"),' method, all the usual table and key customization options are available when defining the "inverse" of\nbelongs-to-many relationships.'),(0,o.kt)("h4",{id:"id-retrieving-pivot-table-columns"},"Retrieving pivot table columns"),(0,o.kt)("p",null,"As you have already learned, working with belongs-to-many relations requires the presence of an pivot table. Athenna provides some very helpful ways\nof interacting with this table. For example, let's assume our ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," model has many ",(0,o.kt)("inlineCode",{parentName:"p"},"Role")," models that it is related to. After loading the relationship,\nusing the ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," method we may access the intermediate table using the ",(0,o.kt)("inlineCode",{parentName:"p"},"pivot")," attribute on the models:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.query().with('roles').find()\nconst roles = user.roles\n\nroles.forEach(role => console.log(role.pivot.id))\n")),(0,o.kt)("p",null,"Notice that each ",(0,o.kt)("inlineCode",{parentName:"p"},"Role")," model we retrieve is automatically assigned a ",(0,o.kt)("inlineCode",{parentName:"p"},"pivot")," attribute. This attribute contains all the data representing the pivot table."),(0,o.kt)("h2",{id:"id-querying-relationships"},"Querying relationships"),(0,o.kt)("h3",{id:"id-eager-loading"},"Eager loading"),(0,o.kt)("p",null,"As you can see, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," method to eager load your relationships in your model. In addition, when you include a model you can make more\nqueries using the relation model inside the father model."),(0,o.kt)("p",null,"For example, imagine a blog application in which a ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," model has many associated ",(0,o.kt)("inlineCode",{parentName:"p"},"Post")," models. You may query the ",(0,o.kt)("inlineCode",{parentName:"p"},"posts")," relationship and then use all\nthe instance methods available from ",(0,o.kt)("inlineCode",{parentName:"p"},"Post")," model like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.query().with('posts').find()\nconst posts = user.posts\n\nfor (const post of posts) {\n    post.name = 'The incredible Daniel Luna!'\n\n    await post.save()\n}\n")),(0,o.kt)("h3",{id:"id-sub-queries-in-relationships"},"Sub-queries in relationships"),(0,o.kt)("p",null,"Also, the ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," method can receive a closure as second parameter where you can define a lot of queries for when including your relationships. In the\nexample bellow we are going to load all the users and include the active posts with all it comments:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.query()\n    .with('posts', query => query.with('comments').where('active', 1))\n    .findMany()\n\nconst activePosts = user.posts\n\nactivePosts.forEach(post => {\n    const comments = post.comments\n\n    //\n})\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," value in ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," closure will be an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"ModelQueryBuilder")," but of the relation. So you can use all its methods too."))),(0,o.kt)("h3",{id:"id-loading-nested-relations"},"Loading nested relations"),(0,o.kt)("p",null,"Nested relations are loaded via ",(0,o.kt)("strong",{parentName:"p"},"dot notation"),". We are going to simplify the above example loading the relationships using ",(0,o.kt)("strong",{parentName:"p"},"dot notation"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.query()\n    .with('posts.comments', query => query.where('active', 1))\n    .findMany()\n")),(0,o.kt)("p",null,"Now your ",(0,o.kt)("inlineCode",{parentName:"p"},"user")," constant will have this data structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n    id: 1,\n    name: 'Jo\xe3o Lenon',\n    email: 'joao.lenon@zenvia.com',\n    posts: [{\n        id: 1,\n        title: 'Campelo and Hygor will be missed',\n        active: 1,\n        comments: [{\n            id: 1,\n            content: 'Yes :(',\n            active: 1\n        }]\n    }]\n}\n")),(0,o.kt)("h3",{id:"id-lazy-eager-loading"},"Lazy eager loading"),(0,o.kt)("p",null,"To load relationships ",(0,o.kt)("strong",{parentName:"p"},"after")," you have already fetched the user data, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"load")," method. For example, to load related ",(0,o.kt)("inlineCode",{parentName:"p"},"posts")," after already\nfetching a ",(0,o.kt)("inlineCode",{parentName:"p"},"User"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.find()\n\nawait user.load('posts')\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," method and ",(0,o.kt)("inlineCode",{parentName:"p"},"load")," method have the same signature, this means that you can also use the ",(0,o.kt)("strong",{parentName:"p"},"dot notation")," and sub-queries when using it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.find()\nconst postsWithComments = await user.load('posts.comments', query => query.where('active', 1))\n\nfor (const post of user.posts) {\n    //\n}\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The only difference between ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"load")," methods is that the ",(0,o.kt)("inlineCode",{parentName:"p"},"load")," method will always return the lazily fetched data. As you can see in the above\nexample we are saving the posts with comments loaded in the ",(0,o.kt)("inlineCode",{parentName:"p"},"postsWithComments")," constant."))),(0,o.kt)("h3",{id:"id-querying-relationships-existence"},"Querying relationships existence"),(0,o.kt)("p",null,"When retrieving model records, you may wish to limit your results based on the existence of a relationship. For example, imagine you want to retrieve all\nblog posts that have at least one comment. To do so, you may pass the name of the relationship to the ",(0,o.kt)("inlineCode",{parentName:"p"},"has")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Retrieve all posts that have at least one comment\nconst posts = await Post.query().has('comments').findMany()\n")),(0,o.kt)("p",null,"You may also specify an operator and count value to further customize the query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Retrieve all posts that have three or more comments\nconst posts = await Post.query().has('comments', '>=', 3).findMany()\n")),(0,o.kt)("p",null,"Nested ",(0,o.kt)("inlineCode",{parentName:"p"},"has"),' statements may be constructed using "dot" notation. For example, you may retrieve all posts that have at least one comment that has at\nleast one image:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Retrieve posts that have at least one comment with images\nconst posts = await Post.query('comments.images').findMany()\n")),(0,o.kt)("p",null,"If you need even more power, you may use the ",(0,o.kt)("inlineCode",{parentName:"p"},"whereHas")," method to define additional query constraints on your ",(0,o.kt)("inlineCode",{parentName:"p"},"has")," queries, such as inspecting the\ncontent of a comment:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Retrieve posts with at least one comment containing words like code%\nconst posts = await Post.query()\n    .whereHas('comments', query => query.whereLike('content', 'code%'))\n    .findMany()\n\n// Retrieve posts with at least ten comments containing words like code%\nconst posts = await Post.query()\n    .whereHas('comments', query => query.whereLike('content', 'code%'), '>=', 10)\n    .findMany()\n")),(0,o.kt)("h2",{id:"id-defining-relationships-queries-in-models"},"Defining relationships queries in models"),(0,o.kt)("p",null,"As you can see you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," to eager load and ",(0,o.kt)("inlineCode",{parentName:"p"},"load")," to lazy load your relationships. But you can also define a query for your relationship for\nyour model, this will help a lot to automatically set values when making operations in your relationships."),(0,o.kt)("p",null,"Before going to the examples, lets check how we can define these methods in the father model. Let's use the classic example of ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Post"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Post } from '#app/Models/Post'\nimport { Model, Column, Relation } from '@athenna/database'\n\nexport class User extends Model {\n  static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      name: Column.string(),\n      posts: Relation.hasMany(Post, 'user'),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n  }\n\n  postsQuery() {\n      const withCriterias = true\n\n      return this.hasMany(Post, withCriterias)\n  }\n\n  /*...*/\n}\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"hasOne"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"hasMany"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"belongsTo")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"belongsToMany")," methods will always create a specific query builder for each type of relation that will extend the\n",(0,o.kt)("inlineCode",{parentName:"p"},"ModelQueryBuilder"),". This means that basically you can use all the ",(0,o.kt)("inlineCode",{parentName:"p"},"ModelQueryBuilder")," methods in the relationships query builder."))),(0,o.kt)("h2",{id:"id-inserting-updating-and-deleting-related-tables"},"Inserting, updating & deleting related tables"),(0,o.kt)("h3",{id:"id-the-create-method"},"The ",(0,o.kt)("inlineCode",{parentName:"h3"},"create")," method"),(0,o.kt)("p",null,"Athenna provides convenient methods for adding new models to relationships. For example, perhaps you need to add a new comment to a post. Instead of\nmanually setting the postId attribute on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Comment")," model you may insert the comment using the relationship's ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const comment = new Comment()\n\ncomment.content = 'A new comment.'\n\nconst post = await Post.find()\n\nawait post.commentsQuery().create(comment)\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," method will automatically add the appropriate ",(0,o.kt)("inlineCode",{parentName:"p"},"postId")," value to the new ",(0,o.kt)("inlineCode",{parentName:"p"},"Comment")," model."),(0,o.kt)("p",null,"If you need to save multiple related models, you may use the ",(0,o.kt)("inlineCode",{parentName:"p"},"createMany")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const comment = new Comment()\n\ncomment.content = 'A new comment.'\n\nconst post = await Post.find()\n\n// Notice that you can use the Comment model and a plain object\nawait post.commentsQuery().createMany([comment, { content: 'Other comment.'} ])\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"createMany")," methods will persist the given model instances, but will not add the newly persisted models to any in-memory relationships\nthat are already loaded onto the parent model. If you plan on accessing the relationship after using the ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"createMany")," methods, you may wish\nto use the ",(0,o.kt)("inlineCode",{parentName:"p"},"load")," method to reload the relationships:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"await post.commentsQuery().create(comment)\n\nawait post.load('comments')\n\n// All comments, including the newly saved comment\npost.comments\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"save")," method saves the model and relationships recursively this means that you can change your relationships data and save it from the parent model:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const post = await Post.query().with('user').find()\n\npost.user.name = 'Valmir Barbosa'\npost.user.email = 'valmirphp@gmail.com'\n\nawait post.save()\n")))),(0,o.kt)("h3",{id:"id-the-update-method"},"The ",(0,o.kt)("inlineCode",{parentName:"h3"},"update")," method"),(0,o.kt)("p",null,"You can also use the ",(0,o.kt)("inlineCode",{parentName:"p"},"update")," method to update your model using the query builder method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const post = await Post.query().with('user').find()\n\nawait post.userQuery().update({ name: 'Valmir Barbosa', email: 'valmirphp@gmail.com' })\n\n// As we have already loaded the 'user' relation in\n// the first line, we can use the refresh method to\n// reload the post model and the already loaded relations.\nawait post.refresh()\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You may also use the ",(0,o.kt)("inlineCode",{parentName:"p"},"createOrUpdate")," method to ",(0,o.kt)("a",{parentName:"p",href:"/docs/orm/getting-started#id-insert-or-update-upserts"},(0,o.kt)("inlineCode",{parentName:"a"},"create and update models on relationships")),"."))),(0,o.kt)("h3",{id:"id-manipulating-relationships-with-instance-methods"},"Manipulating relationships with instance methods"),(0,o.kt)("p",null,"Instead of using relationships queries methods you can modify the relation directly in the parent model instance. In the example bellow the ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," model\nbelongs to an ",(0,o.kt)("inlineCode",{parentName:"p"},"Account"),", let's see how we can update the username using an instance of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Account")," model:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const account = await Account.query().with('user').find()\n\naccount.user.name = 'Daniel Luna'\n\nawait account.user.save()\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"As you can see in the example above we are calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"save")," method in the ",(0,o.kt)("inlineCode",{parentName:"p"},"user")," relationship of ",(0,o.kt)("inlineCode",{parentName:"p"},"account"),". Always remember that all the instance\nmethods of the models like ",(0,o.kt)("inlineCode",{parentName:"p"},"save"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"load"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"refresh"),", etc... will be available in relationships instances too."))),(0,o.kt)("p",null,"This is also applicable to a ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," model that has many ",(0,o.kt)("inlineCode",{parentName:"p"},"Post"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.find()\n\nawait user.load('posts')\n\nuser.posts[0].title = 'New title for the first post'\n\nawait user.posts[0].save()\n")),(0,o.kt)("h3",{id:"id-belongs-to-relationship"},"Belongs to relationship"),(0,o.kt)("p",null,"If you would like to assign a child model to a new parent model, you may use the ",(0,o.kt)("inlineCode",{parentName:"p"},"associate")," method. In this example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," model defines a ",(0,o.kt)("inlineCode",{parentName:"p"},"belongsTo"),"\nrelationship to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Account")," model. This ",(0,o.kt)("inlineCode",{parentName:"p"},"associate")," method will set the foreign key on the child model:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.find()\nconst account = await Account.find()\n\nuser.accountQuery().associate(account)\n\nawait user.save()\n")),(0,o.kt)("p",null,"To remove a parent model from a child model, you may use the ",(0,o.kt)("inlineCode",{parentName:"p"},"dissociate")," method. This method will set the relationship's foreign key to ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," and will\nnot delete any model:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"user.accountQuery().dissociate()\n\nawait user.save()\n")),(0,o.kt)("p",null,"To remove the relationship and the parent model you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"delete")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"await user.accountQuery().delete()\n")),(0,o.kt)("h3",{id:"id-many-to-many-relationships"},"Many to many relationships"),(0,o.kt)("p",null,"Athenna also provides methods to make working with many-to-many relationships more convenient. For example, let's imagine a user can have many roles\nand a role can have many users. You may use the ",(0,o.kt)("inlineCode",{parentName:"p"},"attach")," method to attach a role to a user by inserting a record in the relationship's pivot table:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const role = await Role.find()\nconst user = await User.find()\n\nawait user.rolesQuery().attach(role.id)\n")),(0,o.kt)("p",null,"When attaching a relationship to a model, you may also pass an array of additional data to be inserted into the pivot table:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"await user.rolesQuery().attach(role.id, { expiresAt: new Date() })\n")),(0,o.kt)("p",null,"Sometimes it may be necessary to remove a role from a user. To remove a many-to-many relationship record, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"detach")," method. The ",(0,o.kt)("inlineCode",{parentName:"p"},"detach")," method\nwill delete the appropriate record out of the pivot table; however, both models will remain in the database:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Detach a single role from the user\nawait user.rolesQuery().detach(role.id)\n\n// Detach all roles from the user\nawait user.rolesQuery().detach()\n")),(0,o.kt)("p",null,"To remove the relationship record from the pivot table and the ",(0,o.kt)("inlineCode",{parentName:"p"},"roles")," you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"delete")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"await user.rolesQuery().delete()\n")),(0,o.kt)("h4",{id:"id-using-instance-properties-in-many-to-many"},"Using instance properties in many-to-many"),(0,o.kt)("p",null,"Instead of using relationships queries methods you can modify the relation directly in the parent model instance and call ",(0,o.kt)("inlineCode",{parentName:"p"},"save")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.query().with('roles').find()\nconst role = new Role()\n\nrole.name = 'Admin'\n\nuser.roles.push(role)\n\nawait user.save()\n")),(0,o.kt)("p",null,"You can also modify the values inside the array to update the ",(0,o.kt)("inlineCode",{parentName:"p"},"roles"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.query().with('roles').find()\n\nuser.roles = user.roles.map(role => {\n    if (role.name === 'Admin') {\n        role.name = 'Other name'\n    }\n\n    return role\n})\n\nawait user.save()\n")),(0,o.kt)("p",null,"To remove a role from the user you can simply remove it from the ",(0,o.kt)("inlineCode",{parentName:"p"},"roles")," array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.query().with('roles').find()\n\n// The filter function will leave only the roles\n// that the name is not Admin\nuser.roles = user.roles.filter(role => role.name !== 'Admin')\n\nawait user.save()\n")))}h.isMDXComponent=!0}}]);