"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[9736],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),d=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(i.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=d(n),c=o,m=h["".concat(i,".").concat(c)]||h[c]||u[c]||r;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=c;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[h]="string"==typeof e?e:o,s[1]=l;for(var d=2;d<r;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9284:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(7462),o=(n(7294),n(3905));const r={title:"Request Context",sidebar_position:4,description:"Understand the purpose of the request context object.",tags:["REST API Application","Request Context"]},s="Request Context",l={unversionedId:"rest-api-application/request-context",id:"rest-api-application/request-context",title:"Request Context",description:"Understand the purpose of the request context object.",source:"@site/docs/rest-api-application/request-context.mdx",sourceDirName:"rest-api-application",slug:"/rest-api-application/request-context",permalink:"/docs/rest-api-application/request-context",draft:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/rest-api-application/request-context.mdx",tags:[{label:"REST API Application",permalink:"/docs/tags/rest-api-application"},{label:"Request Context",permalink:"/docs/tags/request-context"}],version:"current",sidebarPosition:4,frontMatter:{title:"Request Context",sidebar_position:4,description:"Understand the purpose of the request context object.",tags:["REST API Application","Request Context"]},sidebar:"tutorialSidebar",previous:{title:"Controllers",permalink:"/docs/rest-api-application/controllers"},next:{title:"Error Handling",permalink:"/docs/rest-api-application/error-handling"}},i={},d=[{value:"Introduction",id:"introduction",level:2},{value:"The context object",id:"the-context-object",level:2},{value:"The request object",id:"the-request-object",level:3},{value:"The <code>ip</code> getter",id:"the-ip-getter",level:4},{value:"The <code>method</code> getter",id:"the-method-getter",level:4},{value:"The <code>hostUrl</code> getter",id:"the-hosturl-getter",level:4},{value:"The <code>baseUrl</code> getter",id:"the-baseurl-getter",level:4},{value:"The <code>originalUrl</code> getter",id:"the-originalurl-getter",level:4},{value:"The <code>body</code>, <code>params</code>, <code>queries</code> and <code>headers</code> getters",id:"the-body-params-queries-and-headers-getters",level:4},{value:"The <code>input</code> and <code>payload</code> methods",id:"the-input-and-payload-methods",level:4},{value:"The <code>only</code> and <code>except</code> methods",id:"the-only-and-except-methods",level:4},{value:"The <code>param</code>, <code>query</code> and <code>header</code> methods",id:"the-param-query-and-header-methods",level:4},{value:"The <code>getFastifyRequest</code> method",id:"the-getfastifyrequest-method",level:4},{value:"The response object",id:"the-response-object",level:3},{value:"The <code>send</code> method",id:"the-send-method",level:4},{value:"The <code>helmet</code> method",id:"the-helmet-method",level:4},{value:"The <code>status</code> method",id:"the-status-method",level:4},{value:"The <code>header</code>, <code>safeHeader</code> and <code>removeHeader</code> methods",id:"the-header-safeheader-and-removeheader-methods",level:4},{value:"The <code>redirectTo</code> method",id:"the-redirectto-method",level:4},{value:"The <code>sent</code> getter",id:"the-sent-getter",level:4},{value:"The <code>body</code>, <code>statusCode</code> and <code>headers</code> getters",id:"the-body-statuscode-and-headers-getters",level:4},{value:"The <code>responseTime</code> getter",id:"the-responsetime-getter",level:4},{value:"The <code>getFastifyResponse</code> method",id:"the-getfastifyresponse-method",level:4},{value:"The params object",id:"the-params-object",level:3},{value:"The queries object",id:"the-queries-object",level:3},{value:"The data object",id:"the-data-object",level:3},{value:"The context object in middlewares",id:"the-context-object-in-middlewares",level:2},{value:"Middleware context",id:"middleware-context",level:3},{value:"Interceptor context",id:"interceptor-context",level:3},{value:"Terminate middleware context",id:"id-terminate-middleware",level:3}],p={toc:d},h="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(h,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"request-context"},"Request Context"),(0,o.kt)("p",null,"Understand the purpose of the request context object."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Athenna provides an object inside all Http handlers called\n",(0,o.kt)("inlineCode",{parentName:"p"},"ctx"),". This property is implemented by the ",(0,o.kt)("inlineCode",{parentName:"p"},"Context"),"\ninterface imported from ",(0,o.kt)("inlineCode",{parentName:"p"},"@athenna/http")," package."),(0,o.kt)("h2",{id:"the-context-object"},"The context object"),(0,o.kt)("p",null,"In Athenna as you can see in the previous documentation page\nof ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/http/middlewares"},(0,o.kt)("inlineCode",{parentName:"a"},"Middlewares"))," and\n",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/http/controllers"},(0,o.kt)("inlineCode",{parentName:"a"},"Controllers"))," we are\nalways destructuring the ",(0,o.kt)("inlineCode",{parentName:"p"},"ctx")," property and using like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', ({ response }) => {\n    response.status(200).send({ hello: 'world' })\n})\n")),(0,o.kt)("p",null,"But is the same of doing this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', (ctx) => {\n    ctx.response.status(200).send({ hello: 'world' })\n})\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ctx")," object is little different for each type of\nhandlers, and we will see all the differences previous in\nthis documentation page."),(0,o.kt)("h3",{id:"the-request-object"},"The request object"),(0,o.kt)("p",null,"Athenna ",(0,o.kt)("inlineCode",{parentName:"p"},"Request")," class provides an object-oriented way to\ninteract with the current HTTP request being handled by your\napplication as well as retrieve the ip, headers, body, and\nfiles that were submitted with the request."),(0,o.kt)("h4",{id:"the-ip-getter"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"ip")," getter"),(0,o.kt)("p",null,"With this getter, you will be able to get the ip from where\nthe requests were executed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', ({ request }) => {\n    console.log(request.ip) // 192.168.0.1\n\n    /*....*/\n})\n")),(0,o.kt)("h4",{id:"the-method-getter"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"method")," getter"),(0,o.kt)("p",null,"With this getter, you will be able to get the\n",(0,o.kt)("a",{parentName:"p",href:"https://restfulapi.net/"},(0,o.kt)("inlineCode",{parentName:"a"},"REST"))," method of your request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', ({ request }) => {\n    console.log(request.method) // GET\n\n    /*....*/\n})\n")),(0,o.kt)("h4",{id:"the-hosturl-getter"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"hostUrl")," getter"),(0,o.kt)("p",null,"With this getter, you will be able to get the host url of\nthe request concatenating the host:port of your application\nand the ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/http/context#id-the-originalUrl-getter"},(0,o.kt)("inlineCode",{parentName:"a"},"originalUrl")),"\nof the request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', ({ request }) => {\n    console.log(request.hostUrl) // http://localhost:1335/welcome\n\n    /*....*/\n})\n")),(0,o.kt)("h4",{id:"the-baseurl-getter"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"baseUrl")," getter"),(0,o.kt)("p",null,"With this getter, you will be able to get the url of the\nroute without the query params:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', ({ request }) => {\n    console.log(request.baseUrl) // /welcome\n\n    /*....*/\n})\n")),(0,o.kt)("h4",{id:"the-originalurl-getter"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"originalUrl")," getter"),(0,o.kt)("p",null,"With this getter, you will be able to get the original url\nwith the query params:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', ({ request }) => {\n    console.log(request.originalUrl) // /welcome?hello=world\n\n    /*....*/\n})\n")),(0,o.kt)("h4",{id:"the-body-params-queries-and-headers-getters"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"body"),", ",(0,o.kt)("inlineCode",{parentName:"h4"},"params"),", ",(0,o.kt)("inlineCode",{parentName:"h4"},"queries")," and ",(0,o.kt)("inlineCode",{parentName:"h4"},"headers")," getters"),(0,o.kt)("p",null,"With these getters, you will be able to retrieve all the\ndata inside each one of then:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.post('/welcome/:id', ({ request }) => {\n    console.log(request.body) // { hello: 'world' }\n    console.log(request.params) // { id: '1' }\n    console.log(request.queries) // { world: 'hello' }\n    console.log(request.headers) // { 'content-type': 'application/json' }\n\n    /*....*/\n})\n")),(0,o.kt)("h4",{id:"the-input-and-payload-methods"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"input")," and ",(0,o.kt)("inlineCode",{parentName:"h4"},"payload")," methods"),(0,o.kt)("p",null,"With these methods you will be able to retrieve only one\nvalue per call from the request body:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.post('/welcome/:id', ({ request }) => {\n    const defaultValue = 'defaultValue'\n\n    console.log(request.input('hello'), 'found') // 'world'\n    console.log(request.input('not-found'), defaultValue) // 'defaultValue'\n\n    console.log(request.payload('hello'), defaultValue) // 'world'\n    console.log(request.payload('not-found'), defaultValue) // 'defaultValue'\n\n    /*....*/\n})\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"As you can see, you can use the second argument of this type\nof methods to set the default value if the key has not been\nfound in your request.")),(0,o.kt)("p",null,'You may even use "dot" syntax to retrieve values that are\nnested within JSON arrays / objects:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const name = request.input('user.name')\n")),(0,o.kt)("h4",{id:"the-only-and-except-methods"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"only")," and ",(0,o.kt)("inlineCode",{parentName:"h4"},"except")," methods"),(0,o.kt)("p",null,"If you need to retrieve a subset of the input data, you may\nuse the ",(0,o.kt)("inlineCode",{parentName:"p"},"only")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"except")," methods. Both of these methods\naccept a single array or a dynamic list of arguments:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const input = request.only('username', 'password')\nconst input = request.only(['username', 'password'])\n\nconst input = request.except('credit_card')\nconst input = request.except(['credit_card'])\n")),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"only")," method returns all the key / value pairs that you\nrequest; however, it will not return key / value pairs that\nare not present on the request body.")),(0,o.kt)("h4",{id:"the-param-query-and-header-methods"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"param"),", ",(0,o.kt)("inlineCode",{parentName:"h4"},"query")," and ",(0,o.kt)("inlineCode",{parentName:"h4"},"header")," methods"),(0,o.kt)("p",null,"With these methods you will be able to retrieve only one\nvalue per call from the above methods. You can also set a\nsecond parameter that will set the default value if the\nfirst argument key doesn't exist:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.post('/welcome/:id', ({ request }) => {\n    const defaultValue = 'defaultValue'\n\n    console.log(request.param('id'), defaultValue) // '1'\n    console.log(request.param('not-found'), defaultValue) // 'defaultValue'\n\n    console.log(request.query('world'), defaultValue) // 'hello'\n    console.log(request.query('not-found'), defaultValue) // 'defaultValue'\n\n    console.log(request.header('content-type'), defaultValue) // 'application/json'\n    console.log(request.header('not-found'), defaultValue) // 'defaultValue'\n\n    /*....*/\n})\n")),(0,o.kt)("h4",{id:"the-getfastifyrequest-method"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"getFastifyRequest")," method"),(0,o.kt)("p",null,"With this method, you will be able to retrieve the vanilla\nFastify request object to use more advanced getters and\nmethods from Fastify:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', ({ request }) => {\n    const fastifyRequest = request.getFastifyRequest()\n\n    /*....*/\n})\n")),(0,o.kt)("h3",{id:"the-response-object"},"The response object"),(0,o.kt)("p",null,"Athenna ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," class provides an object-oriented way to\ninteract with the current HTTP response being handled by\nyour application as well set a status code and return the\nresponse to the client."),(0,o.kt)("h4",{id:"the-send-method"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"send")," method"),(0,o.kt)("p",null,"With this method, you are going to terminate the request\nsending a response body to the client:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', ({ response }) => {\n    response.send({ hello: 'world' })\n})\n")),(0,o.kt)("h4",{id:"the-helmet-method"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"helmet")," method"),(0,o.kt)("p",null,"With this method you are going to apply all the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/helmet"},(0,o.kt)("inlineCode",{parentName:"a"},"Helmet"))," response\nheaders in your response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', async ({ response }) => {\n    if (condition) {\n      // we apply the default options\n      await response.helmet()\n    } else {\n      // we apply customized options\n      await response.helmet({ frameguard: false })\n    }\n})\n")),(0,o.kt)("h4",{id:"the-status-method"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"status")," method"),(0,o.kt)("p",null,"With this method you are going to apply the status code of\nyour response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', async ({ response }) => {\n    response.status(200).send({ hello: 'World' })\n})\n")),(0,o.kt)("h4",{id:"the-header-safeheader-and-removeheader-methods"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"header"),", ",(0,o.kt)("inlineCode",{parentName:"h4"},"safeHeader")," and ",(0,o.kt)("inlineCode",{parentName:"h4"},"removeHeader")," methods"),(0,o.kt)("p",null,"With these methods you can set custom header for your\nresponse, the ",(0,o.kt)("inlineCode",{parentName:"p"},"header")," method will subscribe the already\nset headers, the ",(0,o.kt)("inlineCode",{parentName:"p"},"safeHeader")," will only register the header\nif the header is not yet registered and the ",(0,o.kt)("inlineCode",{parentName:"p"},"removeHeader"),"\nwill remove a header from the response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', async ({ response }) => {\n    response.header('content-type', 'application/json')\n    response.safeHeader('content-type', 'application/json')\n    response.removeHeader('content-type')\n})\n")),(0,o.kt)("h4",{id:"the-redirectto-method"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"redirectTo")," method"),(0,o.kt)("p",null,"With this method, you can redirect your response to another\nurl and with a different status code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/hello', ctx => ctx.response.status(200))\n\nRoute.get('/welcome', async ({ response }) => {\n    response.redirectTo('/hello', 200)\n})\n")),(0,o.kt)("h4",{id:"the-sent-getter"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"sent")," getter"),(0,o.kt)("p",null,"With this getter, you can verify if your response has already\nbeen sent to client, useful to be used in\n",(0,o.kt)("a",{parentName:"p",href:"/docs/rest-api-application/middlewares#intercept-middleware"},"interceptors"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', async ({ response }) => {\n    response.send({ status: 'ok' })\n}).interceptor(({ response }) => {\n    if (response.sent) {\n        // do something\n    }\n})\n")),(0,o.kt)("h4",{id:"the-body-statuscode-and-headers-getters"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"body"),", ",(0,o.kt)("inlineCode",{parentName:"h4"},"statusCode")," and ",(0,o.kt)("inlineCode",{parentName:"h4"},"headers")," getters"),(0,o.kt)("p",null,"With these getters, you can get the content of the response\nbody, status code and headers if it exists. These values will\nbe available before you use ",(0,o.kt)("inlineCode",{parentName:"p"},"response.send()"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"response.status()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"response.headers()")," methods somewhere.\nThese getters are useful when using\n",(0,o.kt)("a",{parentName:"p",href:"/docs/rest-api-application/middlewares#intercept-middleware"},"interceptors")," and\n",(0,o.kt)("a",{parentName:"p",href:"/docs/rest-api-application/middlewares#terminate-middleware"},"terminators"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', async ({ response }) => {\n    response.send({ status: 'ok' })\n}).terminator(({ response }) => {\n    if (response.statusCode !== 200) {\n        // do something\n    }\n\n    if (response.body.status === 'ok') {\n        // do something\n    }\n\n    if (response.headers['Content-Type'] !== 'application/json') {\n        // do something\n    }\n})\n")),(0,o.kt)("h4",{id:"the-responsetime-getter"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"responseTime")," getter"),(0,o.kt)("p",null,"With this getter, you will be able to get how much time your\nrequest has taken until it finish and turn back to client.\nThis value will only be available in ",(0,o.kt)("a",{parentName:"p",href:"/docs/rest-api-application/middlewares#terminate-middleware"},"terminators"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', async ({ response }) => {\n    response.send({ status: 'ok' })\n}).terminator(({ response }) => {\n    console.log('Request has taken: ', response.responseTime, 'ms', ' to finish.')\n})\n")),(0,o.kt)("h4",{id:"the-getfastifyresponse-method"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"getFastifyResponse")," method"),(0,o.kt)("p",null,"With this method, you will be able to retrieve the vanilla\nFastify response object to use more advanced getters and\nmethods from Fastify:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/welcome', ({ response }) => {\n    const fastifyResponse = response.getFastifyResponse()\n\n    /*....*/\n})\n")),(0,o.kt)("h3",{id:"the-params-object"},"The params object"),(0,o.kt)("p",null,"Athenna ",(0,o.kt)("inlineCode",{parentName:"p"},"params")," is just a simple object that contains the\nactual HTTP params of the request that is being handled by\nyour application."),(0,o.kt)("h3",{id:"the-queries-object"},"The queries object"),(0,o.kt)("p",null,"Athenna ",(0,o.kt)("inlineCode",{parentName:"p"},"queries")," is just a simple object that contains the\nactual HTTP queries of the request that is being handled by\nyour application."),(0,o.kt)("h3",{id:"the-data-object"},"The data object"),(0,o.kt)("p",null,"Athenna ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," is just a simple object that you can use to\nset data inside to transfer between middlewares. This is\nreally useful for some cases. Let's see an example setting\ndefault pagination values if client has not sent page and\nlimit:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Config } from '@athenna/config'\nimport { Context, Middleware } from '@athenna/http'\n\n@Middleware()\nexport class PaginationMiddleware {\n  public async handle({ request, data }: Context) {\n    const page = request.queries.page ? parseInt(request.queries.page) : 0\n    const limit = request.queries.limit ? parseInt(request.queries.limit) : 10\n    const resourceUrl = `${Config.get('http.domain')}${request.baseUrl}`\n\n    data.pagination = {\n      page,\n      limit,\n      resourceUrl,\n    }\n  }\n}\n")),(0,o.kt)("p",null,"And now is very simple to get this ",(0,o.kt)("inlineCode",{parentName:"p"},"pagination")," object\ninside your handler:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/products', ({ response, data }) => {\n    return response.send({ paginationObj: data.pagination })\n}).middleware('PaginationMiddleware')\n")),(0,o.kt)("h2",{id:"the-context-object-in-middlewares"},"The context object in middlewares"),(0,o.kt)("h3",{id:"middleware-context"},"Middleware context"),(0,o.kt)("p",null,"The context of a ",(0,o.kt)("a",{parentName:"p",href:"/docs/rest-api-application/middlewares"},"middleware"),"\nis the same of a Controller. It uses the same ",(0,o.kt)("inlineCode",{parentName:"p"},"Context"),"\ninterface from ",(0,o.kt)("inlineCode",{parentName:"p"},"@athenna/http")," package."),(0,o.kt)("h3",{id:"interceptor-context"},"Interceptor context"),(0,o.kt)("p",null,"In ",(0,o.kt)("a",{parentName:"p",href:"/docs/rest-api-application/middlewares#intercept-middleware"},"interceptors"),"\nAthenna uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"InterceptContext"),". This context is quite\nthe same of ",(0,o.kt)("inlineCode",{parentName:"p"},"Context"),", but it has additional properties\n",(0,o.kt)("inlineCode",{parentName:"p"},"body")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"status"),"."),(0,o.kt)("h3",{id:"id-terminate-middleware"},"Terminate middleware context"),(0,o.kt)("p",null,"In ",(0,o.kt)("a",{parentName:"p",href:"/docs/rest-api-application/middlewares#terminate-middleware"},"terminators"),"\nAthenna set the ",(0,o.kt)("inlineCode",{parentName:"p"},"TerminateContext"),". This context is quite\nthe same of ",(0,o.kt)("inlineCode",{parentName:"p"},"Context"),", but it has additional properties\n",(0,o.kt)("inlineCode",{parentName:"p"},"body"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"status")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"responseTime"),"."))}u.isMDXComponent=!0}}]);