"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[5314],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),c=d(n),u=r,m=c["".concat(s,".").concat(u)]||c[u]||p[u]||o;return n?a.createElement(m,i(i({ref:t},h),{},{components:n})):a.createElement(m,i({ref:t},h))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4899:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return h}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={sidebar_position:4,id:"context",title:"Request Context",hide_title:!0,hide_table_of_contents:!0,tags:["Getting Started","Architecture Concepts","The Basics"]},s=void 0,d={unversionedId:"the-basics/http/context",id:"the-basics/http/context",title:"Request Context",description:"\ud83c\udfe0",source:"@site/docs/the-basics/http/context.mdx",sourceDirName:"the-basics/http",slug:"/the-basics/http/context",permalink:"/docs/the-basics/http/context",editUrl:"https://github.com/AthennaIO/Docs/docs/the-basics/http/context.mdx",tags:[{label:"Getting Started",permalink:"/docs/tags/getting-started"},{label:"Architecture Concepts",permalink:"/docs/tags/architecture-concepts"},{label:"The Basics",permalink:"/docs/tags/the-basics"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"context",title:"Request Context",hide_title:!0,hide_table_of_contents:!0,tags:["Getting Started","Architecture Concepts","The Basics"]},sidebar:"tutorialSidebar",previous:{title:"Controllers",permalink:"/docs/the-basics/http/controllers"},next:{title:"Routing",permalink:"/docs/the-basics/cli/routing"}},h=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"The context object",id:"id-the-context-object",children:[{value:"The request object",id:"id-the-request",children:[{value:"The <code>ip</code> getter",id:"id-the-ip-getter",children:[],level:4},{value:"The <code>method</code> getter",id:"id-the-method-getter",children:[],level:4},{value:"The <code>hostUrl</code> getter",id:"id-the-hostUrl-getter",children:[],level:4},{value:"The <code>baseUrl</code> getter",id:"id-the-baseUrl-getter",children:[],level:4},{value:"The <code>originalUrl</code> getter",id:"id-the-originalUrl-getter",children:[],level:4},{value:"The <code>body</code>, <code>params</code>, <code>queries</code> and <code>headers</code> getters",id:"id-the-body-params-queries-and-headers-getters",children:[],level:4},{value:"The <code>input</code> and <code>payload</code> methods",id:"id-the-input-and-payload-methods",children:[],level:4},{value:"The <code>only</code> and <code>except</code> methods",id:"id-the-only-and-except-methods",children:[],level:4},{value:"The <code>param</code>, <code>query</code> and <code>header</code> methods",id:"id-the-payload-param-query-and-header-methods",children:[],level:4},{value:"The <code>getFastifyRequest</code> method",id:"id-the-getFastifyRequest-method",children:[],level:4}],level:3},{value:"The response object",id:"id-the-response",children:[{value:"The <code>send</code> and <code>json</code> methods",id:"id-the-send-and-json-methods",children:[],level:4},{value:"The <code>helmet</code> method",id:"id-the-helmet-method",children:[],level:4},{value:"The <code>status</code> method",id:"id-the-status-method",children:[],level:4},{value:"The <code>header</code>, <code>safeHeader</code> and <code>removeHeader</code> methods",id:"id-the-header-safeHeader-and-removeHeader",children:[],level:4},{value:"The <code>redirectTo</code> method",id:"id-the-redirectTo-method",children:[],level:4},{value:"The <code>getFastifyResponse</code> method",id:"id-the-getFastifyResponse-method",children:[],level:4}],level:3},{value:"The params object",id:"id-the-params",children:[],level:3},{value:"The queries object",id:"id-the-queries",children:[],level:3},{value:"The data object",id:"id-the-data",children:[],level:3}],level:2},{value:"The context object in middlewares",id:"id-the-context-object-in-middlewares",children:[{value:"Handle middleware context",id:"id-handle-middleware",children:[],level:3},{value:"Intercept middleware context",id:"id-intercept-middleware",children:[],level:3},{value:"Terminate middleware context",id:"id-terminate-middleware",children:[],level:3}],level:2}],p={toc:h};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("nav",{"aria-label":"breadcrumbs"},(0,o.kt)("ul",{class:"breadcrumbs"},(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link"},"The Basics")),(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link"},"Http")),(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link",href:"/docs/the-basics/http/context"},"Request Context")))),(0,o.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,o.kt)("h1",{id:"request-context"},"Request Context"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"introduction"},(0,o.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"the-context-object"},(0,o.kt)("a",{parentName:"h4",href:"#id-the-context-object"},"The context object")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"the-request"},(0,o.kt)("a",{parentName:"h4",href:"#id-the-request"},"The request"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"the-response"},(0,o.kt)("a",{parentName:"h4",href:"#id-the-response"},"The response"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"the-params"},(0,o.kt)("a",{parentName:"h4",href:"#id-the-params"},"The params"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"the-queries"},(0,o.kt)("a",{parentName:"h4",href:"#id-the-queries"},"The queries"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"the-data"},(0,o.kt)("a",{parentName:"h4",href:"#id-the-data"},"The data"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"the-context-object-in-middlewares"},(0,o.kt)("a",{parentName:"h4",href:"#id-the-context-object-in-middlewares"},"The context object in middlewares")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"handle-middleware"},(0,o.kt)("a",{parentName:"h4",href:"#id-handle-middleware"},"Handle middleware"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"intercept-middleware"},(0,o.kt)("a",{parentName:"h4",href:"#id-intercept-middleware"},"Intercept middleware"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"terminate-middleware"},(0,o.kt)("a",{parentName:"h4",href:"#id-terminate-middleware"},"Terminate middleware")))))),(0,o.kt)("h2",{id:"id-introduction"},"Introduction"),(0,o.kt)("p",null,"Athenna provides an object inside all Http handlers called ",(0,o.kt)("inlineCode",{parentName:"p"},"ctx"),". This property is implemented by the ",(0,o.kt)("inlineCode",{parentName:"p"},"ContextContract"),"\ninterface."),(0,o.kt)("h2",{id:"id-the-context-object"},"The context object"),(0,o.kt)("p",null,"In Athenna as you can see in the previous documentation page of ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/http/middlewares"},(0,o.kt)("inlineCode",{parentName:"a"},"Middlewares"))," and\n",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/http/controllers"},(0,o.kt)("inlineCode",{parentName:"a"},"Controllers"))," we are always destructuring the ",(0,o.kt)("inlineCode",{parentName:"p"},"ctx")," property and using like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/welcome', ({ response }) => {\n    response.status(200).send({ hello: 'world' })\n})\n")),(0,o.kt)("p",null,"But is the same of doing this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/welcome', (ctx) => {\n    ctx.response.status(200).send({ hello: 'world' })\n})\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ctx")," object is little different for each type of handlers, and we will see all the differences previous in this\ndocumentation page."),(0,o.kt)("h3",{id:"id-the-request"},"The request object"),(0,o.kt)("p",null,"Athenna ",(0,o.kt)("inlineCode",{parentName:"p"},"Request")," class provides an object-oriented way to interact with the current HTTP request being handled by your\napplication as well as retrieve the ip, headers, body, and files that were submitted with the request."),(0,o.kt)("h4",{id:"id-the-ip-getter"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"ip")," getter"),(0,o.kt)("p",null,"With this getter you will be able to get the ip from where the requests was executed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/welcome', ({ request }) => {\n    console.log(request.ip) // 192.168.0.1\n\n    /*....*/\n})\n")),(0,o.kt)("h4",{id:"id-the-method-getter"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"method")," getter"),(0,o.kt)("p",null,"With this getter you will be able to get the ",(0,o.kt)("a",{parentName:"p",href:"https://restfulapi.net/"},(0,o.kt)("inlineCode",{parentName:"a"},"REST"))," method of your request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/welcome', ({ request }) => {\n    console.log(request.method) // GET\n\n    /*....*/\n})\n")),(0,o.kt)("h4",{id:"id-the-hostUrl-getter"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"hostUrl")," getter"),(0,o.kt)("p",null,"With this getter you will be able to get the host url of the request concatenating the host:port of your application and the ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/http/context#id-the-originalUrl-getter"},(0,o.kt)("inlineCode",{parentName:"a"},"originalUrl")),"\nof the request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/welcome', ({ request }) => {\n    console.log(request.hostUrl) // http://localhost:1335/welcome\n\n    /*....*/\n})\n")),(0,o.kt)("h4",{id:"id-the-baseUrl-getter"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"baseUrl")," getter"),(0,o.kt)("p",null,"With this getter you will be able to get the url of the route without the query params:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/welcome', ({ request }) => {\n    console.log(request.baseUrl) // /welcome\n\n    /*....*/\n})\n")),(0,o.kt)("h4",{id:"id-the-originalUrl-getter"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"originalUrl")," getter"),(0,o.kt)("p",null,"With this getter you will be able to get the original url with the query params:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/welcome', ({ request }) => {\n    console.log(request.originalUrl) // /welcome?hello=world\n\n    /*....*/\n})\n")),(0,o.kt)("h4",{id:"id-the-body-params-queries-and-headers-getters"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"body"),", ",(0,o.kt)("inlineCode",{parentName:"h4"},"params"),", ",(0,o.kt)("inlineCode",{parentName:"h4"},"queries")," and ",(0,o.kt)("inlineCode",{parentName:"h4"},"headers")," getters"),(0,o.kt)("p",null,"With these getters you will be able to retrieve all the data inside each one of then:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.post('/welcome/:id', ({ request }) => {\n    console.log(request.body) // { hello: 'world' }\n    console.log(request.params) // { id: '1' }\n    console.log(request.queries) // { world: 'hello' }\n    console.log(request.headers) // { 'content-type': 'application/json' }\n\n    /*....*/\n})\n")),(0,o.kt)("h4",{id:"id-the-input-and-payload-methods"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"input")," and ",(0,o.kt)("inlineCode",{parentName:"h4"},"payload")," methods"),(0,o.kt)("p",null,"With these methods you will be able to retrieve only one value per call from the request body:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.post('/welcome/:id', ({ request }) => {\n    const defaultValue = 'defaultValue'\n\n    console.log(request.input('hello'), 'found') // 'world'\n    console.log(request.input('not-found'), defaultValue) // 'defaultValue'\n\n    console.log(request.payload('hello'), defaultValue) // 'world'\n    console.log(request.payload('not-found'), defaultValue) // 'defaultValue'\n\n    /*....*/\n})\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"As you can see, you can use the second argument of this type of methods to set the default value if the key\nhas not been found in your request."))),(0,o.kt)("p",null,'You may even use "dot" syntax to retrieve values that are nested within JSON arrays / objects:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const name = request.input('user.name')\n")),(0,o.kt)("h4",{id:"id-the-only-and-except-methods"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"only")," and ",(0,o.kt)("inlineCode",{parentName:"h4"},"except")," methods"),(0,o.kt)("p",null,"If you need to retrieve a subset of the input data, you may use the ",(0,o.kt)("inlineCode",{parentName:"p"},"only")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"except")," methods. Both of\nthese methods accept a single array or a dynamic list of arguments:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const input = request.only('username', 'password')\nconst input = request.only(['username', 'password'])\n\nconst input = request.except('credit_card')\nconst input = request.except(['credit_card'])\n")),(0,o.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"only")," method returns all the key / value pairs that you request; however, it will not return key / value pairs that are not present on the request body."))),(0,o.kt)("h4",{id:"id-the-payload-param-query-and-header-methods"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"param"),", ",(0,o.kt)("inlineCode",{parentName:"h4"},"query")," and ",(0,o.kt)("inlineCode",{parentName:"h4"},"header")," methods"),(0,o.kt)("p",null,"With these methods you will be able to retrieve only one value per call from the above methods. You can also set a second parameter that will set the default value if the\nfirst argument key doesn't exist:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.post('/welcome/:id', ({ request }) => {\n    const defaultValue = 'defaultValue'\n\n    console.log(request.param('id'), defaultValue) // '1'\n    console.log(request.param('not-found'), defaultValue) // 'defaultValue'\n\n    console.log(request.query('world'), defaultValue) // 'hello'\n    console.log(request.query('not-found'), defaultValue) // 'defaultValue'\n\n    console.log(request.header('content-type'), defaultValue) // 'application/json'\n    console.log(request.header('not-found'), defaultValue) // 'defaultValue'\n\n    /*....*/\n})\n")),(0,o.kt)("h4",{id:"id-the-getFastifyRequest-method"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"getFastifyRequest")," method"),(0,o.kt)("p",null,"With this method you will be able to retrieve the vanilla Fastify request object to use more advanced getters and methods from Fastify:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/welcome', ({ request }) => {\n    const fastifyRequest = request.getFastifyRequest()\n\n    /*....*/\n})\n")),(0,o.kt)("h3",{id:"id-the-response"},"The response object"),(0,o.kt)("p",null,"Athenna ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," class provides an object-oriented way to interact with the current HTTP response being handled by your\napplication as well set a status code and return the response to the client."),(0,o.kt)("h4",{id:"id-the-send-and-json-methods"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"send")," and ",(0,o.kt)("inlineCode",{parentName:"h4"},"json")," methods"),(0,o.kt)("p",null,"With these methods you are going to terminate the request sending a response body to the client. The ",(0,o.kt)("inlineCode",{parentName:"p"},"send")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," methods have the same signature, they do the exactly same\nthing, you can use both to return your request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/welcome', ({ response }) => {\n\n\n    response.json({ hello: 'world' })\n    // or -> response.send({ hello: 'world' })\n})\n")),(0,o.kt)("h4",{id:"id-the-helmet-method"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"helmet")," method"),(0,o.kt)("p",null,"With this method you are going to apply all the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/helmet"},(0,o.kt)("inlineCode",{parentName:"a"},"Helmet"))," response headers in your response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/welcome', async ({ response }) => {\n    if (condition) {\n      // we apply the default options\n      await response.helmet()\n    } else {\n      // we apply customized options\n      await response.helmet({ frameguard: false })\n    }\n})\n")),(0,o.kt)("h4",{id:"id-the-status-method"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"status")," method"),(0,o.kt)("p",null,"With this method you are going to apply the status code of your response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/welcome', async ({ response }) => {\n    response.status(200).json({ hello: 'World' })\n})\n")),(0,o.kt)("h4",{id:"id-the-header-safeHeader-and-removeHeader"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"header"),", ",(0,o.kt)("inlineCode",{parentName:"h4"},"safeHeader")," and ",(0,o.kt)("inlineCode",{parentName:"h4"},"removeHeader")," methods"),(0,o.kt)("p",null,"With these methods you can set custom header for your response, the ",(0,o.kt)("inlineCode",{parentName:"p"},"header")," method will subscribe the already set headers, the ",(0,o.kt)("inlineCode",{parentName:"p"},"safeHeader")," will only register the header\nif the header is not yet registered and the ",(0,o.kt)("inlineCode",{parentName:"p"},"removeHeader")," will remove a header from the response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/welcome', async ({ response }) => {\n    response.header('content-type', 'application/json')\n    response.safeHeader('content-type', 'application/json')\n    response.removeHeader('content-type')\n})\n")),(0,o.kt)("h4",{id:"id-the-redirectTo-method"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"redirectTo")," method"),(0,o.kt)("p",null,"With this method you can redirect your response to another url and with a different status code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/hello', ctx => ctx.response.status(200))\n\nRoute.get('/welcome', async ({ response }) => {\n    response.redirectTo('/hello', 200)\n})\n")),(0,o.kt)("h4",{id:"id-the-getFastifyResponse-method"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"getFastifyResponse")," method"),(0,o.kt)("p",null,"With this method you will be able to retrieve the vanilla Fastify response object to use more advanced getters and methods from Fastify:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/welcome', ({ response }) => {\n    const fastifyResponse = response.getFastifyResponse()\n\n    /*....*/\n})\n")),(0,o.kt)("h3",{id:"id-the-params"},"The params object"),(0,o.kt)("p",null,"Athenna ",(0,o.kt)("inlineCode",{parentName:"p"},"params")," is just a simple object that contains the actual HTTP params of the request that is being handled by\nyour application."),(0,o.kt)("h3",{id:"id-the-queries"},"The queries object"),(0,o.kt)("p",null,"Athenna ",(0,o.kt)("inlineCode",{parentName:"p"},"queries")," is just a simple object that contains the actual HTTP queries of the request that is being handled by\nyour application."),(0,o.kt)("h3",{id:"id-the-data"},"The data object"),(0,o.kt)("p",null,"Athenna ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," is just a simple object that you can use to set data inside to transfer between middlewares. This is really\nuseful for some cases. Let's see an example setting default pagination values if client has not sent page and limit:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"export class PaginationMiddleware {\n  /**\n   * Handle method is executed before the request gets in your controller.\n   *\n   * @param {import('@athenna/http').HandleContextContract} ctx\n   */\n  async handle({ request, data }) {\n    const page = request.queries.page ? parseInt(request.queries.page) : 0\n    const limit = request.queries.limit ? parseInt(request.queries.limit) : 10\n    const resourceUrl = `${Config.get('http.domain')}${request.baseUrl}`\n\n    data.pagination = {\n      page,\n      limit,\n      resourceUrl,\n    }\n  }\n}\n")),(0,o.kt)("p",null,"And now is very simple to get this ",(0,o.kt)("inlineCode",{parentName:"p"},"pagination")," object inside your handler:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/products', ({ response, data }) => {\n    return response.send({ paginationObj: data.pagination })\n}).middleware('PaginationMiddleware')\n")),(0,o.kt)("h2",{id:"id-the-context-object-in-middlewares"},"The context object in middlewares"),(0,o.kt)("h3",{id:"id-handle-middleware"},"Handle middleware context"),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"handle")," method of middlewares Athenna set the ",(0,o.kt)("inlineCode",{parentName:"p"},"HandleContextContract"),". This ctx is the same of ContextContract."),(0,o.kt)("h3",{id:"id-intercept-middleware"},"Intercept middleware context"),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"intercept")," method of middlewares Athenna set the ",(0,o.kt)("inlineCode",{parentName:"p"},"InterceptContextContract"),". This ctx is quite the same of ContextContract,\nbut it has an additional properties ",(0,o.kt)("inlineCode",{parentName:"p"},"body")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"status"),". You should always return the intercepted response body in intercept middlewares."),(0,o.kt)("h3",{id:"id-terminate-middleware"},"Terminate middleware context"),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"terminate")," method of middlewares Athenna set the ",(0,o.kt)("inlineCode",{parentName:"p"},"TerminateContextContract"),". This ctx is quite the same of ContextContract,\nbut it has an additional properties ",(0,o.kt)("inlineCode",{parentName:"p"},"body"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"status")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"responseTime"),"."))}c.isMDXComponent=!0}}]);