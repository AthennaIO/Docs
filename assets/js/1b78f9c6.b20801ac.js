"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[9138],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6202:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],i={sidebar_position:4,id:"resources",title:"Resources",hide_title:!0,hide_table_of_contents:!0,tags:["ORM","Database","Resources"]},l=void 0,c={unversionedId:"orm/resources",id:"orm/resources",title:"Resources",description:"\ud83c\udfe0",source:"@site/docs/orm/resources.mdx",sourceDirName:"orm",slug:"/orm/resources",permalink:"/docs/orm/resources",editUrl:"https://github.com/AthennaIO/Docs/docs/orm/resources.mdx",tags:[{label:"ORM",permalink:"/docs/tags/orm"},{label:"Database",permalink:"/docs/tags/database"},{label:"Resources",permalink:"/docs/tags/resources"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"resources",title:"Resources",hide_title:!0,hide_table_of_contents:!0,tags:["ORM","Database","Resources"]},sidebar:"tutorialSidebar",previous:{title:"Relationships",permalink:"/docs/orm/relationships"},next:{title:"Factories",permalink:"/docs/orm/factories"}},u=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Generating resources",id:"id-generating-resources",children:[],level:2},{value:"Writing resources",id:"id-writing-resources",children:[],level:2},{value:"Using resources",id:"id-using-resources",children:[{value:"The <code>toResource</code> method",id:"id-the-to-resource-method",children:[],level:3},{value:"The <code>toResource</code> method in arrays and collections",id:"id-the-to-resource-method-in-arrays-and-collections",children:[],level:3}],level:2},{value:"Converting relationships",id:"id-converting-relationships",children:[],level:2}],d={toc:u};function p(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("nav",{"aria-label":"breadcrumbs"},(0,o.kt)("ul",{class:"breadcrumbs"},(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link"},"ORM")),(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link",href:"/docs/orm/resources"},"Resources")))),(0,o.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,o.kt)("h1",{id:"orm-resources"},"ORM: Resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"introduction"},(0,o.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"generating-resources"},(0,o.kt)("a",{parentName:"h4",href:"#id-generating-resources"},"Generating resources"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"writing-resources"},(0,o.kt)("a",{parentName:"h4",href:"#id-writing-resources"},"Writing resources"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"using-resources"},(0,o.kt)("a",{parentName:"h4",href:"#id-using-resources"},"Using resources")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"the-toresource-method"},(0,o.kt)("a",{parentName:"h4",href:"#id-the-to-resource-method"},"The ",(0,o.kt)("inlineCode",{parentName:"a"},"toResource")," method"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"the-toresource-method-in-arrays-and-collections"},(0,o.kt)("a",{parentName:"h4",href:"#id-the-to-resource-method-in-arrays-and-collections"},"The ",(0,o.kt)("inlineCode",{parentName:"a"},"toResource")," method in arrays and collections"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"converting-relationships"},(0,o.kt)("a",{parentName:"h4",href:"#id-converting-relationships"},"Converting relationships")))),(0,o.kt)("h2",{id:"id-introduction"},"Introduction"),(0,o.kt)("p",null,"When building an API, you may need a transformation layer that sits between your models and the JSON responses that\nare actually returned to your application's users. For example, you may wish to display certain attributes for a\nsubset of users and not others, or you may wish to always include certain relationships in the JSON representation\nof your models. Athenna's resource classes allow you to expressively and easily transform your models and array of\nmodels into JSON."),(0,o.kt)("p",null,"Of course, you may always convert Athenna models or array of models to JSON using their ",(0,o.kt)("inlineCode",{parentName:"p"},"toJSON")," methods; however,\nAthenna resources provide more granular and robust control over the JSON serialization of your models and their\nrelationships."),(0,o.kt)("h2",{id:"id-generating-resources"},"Generating resources"),(0,o.kt)("p",null,"To generate a resource class, you may use the ",(0,o.kt)("inlineCode",{parentName:"p"},"make:resource")," Artisan command. By default, resources will be placed\nin the ",(0,o.kt)("inlineCode",{parentName:"p"},"app/Resources")," directory of your application. Resources extend the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/AthennaIO/Database/blob/develop/src/Models/Resource.js"},(0,o.kt)("inlineCode",{parentName:"a"},"Resource")),"\nclass:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan make:resource UserResource\n")),(0,o.kt)("h2",{id:"id-writing-resources"},"Writing resources"),(0,o.kt)("p",null,"Before you can use your resource class you will need to set up the static ",(0,o.kt)("inlineCode",{parentName:"p"},"blueprint")," method in your resource class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Resource } from '@athenna/database'\n\nexport class UserResource extends Resource {\n  static blueprint(object) {\n    return {\n      id: object.id,\n      name: object.name,\n      email: object.email,\n      createdAt: object.createdAt,\n      updatedAt: object.updatedAt\n    }\n  }\n}\n")),(0,o.kt)("p",null,"Every resource class defines a static ",(0,o.kt)("inlineCode",{parentName:"p"},"blueprint")," method which returns the record of attributes that should be\nconverted to JSON when using the ",(0,o.kt)("inlineCode",{parentName:"p"},"toJson")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"toArray")," methods of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Resource")," class."),(0,o.kt)("h2",{id:"id-using-resources"},"Using resources"),(0,o.kt)("p",null,"Once the resource is defined, we can start using the ",(0,o.kt)("inlineCode",{parentName:"p"},"toJson")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { User } from '#app/Models/User'\nimport { UserResource } from '#app/Resources/UserResource'\n\nconst user = await User.find()\nconst json = UserResource.toJson(user)\n")),(0,o.kt)("p",null,"You can also use the ",(0,o.kt)("inlineCode",{parentName:"p"},"toArray")," method to convert arrays of objects:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await User.findMany()\nconst json = UserResource.toArray(users)\n")),(0,o.kt)("p",null,"If the data mapped in your static ",(0,o.kt)("inlineCode",{parentName:"p"},"blueprint")," method has not been found in the object, it will be removed from the\nresource:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.query().select('id', 'name').find()\nconst json = UserResource.toJson(user) // { id: 1, name: 'Valmir Barbosa' }\n")),(0,o.kt)("p",null,"If the value is present in your object, but its values is ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),", it will be set in your object resource. Only the\n",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," values will be removed from your resources:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.query().select('id', 'name', 'deletedAt').find()\n\nuser.testing = undefined\n\nconst json = UserResource.toJson(user)\n// { id: 1, name: 'Valmir Barbosa', deletedAt: null }\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You are not limited to use resource classes only with models. You can use any type of object with the resources:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const objects = [{\n    name: 'Valmir Barbosa',\n    email: 'valmirphp@gmail.com'\n}]\n\nconst json = UserResource.toArray(objects)\n// [{ name: 'Valmir Barbosa', email: 'valmirphp@gmail.com' }]\n")),(0,o.kt)("p",{parentName:"div"},"The serialization of your resources will always depend on your business logic and creativity."))),(0,o.kt)("h3",{id:"id-the-to-resource-method"},"The ",(0,o.kt)("inlineCode",{parentName:"h3"},"toResource")," method"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"toResource")," method will always be available in your models. By default, it will execute the ",(0,o.kt)("inlineCode",{parentName:"p"},"toJSON")," method, but\nwe recommend you to implement your ",(0,o.kt)("inlineCode",{parentName:"p"},"toResource")," method to make use of your ",(0,o.kt)("inlineCode",{parentName:"p"},"Resource")," class. Let's see in the above\nexample how to do it with the ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," model:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Model } from '@athenna/database'\nimport { UserResource } from '#app/Resources/UserResource'\n\nexport class User extends Model {\n  toResource() {\n    return UserResource.toJson(this)\n  }\n\n  /*...*/\n}\n")),(0,o.kt)("p",null,"Now you can easily convert your ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," model to a resource by calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"toResource")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.find()\nconst json = user.toResource()\n")),(0,o.kt)("h3",{id:"id-the-to-resource-method-in-arrays-and-collections"},"The ",(0,o.kt)("inlineCode",{parentName:"h3"},"toResource")," method in arrays and collections"),(0,o.kt)("p",null,"Athenna has extended the prototype of the JavaScript ",(0,o.kt)("inlineCode",{parentName:"p"},"Array")," class to have the ",(0,o.kt)("inlineCode",{parentName:"p"},"toResource")," method. This method\nwill always call the ",(0,o.kt)("inlineCode",{parentName:"p"},"toResource")," method of each item in your array if it exists:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await User.findMany()\nconst json = users.toResource()\n")),(0,o.kt)("p",null,"You can also use the ",(0,o.kt)("inlineCode",{parentName:"p"},"toResource")," method when using Athenna collections:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const usersCollection = await User.collection()\nconst json = usersCollection.toResource()\n")),(0,o.kt)("p",null,"If you are using a different object that doesn't have the ",(0,o.kt)("inlineCode",{parentName:"p"},"toResource")," method, the itens in the array will not be\nchanged, basically, nothing will happen:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const objects = [{/*....*/}]\nconst theSameArray = objects.toResource()\n")),(0,o.kt)("h2",{id:"id-converting-relationships"},"Converting relationships"),(0,o.kt)("p",null,"If you would like to include related resources in your json, you may load them first in the object that your resource's\nstatic ",(0,o.kt)("inlineCode",{parentName:"p"},"blueprint")," method will use to build your json. In this example, we will use the ",(0,o.kt)("inlineCode",{parentName:"p"},"PostResource")," resource's\nstatic ",(0,o.kt)("inlineCode",{parentName:"p"},"toArray")," method to add the user's blog posts to the resource:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Resource } from '@athenna/database'\nimport { PostResource } from '#app/Resources/PostResource'\n\nexport class UserResource extends Resource {\n  static blueprint(object) {\n    return {\n      id: object.id,\n      name: object.name,\n      email: object.email,\n      posts: PostResource.toArray(object.posts),\n      createdAt: object.createdAt,\n      updatedAt: object.updatedAt\n    }\n  }\n}\n")),(0,o.kt)("p",null,"Now we can simply use it this way:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.query().with('posts').find()\nconst json = user.toResource()\n")),(0,o.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you don't load your relationships before calling your resource class, it will be set as ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," in the json when\nusing the ",(0,o.kt)("inlineCode",{parentName:"p"},"toJson")," method and set as an empty array when using the ",(0,o.kt)("inlineCode",{parentName:"p"},"toArray")," method:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// User without blog posts loaded\nconst user = await User.query()\n    .select('id', 'name', 'email')\n    .find()\n\nconst json = user.toResource()\n// { id: 1, name: 'Valmir Barbosa', email: 'valmirphp@gmail.com', posts: [] }\n")))))}p.isMDXComponent=!0}}]);