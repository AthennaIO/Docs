"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[5691],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),l=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?i.createElement(h,a(a({ref:t},p),{},{components:n})):i.createElement(h,a({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var l=2;l<o;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6063:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return p}});var i=n(7462),r=n(3366),o=(n(7294),n(3905)),a=["components"],c={sidebar_position:3,id:"mocking",title:"Mocking",hide_title:!0,hide_table_of_contents:!0,tags:["Testing"]},s=void 0,l={unversionedId:"testing/mocking",id:"testing/mocking",title:"Mocking",description:"\ud83c\udfe0",source:"@site/docs/testing/mocking.mdx",sourceDirName:"testing",slug:"/testing/mocking",permalink:"/docs/testing/mocking",editUrl:"https://github.com/AthennaIO/Docs/docs/testing/mocking.mdx",tags:[{label:"Testing",permalink:"/docs/tags/testing"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"mocking",title:"Mocking",hide_title:!0,hide_table_of_contents:!0,tags:["Testing"]},sidebar:"tutorialSidebar",previous:{title:"HTTP Tests",permalink:"/docs/testing/http-tests"}},p=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Mocking providers",id:"id-mocking-providers",children:[],level:2},{value:"Mocking internal providers",id:"id-mocking-internal-providers",children:[],level:2}],m={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("nav",{"aria-label":"breadcrumbs"},(0,o.kt)("ul",{class:"breadcrumbs"},(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link"},"Testing")),(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link",href:"/docs/testing/mocking"},"Mocking")))),(0,o.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,o.kt)("h1",{id:"mocking"},"Mocking"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"introduction"},(0,o.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"mocking-providers"},(0,o.kt)("a",{parentName:"h4",href:"#id-mocking-providers"},"Mocking providers"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"mocking-internal-providers"},(0,o.kt)("a",{parentName:"h4",href:"#id-mocking-internal-providers"},"Mocking internal providers")))),(0,o.kt)("h2",{id:"id-introduction"},"Introduction"),(0,o.kt)("p",null,'When testing Athenna applications, you may wish to "mock" certain aspects of your application, so they are not actually\nexecuted during a given test. For example, when testing a controller that dispatches a http request to other service, you\nmay wish to mock the request, so they are not actually executed during the test. This allows you to only test the controller\'s\nHTTP response without worrying about the execution of the http request since the http request can be tested in their own test case.'),(0,o.kt)("p",null,"Athenna still does not provide helpful methods for mocking, but you can easily mock everything that is registered inside\nthe ",(0,o.kt)("a",{parentName:"p",href:"/docs/architecture-concepts/container"},(0,o.kt)("inlineCode",{parentName:"a"},"service container")),"."),(0,o.kt)("h2",{id:"id-mocking-providers"},"Mocking providers"),(0,o.kt)("p",null,"To mock an object that is going to be injected into Athenna ",(0,o.kt)("a",{parentName:"p",href:"/docs/architecture-concepts/container"},(0,o.kt)("inlineCode",{parentName:"a"},"service container")),",\nyou can use the global ",(0,o.kt)("inlineCode",{parentName:"p"},"ioc")," property in your ",(0,o.kt)("inlineCode",{parentName:"p"},"tests/main.js")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { WelcomeServiceMock } from '#tests/Stubs/WelcomeServiceMock'\n\n/*\n|--------------------------------------------------------------------------\n| Service container mocking\n|--------------------------------------------------------------------------\n|\n| Reserve this space to set mocks for the service container using the global\n| 'ioc' instance. It's important for this code to stay before where we\n| ignite the application.\n*/\n\nioc.mock('App/Services/WelcomeService', WelcomeServiceMock)\n")),(0,o.kt)("p",null,"As you can see we are mocking the ",(0,o.kt)("inlineCode",{parentName:"p"},"App/Services/WelcomeService")," alias. Now everytime that the application bootstrap by your\n",(0,o.kt)("inlineCode",{parentName:"p"},"tests/main.js")," file it will register the ",(0,o.kt)("inlineCode",{parentName:"p"},"WelcomeServiceMock")," class as the dependency for the ",(0,o.kt)("inlineCode",{parentName:"p"},"App/Services/WelcomeService")," alias."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you notice we are mocking the alias ",(0,o.kt)("inlineCode",{parentName:"p"},"App/Services/WelcomeService"),". This alias refer to the ",(0,o.kt)("inlineCode",{parentName:"p"},"app/Services/WelcomeService.js")," file\nin your application. You can mock all your services just changing the final name of the alias to your service name. That's the same\nfor the ",(0,o.kt)("inlineCode",{parentName:"p"},"App/Repositories/...")," aliases."))),(0,o.kt)("h2",{id:"id-mocking-internal-providers"},"Mocking internal providers"),(0,o.kt)("p",null,"Maybe you may want to mock one of the Athenna internal providers such as ",(0,o.kt)("inlineCode",{parentName:"p"},"Log"),". To do that, you can check what is the alias\nof ",(0,o.kt)("inlineCode",{parentName:"p"},"Log")," dependency in ",(0,o.kt)("a",{parentName:"p",href:"/docs/architecture-concepts/facades#id-facade-class-reference"},"facade class reference")," session.\nThen we can do the same configuration above to ",(0,o.kt)("inlineCode",{parentName:"p"},"Log"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Log } from '#tests/Stubs/LogMock'\nimport { WelcomeServiceMock } from '#tests/Stubs/WelcomeServiceMock'\n\n/*\n|--------------------------------------------------------------------------\n| Service container mocking\n|--------------------------------------------------------------------------\n|\n| Reserve this space to set mocks for the service container using the global\n| 'ioc' instance. It's important for this code to stay before where we\n| ignite the application.\n*/\n\nioc.mock('Athenna/Core/Logger', Log)\nioc.mock('App/Services/WelcomeService', WelcomeServiceMock)\n")))}d.isMDXComponent=!0}}]);