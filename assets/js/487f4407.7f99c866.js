"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[7439],{8020:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var t=i(5893),s=i(1151);const a={title:"Views",sidebar_position:2,description:"Understand how you can use the Athenna view API."},o="Views",r={id:"the-basics/views",title:"Views",description:"Understand how you can use the Athenna view API.",source:"@site/docs/the-basics/views.mdx",sourceDirName:"the-basics",slug:"/the-basics/views",permalink:"/docs/the-basics/views",draft:!1,unlisted:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/the-basics/views.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Views",sidebar_position:2,description:"Understand how you can use the Athenna view API."},sidebar:"tutorialSidebar",previous:{title:"Logging",permalink:"/docs/the-basics/logging"},next:{title:"Helpers",permalink:"/docs/the-basics/helpers"}},d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Creating &amp; rendering views",id:"creating--rendering-views",level:2},{value:"Nested view disks",id:"nested-view-disks",level:3},{value:"Rendering raw string",id:"rendering-raw-string",level:3},{value:"In-memory views",id:"in-memory-views",level:3},{value:"Passing data to views",id:"passing-data-to-views",level:2},{value:"Sharing data with all views",id:"sharing-data-with-all-views",level:3},{value:"Optimizing views",id:"optimizing-views",level:2},{value:"Customizing <code>make</code> commands templates",id:"customizing-make-commands-templates",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"views",children:"Views"}),"\n",(0,t.jsx)(n.p,{children:"Understand how you can use the Athenna view API."}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"Athenna's view API is specifically for email templates and\ntemplates used by Artisan commands to generate your\napplication files. Our focus at the moment is to be a focused\nframework for development of backend applications, using\nmicroservices or not. You can still use this API for creating\nmonolith application in Athenna, but it will require a little\nbit more of configuration. Nothing prevents us from adding\nsupport for writing monolithic applications in the future,\nadding useful methods for working with views in your REST API\nfor example."}),"\n",(0,t.jsxs)(n.p,{children:["If you think this is an interesting feature, and think you\ncan contribute to the project with it, feel free to open a\n",(0,t.jsx)(n.a,{href:"https://github.com/orgs/AthennaIO/discussions",children:"discussion"}),"\nat Athenna organization, any contribution is welcome!"]}),"\n",(0,t.jsx)(n.h2,{id:"creating--rendering-views",children:"Creating & rendering views"}),"\n",(0,t.jsxs)(n.p,{children:["You may create a view by placing a file with the ",(0,t.jsx)(n.code,{children:".edge"}),"\nextension in any directory of your application's, we recommend\nthe ",(0,t.jsx)(n.code,{children:"resources/views"})," directory.\nThe ",(0,t.jsx)(n.code,{children:".edge"})," extension informs the framework that the file\ncontains an ",(0,t.jsx)(n.a,{href:"https://github.com/edge-js/edge",children:"Edge template"}),'.\nEdge templates contain HTML as well as Edge directives that\nallow you to easily log values, create "if" statements,\niterate over data, and more.']}),"\n",(0,t.jsxs)(n.p,{children:["Once you have created a view file, eg: ",(0,t.jsx)(n.code,{children:"resources/views/welcome.edge"}),",\nyou may register your view disk inside ",(0,t.jsx)(n.code,{children:"Path.config('view.ts')"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Path } from '@athenna/common'\n\nexport default {\n  disks: {\n    disk: Path.views(),\n  },\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now you may render it using the ",(0,t.jsx)(n.code,{children:"View.render()"})," or\n",(0,t.jsx)(n.code,{children:"View.renderSync()"})," methods from ",(0,t.jsx)(n.code,{children:"View"})," facade:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { View } from '@athenna/view'\n\nawait View.render('disk::welcome', { greeting: 'Hello world' })\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As you can see, the first argument passed to the\n",(0,t.jsx)(n.code,{children:"View.render()"})," method corresponds to the name of the view\ndisk following the name of the file in the ",(0,t.jsx)(n.code,{children:"resources/views"}),"\ndirectory. The second argument is an object of data that\nshould be made available to the view. In this case, we are\npassing the ",(0,t.jsx)(n.code,{children:"greeting"})," variable, which is displayed in the\nview using Edge syntax."]}),"\n",(0,t.jsx)(n.h3,{id:"nested-view-disks",children:"Nested view disks"}),"\n",(0,t.jsxs)(n.p,{children:['View disks may also be nested within subdirectories. "Slash"\nnotation may be used to reference nested view disks. For\nexample, if your view is stored at\n',(0,t.jsx)(n.code,{children:"resources/views/admin/profile.edge"}),", you may like so:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { View } from '@athenna/view'\n\nawait View.render('disk::admin/profile', { name: 'Jacob Smith' })\n"})}),"\n",(0,t.jsx)(n.h3,{id:"rendering-raw-string",children:"Rendering raw string"}),"\n",(0,t.jsxs)(n.p,{children:["You can render raw template string values using the\n",(0,t.jsx)(n.code,{children:"View.renderRaw()"})," or ",(0,t.jsx)(n.code,{children:"View.renderRawSync()"})," methods:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"await View.renderRaw('<p>Hello {{ name }}</p>', {\n    name: 'Jacob Smith'\n})\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Raw strings do not enjoy the benefits of ",(0,t.jsx)(n.a,{href:"/docs/the-basics/views#optimizing-views",children:"template caching"}),"\nas there are not associated with a unique path."]})}),"\n",(0,t.jsx)(n.h3,{id:"in-memory-views",children:"In-memory views"}),"\n",(0,t.jsx)(n.p,{children:"You can register in-memory views without creating any file\non the disk. You can find it useful whenever you want\nto split a large template file into several smaller ones\nor also if you want to provide some templates as part of\na npm package:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { View } from '@athenna/view'\n\nView.createComponent('myuikit/button', '<button {{ $props.serializeExcept([\"title\"]) }}>{{ title }}</button>')\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can render the template directly or use it as a\ncomponent with the exact name given to the\n",(0,t.jsx)(n.code,{children:"View.createComponent()"})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-edge",children:"@!component('myuikit/button', {\n  title: 'Signup',\n  class: ['btn', 'btn-primary'],\n  id: 'signup'\n})\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["You can also use the ",(0,t.jsx)(n.code,{children:"View.createTemplate()"})," method to\nregister templates. The only difference between them is\nthat ",(0,t.jsx)(n.code,{children:"View.createTemplate()"})," does not throws errors if\nsome template name already exists, instead the old template\nwill be replaced."]})}),"\n",(0,t.jsx)(n.h2,{id:"passing-data-to-views",children:"Passing data to views"}),"\n",(0,t.jsx)(n.p,{children:"As you saw in the previous examples, you may pass an object of\ndata to views to make that data available to the view:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { View } from '@athenna/view'\n\nawait View.render('disk::welcome', { name: 'Jacob Smith' })\n"})}),"\n",(0,t.jsx)(n.p,{children:"When passing information in this manner, the data should be\nan object with key / value pairs. After providing data to a\nview, you can then access each value within your view like so:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-edge",children:"<p>Welcome {{ name }}!</p>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"sharing-data-with-all-views",children:"Sharing data with all views"}),"\n",(0,t.jsxs)(n.p,{children:["Occasionally, you may need to share data with all views that\nare rendered by your application. You may do so using the\n",(0,t.jsx)(n.code,{children:"View"})," facade's ",(0,t.jsx)(n.code,{children:"addProperty()"})," method. Typically, you should\nplace calls to the ",(0,t.jsx)(n.code,{children:"View.addProperty()"})," method within a\nservice provider's ",(0,t.jsx)(n.code,{children:"boot()"})," method. You are free to add them\nto the ",(0,t.jsx)(n.code,{children:"providers/AppProvider"})," class or generate a separate\nservice provider to house them:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { View } from '@athenna/view'\nimport { ServiceProvider } from '@athenna/ioc'\n\nexport default class AppProvider extends ServiceProvider {\n    public async boot() {\n        View.addProperty('key', 'value')\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"optimizing-views",children:"Optimizing views"}),"\n",(0,t.jsx)(n.p,{children:"Compiling a template to a JavaScript function is a\ntime-consuming process, and hence it is recommended to cache\nthe compiled templates in production."}),"\n",(0,t.jsxs)(n.p,{children:["You can control the template caching using the ",(0,t.jsx)(n.code,{children:"edge.cache"}),"\nproperty inside ",(0,t.jsx)(n.code,{children:"Path.config('view.ts')"})," file. Just make sure to set\nthe value to ",(0,t.jsx)(n.code,{children:"true"})," in the production environment:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Path } from '@athenna/common'\n\nexport default {\n  disks: {\n    disk: Path.views(),\n  },\n\n  edge: {\n    // Set to `true` in production only\n    cache: true \ud83d\udc48\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"All the templates are cached within the memory. Currently,\nwe do not have any plans to support on-disk caching since\nthe value provided for the efforts is too low."}),"\n",(0,t.jsx)(n.p,{children:"The raw text does not take up too much space, and even\nkeeping thousands of pre-compiled templates in memory should\nnot be a problem."}),"\n",(0,t.jsxs)(n.h2,{id:"customizing-make-commands-templates",children:["Customizing ",(0,t.jsx)(n.code,{children:"make"})," commands templates"]}),"\n",(0,t.jsxs)(n.p,{children:["The Artisan console's ",(0,t.jsx)(n.code,{children:"make"})," commands are used to create\na variety of classes, such as controllers, services,\ncommands, and tests. These classes are generated using\n",(0,t.jsx)(n.code,{children:".edge"})," files that are populated with values based on\nyour input. However, you may want to make small changes\nto files generated by Artisan. To accomplish this, you\nmay use the ",(0,t.jsx)(n.code,{children:"template:customize"})," command to publish the\nmost common stubs to your application so that you can\ncustomize them:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"node artissan template:customize\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The customized templates will be located in the\n",(0,t.jsx)(n.code,{children:"Path.resources('templates')"})," directory. Any change\nyou make to these stubs will be reflected when you\ngenerate their correspoding classes using Artisan's\n",(0,t.jsx)(n.code,{children:"make"})," commands."]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>o});var t=i(7294);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);