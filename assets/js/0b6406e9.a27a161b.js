"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[8459],{6039:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>h});var s=n(4848),i=n(8453),t=n(7049);const o={title:"Service Providers",sidebar_position:3,description:"Understand the purpose and how to use the Athenna service providers."},c="Service Providers",a={id:"architecture-concepts/service-providers",title:"Service Providers",description:"Understand the purpose and how to use the Athenna service providers.",source:"@site/docs/architecture-concepts/service-providers.mdx",sourceDirName:"architecture-concepts",slug:"/architecture-concepts/service-providers",permalink:"/docs/architecture-concepts/service-providers",draft:!1,unlisted:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/architecture-concepts/service-providers.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Service Providers",sidebar_position:3,description:"Understand the purpose and how to use the Athenna service providers."},sidebar:"tutorialSidebar",previous:{title:"Service Container",permalink:"/docs/architecture-concepts/service-container"},next:{title:"Facades",permalink:"/docs/architecture-concepts/facades"}},d={},h=[{value:"Introduction",id:"introduction",level:2},{value:"Writing service providers",id:"writing-service-providers",level:2},{value:"The <code>register</code> method",id:"the-register-method",level:3},{value:"The <code>boot</code> method",id:"the-boot-method",level:3},{value:"The <code>shutdown</code> method",id:"the-shutdown-method",level:3},{value:"Registering providers",id:"registering-providers",level:2},{value:"Choosing applications",id:"choosing-applications",level:2}];function l(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"service-providers",children:"Service Providers"})}),"\n",(0,s.jsx)(r.p,{children:"Understand the purpose and how to use the Athenna service providers."}),"\n",(0,s.jsx)(r.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(r.p,{children:"Service providers are the central place of all Athenna application bootstrapping.\nYour own application, as well as all of Athenna core services, are bootstrapped\nvia service providers."}),"\n",(0,s.jsx)(r.p,{children:'But what do we mean by "bootstrapped"? In general, we mean registering things,\nincluding registering service container bindings, retry strategies for your http\nrequests, booting your FakeApi. Service providers are the central place to\nconfigure your application.'}),"\n",(0,s.jsxs)(r.p,{children:["If you open the ",(0,s.jsx)(r.code,{children:".athennarc.json"})," file included with Athenna, you will see a\n",(0,s.jsx)(r.code,{children:"providers"})," array. These are all the service provider classes that will be\nloaded for your application. By default, a set of Athenna core service\nproviders are listed in this array. These providers bootstrap the core\nAthenna components, such as the http, route, controllers and others."]}),"\n",(0,s.jsx)(r.p,{children:"In this overview, you will learn how to write your own service providers and\nregister them with your Athenna application."}),"\n",(0,s.jsx)(r.admonition,{type:"tip",children:(0,s.jsxs)(r.p,{children:["If you would like to learn more about how Athenna works internally, check\nout the ",(0,s.jsx)(r.a,{href:"/docs/architecture-concepts/application-lifecycle",children:"application lifecycle documentation section"}),"."]})}),"\n",(0,s.jsx)(r.h2,{id:"writing-service-providers",children:"Writing service providers"}),"\n",(0,s.jsxs)(r.p,{children:["All service providers extend the ",(0,s.jsx)(r.code,{children:"ServiceProvider"})," class. Most service providers\ncontain a ",(0,s.jsx)(r.code,{children:"register"})," and a ",(0,s.jsx)(r.code,{children:"boot"})," method. Within the ",(0,s.jsx)(r.code,{children:"register"})," method, you should\nonly bind things into the service container. We will check lately why this\nbehavior. To create a new provider, use the following command:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"node artisan make:provider AppProvider\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"the-register-method",children:["The ",(0,s.jsx)(r.code,{children:"register"})," method"]}),"\n",(0,s.jsxs)(r.p,{children:["As mentioned previously, within the ",(0,s.jsx)(r.code,{children:"register"})," method, you should only bind\nthings into the service container. You should never attempt to register any\npiece of functionality within the ",(0,s.jsx)(r.code,{children:"register"})," method. Otherwise, you may\naccidentally use a service provided by a service provider which has\nnot loaded yet."]}),"\n",(0,s.jsxs)(r.p,{children:["Let's take a look at a basic service provider. Within any of your service\nprovider methods, you always have access to the ",(0,s.jsx)(r.code,{children:"this.container"})," property\nwhich provides access to the service container:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { ServiceProvider } from '@athenna/ioc'\nimport { AppHelper } from '#src/helpers/AppHelper'\n\nexport default class AppProvider extends ServiceProvider {\n   public register() {\n     this.container.singleton('App/Helpers/AppHelper', AppHelper)\n   }\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["This service provider only defines a ",(0,s.jsx)(r.code,{children:"register"})," method, and uses that method to\ndefine an implementation of ",(0,s.jsx)(r.code,{children:"AppHelper"})," in the service container. If you're\nnot yet familiar with Athenna service container, ",(0,s.jsx)(r.a,{href:"/docs/architecture-concepts/service-container",children:"check out its documentation"}),"."]}),"\n",(0,s.jsxs)(r.h3,{id:"the-boot-method",children:["The ",(0,s.jsx)(r.code,{children:"boot"})," method"]}),"\n",(0,s.jsxs)(r.p,{children:["So, what if we need to register a dependency that needs another dependency\nwithin our service provider? This should be done within the ",(0,s.jsx)(r.code,{children:"boot"})," method.\nThis method is called after all other service providers have been registered,\nmeaning you have access to all other services that have been registered by\nthe framework:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { ServiceProvider } from '@athenna/ioc'\nimport { AppHelper } from '#src/helpers/AppHelper'\n\nexport default class AppProvider extends ServiceProvider {\n   public boot() {\n     const appService = this.container.safeUse('App/Services/AppService')\n     const appHelper = new AppHelper(appService)\n\n     this.container.instance('App/Helpers/AppHelper', appHelper)\n   }\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"the-shutdown-method",children:["The ",(0,s.jsx)(r.code,{children:"shutdown"})," method"]}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"shutdown"})," method will be called when the application is going down for\nsome reason. This method is extremely useful for graceful shutdown the\napplication, and it's used in providers such as ",(0,s.jsx)(r.code,{children:"HttpServerProvider"})," and\n",(0,s.jsx)(r.code,{children:"DatabaseProvider"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { ServiceProvider } from '@athenna/ioc'\n\nexport default class AppProvider extends ServiceProvider {\n   public async shutdown() {\n     const appHelper = this.container.use('App/Helpers/AppHelper')\n\n     if (!appHelper) {\n       return\n     }\n\n     await appHelper.close()\n   }\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"registering-providers",children:"Registering providers"}),"\n",(0,s.jsxs)(r.p,{children:["All service providers are registered in the ",(0,s.jsx)(r.code,{children:".athennarc.json file"}),". This file\ncontains a ",(0,s.jsx)(r.code,{children:"providers"})," array where you can list the class names of your service\nproviders. By default, a set of Athenna core service providers are listed in\nthis array. These providers bootstrap the core Athenna components, such as\nthe http, route, services and others."]}),"\n",(0,s.jsxs)(r.p,{children:["If you are using the ",(0,s.jsx)(r.code,{children:"make:provider"})," command to create providers, Athenna\nwill automatically register the provider for you in this array, but if you\nmight need to register it manually, just add the path to it to the array:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-json",children:'{\n  "providers": [\n    // Other service providers...\n\n    "#src/providers/AppProvider"\n  ]\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"choosing-applications",children:"Choosing applications"}),"\n",(0,s.jsxs)(r.p,{children:["In some cases you want that your provider only runs for a determined type of\nAthenna applications. For example, I have a ",(0,s.jsx)(r.code,{children:"MockedDbProvider"})," that connects\nwith some database if I don't have an Artisan command that do some work\ninside this database, why I would need to run this ",(0,s.jsx)(r.code,{children:"MockedDbProvider"})," when\nrunning Artisan application and commands?"]}),"\n",(0,s.jsxs)(r.p,{children:["To solve this problem you can use the ",(0,s.jsx)(r.code,{children:"environment"})," getter to choose the\napplications that could run this provider:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { ServiceProvider } from '@athenna/ioc'\n\nexport default class MockedDbProvider extends ServiceProvider {\n   public get environment() {\n     return ['http', 'repl']\n   }\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Now when running Artisan application and commands, ",(0,s.jsx)(r.code,{children:"MockedDbProvider"})," will be\nignored."]}),"\n",(0,s.jsx)(r.p,{children:"The following environments are available by default in Athenna at this moment:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"http"}),"\n",(0,s.jsx)(r.li,{children:"repl"}),"\n",(0,s.jsx)(r.li,{children:"console"}),"\n",(0,s.jsx)(r.li,{children:"cron"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["You could also create your own environments. In your ",(0,s.jsx)(t.A,{father:"bin",child:"main.ts"})," file\nyou can add an ",(0,s.jsx)(r.code,{children:"environments"})," option when calling ",(0,s.jsx)(r.code,{children:"Ignite.load()"})," method:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { Ignite } from '@athenna/core'\n\nconst ignite = await new Ignite().load(import.meta.url, {\n  environments: ['myEnv']\n})\n\nawait ignite.httpServer()\n"})}),"\n",(0,s.jsxs)(r.p,{children:["All of your environments will be merged with Athenna default ones when running\nyour application. This means that in the example above, when running your\nhttp server, the providers bootstrapped will be only the ones that got the\nenvironments getter returning ",(0,s.jsx)(r.code,{children:"['*']"})," and ",(0,s.jsx)(r.code,{children:"['myEnv', 'http']"}),"."]})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},7049:(e,r,n)=>{n.d(r,{A:()=>t});n(6540);const s={hoverCardContainer:"hoverCardContainer_jqUQ",hoverCardLink:"hoverCardLink_oDZU",hoverCard:"hoverCard_qTDS"};var i=n(4848);function t(e){let r=e.father;switch(e.father){case"storage":r="src/storage";break;case"logs":r="src/storage/logs";break;case"views":r="src/resources/views";break;case"locales":r="src/resources/locales";break;case"static":r="src/resources/static";break;case"config":r="src/config";break;case"database":r="src/database";break;case"seeders":r="src/database/seeders";break;case"migrations":r="src/database/migrations";break;case"console":r="src/console";break;case"commands":r="src/console/commands";break;case"cron":r="src/cron";break;case"schedulers":r="src/cron/schedulers";break;case"models":r="src/models";break;case"services":r="src/services";break;case"repositories":r="src/repositories";break;case"http":r="src/http";break;case"controllers":r="src/http/controllers";break;case"middlewares":r="src/http/middlewares";break;case"interceptors":r="src/http/interceptors";break;case"terminators":r="src/http/terminators";break;case"stubs":r="tests/stubs";break;case"fixtures":r="tests/fixtures";break;case"providers":r="src/providers";break;case"facades":r="src/facades";break;case"routes":r="src/routes"}return(0,i.jsxs)("div",{className:s.hoverCardContainer,children:[(0,i.jsx)("a",{className:s.hoverCardLink,href:`/docs/the-basics/helpers#path${e.father}`,children:(0,i.jsxs)("code",{children:["Path.",e.father,"(",e.child?`'${e.child}'`:"",")"]})}),(0,i.jsx)("div",{className:s.hoverCard,children:(0,i.jsxs)("p",{style:{margin:0},children:["./",r,e.child?`/${e.child}`:""]})})]})}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>c});var s=n(6540);const i={},t=s.createContext(i);function o(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);