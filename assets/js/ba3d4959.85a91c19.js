"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[784],{3905:function(e,a,t){t.d(a,{Zo:function(){return c},kt:function(){return m}});var n=t(7294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=n.createContext({}),d=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},c=function(e){var a=d(e.components);return n.createElement(l.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},p=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),m=i,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||r;return t?n.createElement(h,o(o({ref:a},c),{},{components:t})):n.createElement(h,o({ref:a},c))}));function m(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=p;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<r;d++)o[d]=t[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1935:function(e,a,t){t.r(a),t.d(a,{contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var n=t(7462),i=t(3366),r=(t(7294),t(3905)),o=["components"],s={sidebar_position:1,id:"getting-started",title:"Getting Started",hide_title:!0,hide_table_of_contents:!0,tags:["Database"]},l=void 0,d={unversionedId:"database/getting-started",id:"database/getting-started",title:"Getting Started",description:"\ud83c\udfe0",source:"@site/docs/database/getting-started.mdx",sourceDirName:"database",slug:"/database/getting-started",permalink:"/docs/database/getting-started",editUrl:"https://github.com/AthennaIO/Docs/docs/database/getting-started.mdx",tags:[{label:"Database",permalink:"/docs/tags/database"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"getting-started",title:"Getting Started",hide_title:!0,hide_table_of_contents:!0,tags:["Database"]},sidebar:"tutorialSidebar",previous:{title:"Helmet",permalink:"/docs/security/helmet"},next:{title:"Query Builder",permalink:"/docs/database/query-builder"}},c=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Installation",id:"id-installation",children:[],level:2},{value:"Configuration",id:"id-configuration",children:[{value:"Available connection drivers",id:"id-available-connection-drivers",children:[],level:3},{value:"Overview of some environment variables",id:"id-overview-of-some-environment-variables",children:[{value:"DB_CONNECTION",id:"db_connection",children:[],level:4},{value:"DB_DEBUG",id:"db_debug",children:[],level:4},{value:"DB_AUTO_CONNECT",id:"db_auto_connect",children:[],level:4}],level:3}],level:2},{value:"Database operations",id:"id-database-operations",children:[{value:"Creating and dropping a database",id:"id-creating-and-dropping-a-database",children:[],level:4},{value:"Creating and dropping a table",id:"id-creating-and-dropping-a-table",children:[],level:4},{value:"Running and reverting migrations",id:"id-running-and-reverting-migrations",children:[],level:4},{value:"Transactions",id:"id-transactions",children:[],level:4}],level:2},{value:"Running queries",id:"id-running-queries",children:[{value:"Running a find query",id:"id-running-a-find-query",children:[],level:4},{value:"Running a findMany query",id:"id-running-a-findMany-query",children:[],level:4},{value:"Running a create query",id:"id-running-a-create-query",children:[],level:4},{value:"Running a createMany query",id:"id-running-a-createMany-query",children:[],level:4},{value:"Running an update query",id:"id-running-an-update-query",children:[],level:4},{value:"Running a delete query",id:"id-running-an-update-query",children:[],level:4},{value:"Using multiple database connections",id:"id-using-multiple-database-connections",children:[],level:3},{value:"Closing database connections",id:"id-closing-database-connections",children:[],level:3}],level:2},{value:"Database transactions",id:"id-database-transactions",children:[],level:2}],u={toc:c};function p(e){var a=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("nav",{"aria-label":"breadcrumbs"},(0,r.kt)("ul",{class:"breadcrumbs"},(0,r.kt)("li",{class:"breadcrumbs__item"},(0,r.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,r.kt)("li",{class:"breadcrumbs__item"},(0,r.kt)("a",{class:"breadcrumbs__link"},"Database")),(0,r.kt)("li",{class:"breadcrumbs__item"},(0,r.kt)("a",{class:"breadcrumbs__link",href:"/docs/database/getting-started"},"Getting Started")))),(0,r.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,r.kt)("h1",{id:"database-getting-started"},"Database: Getting Started"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"introduction"},(0,r.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"installation"},(0,r.kt)("a",{parentName:"h4",href:"#id-installation"},"Installation"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"configuration"},(0,r.kt)("a",{parentName:"h4",href:"#id-configuration"},"Configuration")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"available-connection-drivers"},(0,r.kt)("a",{parentName:"h4",href:"#id-available-connection-drivers"},"Available connection drivers"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"overview-of-some-environment-variables"},(0,r.kt)("a",{parentName:"h4",href:"#id-overview-of-some-environment-variables"},"Overview of some environment variables"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"database-operations"},(0,r.kt)("a",{parentName:"h4",href:"#id-database-operations"},"Database operations"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"running-queries"},(0,r.kt)("a",{parentName:"h4",href:"#id-running-queries"},"Running queries")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"using-multiple-database-connections"},(0,r.kt)("a",{parentName:"h4",href:"#id-using-multiple-database-connections"},"Using multiple database connections"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"closing-database-connections"},(0,r.kt)("a",{parentName:"h4",href:"#id-closing-database-connections"},"Closing database connections"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"database-transactions"},(0,r.kt)("a",{parentName:"h4",href:"#id-database-transactions"},"Database transactions")))),(0,r.kt)("h2",{id:"id-introduction"},"Introduction"),(0,r.kt)("p",null,"Almost every modern application interacts with a database. Athenna makes interacting with databases extremely simple across\na variety of supported databases using a fluent query builder and the ORM."),(0,r.kt)("h2",{id:"id-installation"},"Installation"),(0,r.kt)("p",null,"Athenna provides a very simple command inside ",(0,r.kt)("inlineCode",{parentName:"p"},"@athenna/cli")," package to easily install and configure the database package\nin your project. In your project root path run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"athenna install:database\n")),(0,r.kt)("p",null,"This command will do the following operations in your project:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Install ",(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/pg"},(0,r.kt)("inlineCode",{parentName:"a"},"pg"))," package"),(0,r.kt)("li",{parentName:"ul"},"Install ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/AthennaIO/Database"},(0,r.kt)("inlineCode",{parentName:"a"},"@athenna/database"))," package"),(0,r.kt)("li",{parentName:"ul"},"Create ",(0,r.kt)("inlineCode",{parentName:"li"},"config/database.js")," file"),(0,r.kt)("li",{parentName:"ul"},"Add the database provider to ",(0,r.kt)("inlineCode",{parentName:"li"},"config/app.js")," file in providers property"),(0,r.kt)("li",{parentName:"ul"},"Add the database commands and templates to ",(0,r.kt)("inlineCode",{parentName:"li"},"app/Commands/Kernel.js")),(0,r.kt)("li",{parentName:"ul"},"Add environment variables to your ",(0,r.kt)("inlineCode",{parentName:"li"},".env")," file"),(0,r.kt)("li",{parentName:"ul"},"Create ",(0,r.kt)("inlineCode",{parentName:"li"},"docker-compose.yaml")," file"),(0,r.kt)("li",{parentName:"ul"},"Lint your project")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"PostgreSQL is the default database of ",(0,r.kt)("inlineCode",{parentName:"p"},"install:database")," command. If you want to configure for MySQL database use the ",(0,r.kt)("inlineCode",{parentName:"p"},"--db=mysql"),"\nargument."))),(0,r.kt)("h2",{id:"id-configuration"},"Configuration"),(0,r.kt)("p",null,"All the configuration options for your application's database behavior is housed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"config/database.js")," configuration file.\nThis file allows you to configure your application's database connections, so be sure to review each of the available connections\nand their options. We'll review a few common options below."),(0,r.kt)("h3",{id:"id-available-connection-drivers"},"Available connection drivers"),(0,r.kt)("p",null,'Each database connection is powered by a "driver". The driver determines how and where the data is actually transported.\nThe following database connection drivers are available in every Athenna application. An entry for most of these drivers is\nalready present in your application\'s ',(0,r.kt)("inlineCode",{parentName:"p"},"config/database.js")," configuration file, so be sure to review this file to become\nfamiliar with its contents:"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Name"),(0,r.kt)("th",null,"Website"),(0,r.kt)("th",null,"Built with"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"mysql")),(0,r.kt)("td",null,(0,r.kt)("a",{target:"_blank",href:"https://www.mysql.com/"},"https://www.mysql.com/")),(0,r.kt)("td",null,(0,r.kt)("a",{target:"_blank",href:"https://knexjs.org/"},"Knex"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"postgresql")),(0,r.kt)("td",null,(0,r.kt)("a",{target:"_blank",href:"https://www.postgresql.org/"},"https://www.postgresql.org/")),(0,r.kt)("td",null,(0,r.kt)("a",{target:"_blank",href:"https://knexjs.org/"},"Knex"))))),(0,r.kt)("h3",{id:"id-overview-of-some-environment-variables"},"Overview of some environment variables"),(0,r.kt)("p",null,"After installing the database component using the Athenna CLI you can check your ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file in your project root path,\nthe Athenna CLI have added some environment variables there to help you connect to your database. These variables are:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dotenv"},"DB_CONNECTION=postgres\nDB_HOST=127.0.0.1\nDB_PORT=5432\nDB_DEBUG=false\nDB_USERNAME=root\nDB_PASSWORD=root\nDB_DATABASE=database\nDB_AUTO_CONNECT=true\n")),(0,r.kt)("p",null,"Let's focus in ",(0,r.kt)("strong",{parentName:"p"},"DB_CONNECTION, DB_DEBUG and DB_AUTO_CONNECT")," variables:"),(0,r.kt)("h4",{id:"db_connection"},"DB_CONNECTION"),(0,r.kt)("p",null,"This variable specify for Athenna what is the default connection name that should be used by ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," facade when running\ndatabase operations."),(0,r.kt)("h4",{id:"db_debug"},"DB_DEBUG"),(0,r.kt)("p",null,"This variable are useful when running your application locally, If ",(0,r.kt)("inlineCode",{parentName:"p"},"DB_DEBUG")," is true, then you will be able to see all the queries\nbeing executed in your database."),(0,r.kt)("h4",{id:"db_auto_connect"},"DB_AUTO_CONNECT"),(0,r.kt)("p",null,"This variable specify for Athenna if the default connection should be auto connected inside ",(0,r.kt)("inlineCode",{parentName:"p"},"DatabaseProvider"),". We set the\nvalue of this variable as ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," when bootstrapping the application by ",(0,r.kt)("inlineCode",{parentName:"p"},"bootstrap/main.js")," file, but when running the application\nfrom ",(0,r.kt)("inlineCode",{parentName:"p"},"artisan")," we set this variable to false. If this variable is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," you will need to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"connect")," method from\n",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," facade, we will check how to use it further in the documentation."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Before going through the documentation, remember to run ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/"},(0,r.kt)("inlineCode",{parentName:"a"},"docker-compose up -d"))," to start\nup the database in your machine."))),(0,r.kt)("h2",{id:"id-database-operations"},"Database operations"),(0,r.kt)("p",null,"Once you have configured your database connection, you may communicate with it using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," facade. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Database"),"\nfacade provides a lot of methods to perform database operations such as ",(0,r.kt)("strong",{parentName:"p"},"creating, dropping and listing databases/tables,\nrunning and reverting")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/database/migrations"},(0,r.kt)("strong",{parentName:"a"},"migrations")),(0,r.kt)("strong",{parentName:"p"},",")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/database/getting-started#id-database-transactions"},(0,r.kt)("strong",{parentName:"a"},"transactions")),(0,r.kt)("strong",{parentName:"p"},",\nqueries, connecting to new databases and also closing these connections.")),(0,r.kt)("h4",{id:"id-creating-and-dropping-a-database"},"Creating and dropping a database"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Database } from '@athenna/database'\n\nawait Database.createDatabase('hello')\nawait Database.dropDatabase('hello')\n")),(0,r.kt)("p",null,"You can also get all databases names as string and check if some database name exists:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const databases = await Database.getDatabases() // ['postgres']\nconst current = await Database.getCurrentDatabase() // 'postgres'\n\nawait Database.hasDatabase('postgres') // true\nawait Database.hasDatabase('not-found') // false\n")),(0,r.kt)("h4",{id:"id-creating-and-dropping-a-table"},"Creating and dropping a table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Database } from '@athenna/database'\n\nawait Database.createTable('products', table => {\n    table.increments('id').primary()\n})\n\nawait Database.dropTable('products')\n")),(0,r.kt)("p",null,"You can also get all tables names as string and check if some table name exists:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const tables = await Database.getTables() // ['users']\n\nawait Database.hasTable('users') // true\nawait Database.hasTable('not-found') // false\n")),(0,r.kt)("h4",{id:"id-running-and-reverting-migrations"},"Running and reverting migrations"),(0,r.kt)("p",null,"If you don't know what is a migration you can check ",(0,r.kt)("a",{parentName:"p",href:"/docs/database/migrations"},(0,r.kt)("inlineCode",{parentName:"a"},"clicking here"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"await Database.runMigrations()\nawait Database.revertMigrations()\n")),(0,r.kt)("h4",{id:"id-transactions"},"Transactions"),(0,r.kt)("p",null,"If you don't know what is a transaction you can check ",(0,r.kt)("a",{parentName:"p",href:"/docs/database/getting-started#id-database-transactions"},(0,r.kt)("inlineCode",{parentName:"a"},"clicking here"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Log } from '@athenna/logger'\n\nconst trx = await Database.startTransaction()\nconst query = trx.table('users')\n\nconst users = [] // Imagine a lot of users to be inserted here...\n\ntry {\n    await query.createMany(users)\n\n    await trx.commitTransaction()\n} catch (error) {\n    // If some user in the \"users\" array has been created,\n    // it will be removed if one fails to insert.\n    await trx.rollbackTransaction()\n\n    Log.error('Failed to create one of the users. Original error: %s', JSON.stringify(error))\n}\n")),(0,r.kt)("h2",{id:"id-running-queries"},"Running queries"),(0,r.kt)("p",null,"You may use the ",(0,r.kt)("inlineCode",{parentName:"p"},"table")," method provided by the ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," facade to begin a query. The ",(0,r.kt)("inlineCode",{parentName:"p"},"table")," method returns a\nfluent query builder instance for the given table, allowing you to chain more constraints onto the query and then finally\nretrieve the results of the query using one of the ",(0,r.kt)("strong",{parentName:"p"},"executors")," methods. These are the most relevant methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"find"),(0,r.kt)("li",{parentName:"ul"},"findMany"),(0,r.kt)("li",{parentName:"ul"},"create"),(0,r.kt)("li",{parentName:"ul"},"createMany"),(0,r.kt)("li",{parentName:"ul"},"update"),(0,r.kt)("li",{parentName:"ul"},"delete")),(0,r.kt)("p",null,"Everytime that you use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," facade you are using a different instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"DatabaseImpl")," class. This means that you\nwould need to call ",(0,r.kt)("inlineCode",{parentName:"p"},"table")," method everytime for different queries. To get around this, you can save the instance in a local\nvariable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Database } from '@athenna/database'\n\nconst userQuery = Database.table('users') // First instance of QueryBuilder\nconst orderQuery = Database.table('orders') // Second instance of QueryBuilder\nconst productsQuery = Database.table('products') // Third instance of QueryBuilder\n")),(0,r.kt)("h4",{id:"id-running-a-find-query"},"Running a find query"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," method is useful to retrieve only one record that match the query statements from database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const query = Database.table('users')\n\nconst { id, name } = await query\n    .select('id', 'name')\n    .where({ id: 10 })\n    .find()\n")),(0,r.kt)("h4",{id:"id-running-a-findMany-query"},"Running a findMany query"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"findMany")," method is useful to retrieve more than one record that match the query statements from database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const query = Database.table('users')\n\nconst users = await query\n    .select('id', 'name')\n    .whereNull('deletedAt')\n    .whereLike('name', '%Lenon%')\n    .orderBy('name', 'DESC')\n    .findMany()\n")),(0,r.kt)("h4",{id:"id-running-a-create-query"},"Running a create query"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," method is useful to create one record in database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const query = Database.table('users')\n\nconst user = await query.create({ name: 'Victor Tesoura' })\n")),(0,r.kt)("h4",{id:"id-running-a-createMany-query"},"Running a createMany query"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"createMany")," method is useful to create many records in database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const query = Database.table('users')\n\nconst users = await query.createMany([\n    { name: 'Victor Tesoura' },\n    { name: 'Jo\xe3o Lenon' }\n])\n")),(0,r.kt)("h4",{id:"id-running-an-update-query"},"Running an update query"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"update")," method is useful to update one or more records based in statements in database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const query = Database.table('users')\n\nconst users = await query\n    .select('id', 'name')\n    .whereIn('id', [1, 2])\n    .orderBy('name', 'ASC')\n    .update({ name: 'Danrley Morais' })\n")),(0,r.kt)("h4",{id:"id-running-an-update-query"},"Running a delete query"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"delete")," method is useful to delete one or more records based in statements in database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const query = Database.table('users')\n\nawait query.whereBetween('id', [1, 10]).delete()\n")),(0,r.kt)("h3",{id:"id-using-multiple-database-connections"},"Using multiple database connections"),(0,r.kt)("p",null,"If your application defines multiple connections in your ",(0,r.kt)("inlineCode",{parentName:"p"},"config/database.js")," configuration file, you may access each\nconnection via the ",(0,r.kt)("inlineCode",{parentName:"p"},"connection")," method provided by the ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," facade. The connection name passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"connection"),"\nmethod should correspond to one of the connections listed in your ",(0,r.kt)("inlineCode",{parentName:"p"},"config/database.js")," configuration file. You also need\nto explicit call the ",(0,r.kt)("inlineCode",{parentName:"p"},"connect")," method when working with other connection that is not the default:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const database = await Database.connection('mysql').connect()\nconst query = database.table('users')\n\nconst users = await query\n    .select('id', 'name')\n    .whereNotIn('id', [1, 2])\n    .orderBy('name', 'ASC')\n    .findMany()\n")),(0,r.kt)("p",null,"The connection created by the ",(0,r.kt)("inlineCode",{parentName:"p"},"connect")," method will be stored inside the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AthennaIO/Database/blob/develop/src/Factories/DriverFactory.js"},(0,r.kt)("inlineCode",{parentName:"a"},"DriverFactory")),"\nclass. This means that if you call the ",(0,r.kt)("inlineCode",{parentName:"p"},"connection")," method of ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," facade again, you don't need to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"connect")," method again:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"await Datatabase.connection('mysql')\n    .table('users')\n    .select('id', 'name')\n    .whereNotIn('id', [1, 2])\n    .orderBy('name', 'ASC')\n    .findMany()\n")),(0,r.kt)("p",null,"You can force ",(0,r.kt)("inlineCode",{parentName:"p"},"connect")," method to not save the connection instance in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AthennaIO/Database/blob/develop/src/Factories/DriverFactory.js"},(0,r.kt)("inlineCode",{parentName:"a"},"DriverFactory")),"\npassing some properties to it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const force = false // Force the connection to be established\nconst saveOnDriver = false // Set if connection should be saved in Database driver or not\n\nconst database = await Datatabase.connection('mysql').connect(force, saveOnDriver)\n\nawait database\n    .table('users')\n    .select('id', 'name')\n    .whereNotIn('id', [1, 2])\n    .orderBy('name', 'ASC')\n    .findMany()\n")),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you specify to ",(0,r.kt)("inlineCode",{parentName:"p"},"connect")," method that you don't want to save the connection in driver, you will need to close the connection\nusing ",(0,r.kt)("strong",{parentName:"p"},"your")," database instance. We will see next how to close a database connection."))),(0,r.kt)("h3",{id:"id-closing-database-connections"},"Closing database connections"),(0,r.kt)("p",null,"You can simply close a connection using the ",(0,r.kt)("inlineCode",{parentName:"p"},"close")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"closeAll")," methods of ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," facade:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"await Database.close()\nawait Database.connection('mysql').close()\n\nawait Database.closeAll()\n")),(0,r.kt)("p",null,"Remember that when creating a connection that will not be saved in driver, you will need to close the connection\nusing ",(0,r.kt)("strong",{parentName:"p"},"your")," database instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const force = false\nconst saveOnDriver = false\n\nconst database = await Datatabase.connection('mysql').connect(force, saveOnDriver)\n\nawait database\n    .table('users')\n    .select('id', 'name')\n    .whereNotIn('id', [1, 2])\n    .orderBy('name', 'ASC')\n    .findMany()\n\nawait database.close()\n\n// The code below will not close the connection\n// created above since DriverFactory doesn't\n// know what is your connection.\nawait Database.connection('mysql').close()\n")),(0,r.kt)("h2",{id:"id-database-transactions"},"Database transactions"),(0,r.kt)("p",null,"You may use the ",(0,r.kt)("inlineCode",{parentName:"p"},"startTransaction")," method provided by the ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," facade to run a set of operations within a database\ntransaction. You can use a ",(0,r.kt)("inlineCode",{parentName:"p"},"try/catch")," block to verify if an exception is thrown within your try block, and roll back if\nsome error occurs. If the closure executes successfully, the transaction should be committed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const trx = await Database.startTransaction()\n\ntry {\n    await trx.raw('update users set votes = 1')\n    await trx.table('posts').delete()\n\n    await trx.commitTransaction()\n} catch (err) {\n    await trx.rollbackTransaction()\n}\n")))}p.isMDXComponent=!0}}]);