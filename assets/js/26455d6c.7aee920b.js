"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[5691],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=l(n),m=a,u=h["".concat(c,".").concat(m)]||h[m]||d[m]||r;return n?o.createElement(u,s(s({ref:t},p),{},{components:n})):o.createElement(u,s({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[h]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<r;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6063:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=n(7462),a=(n(7294),n(3905));const r={title:"Mocking",sidebar_position:4,description:"Understand how to mock dependencies and functions in Athenna."},s="Mocking",i={unversionedId:"testing/mocking",id:"testing/mocking",title:"Mocking",description:"Understand how to mock dependencies and functions in Athenna.",source:"@site/docs/testing/mocking.mdx",sourceDirName:"testing",slug:"/testing/mocking",permalink:"/docs/testing/mocking",draft:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/testing/mocking.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Mocking",sidebar_position:4,description:"Understand how to mock dependencies and functions in Athenna."},sidebar:"tutorialSidebar",previous:{title:"CLI Testing",permalink:"/docs/testing/cli-tests"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Mocking API",id:"mocking-api",level:2},{value:"The <code>Mock::when()</code> method",id:"the-mockwhen-method",level:3},{value:"Mocking a class method",id:"mocking-a-class-method",level:4},{value:"The <code>Mock::spy()</code> method",id:"the-mockspy-method",level:3},{value:"The <code>Mock::fake()</code> method",id:"the-mockfake-method",level:3},{value:"Mocking services",id:"mocking-services",level:2},{value:"Replacing the entire service",id:"replacing-the-entire-service",level:3},{value:"Mocking facades",id:"mocking-facades",level:2},{value:"Facade stubs",id:"facade-stubs",level:3},{value:"Facade spies",id:"facade-spies",level:3},{value:"Assertions in mocks",id:"assertions-in-mocks",level:2},{value:"Mocking commands",id:"mocking-commands",level:2}],p={toc:l},h="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mocking"},"Mocking"),(0,a.kt)("p",null,"Understand how to mock dependencies and functions in Athenna."),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,'When testing Athenna applications, you may wish to "mock"\ncertain aspects of your application, so they are not actually\nexecuted during a given test. For example, when testing a\ncontroller that calls a service, you may wish to mock the\nservice, so they are not actually executed during the test.\nThis allows you to only test the controller\'s HTTP response\nwithout worrying about the execution of the service since\nthe service can be tested in their own test case.'),(0,a.kt)("h2",{id:"mocking-api"},"Mocking API"),(0,a.kt)("h3",{id:"the-mockwhen-method"},"The ",(0,a.kt)("inlineCode",{parentName:"h3"},"Mock::when()")," method"),(0,a.kt)("p",null,"This method is responsible for mocking the return\nvalue of a given object method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Test, Mock, type Context, AfterEach } from '@athenna/test'\n\nexport default class MockTest {\n  public object = {\n    hello: () => undefined\n  }\n\n  @AfterEach()\n  public afterEach() {\n    Mock.restoreAll()\n  }\n\n  @Test()\n  public async mockAnObjectMethod({ assert }: Context) {\n    Mock.when(this.object, 'hello').return('hello world')\n\n    assert.equal(this.object.hello(), 'hello world')\n  }\n}\n")),(0,a.kt)("p",null,"You can also use this method to throw an error when the\ngiven method is called:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"@Test()\npublic async shouldBeAbleToMockAnObjectMethod({ assert }: Context) {\n  Mock.when(this.object, 'hello').throw(new Error('hello world'))\n\n  assert.throw(() => this.object.hello(), 'hello world')\n}\n")),(0,a.kt)("p",null,"For promises, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"resolve()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"reject()")," methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"@Test()\npublic async mockAnObjectMethod({ assert }: Context) {\n  // Resolving a promise\n  Mock.when(this.object, 'hello').resolve('hello world')\n  assert.equal(await this.object.hello(), 'hello world')\n\n  // Rejecting a promise\n  Mock.when(this.object, 'hello').reject(new Error('hello world'))\n  await assert.rejects(() => this.object.hello(), 'hello world')\n}\n")),(0,a.kt)("p",null,"If you don't have access to the method you want to mock, you can\nsave the return of ",(0,a.kt)("inlineCode",{parentName:"p"},"Mock::when()")," method and use it to make your\nassertions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"@Test()\npublic async mockAnObjectMethod({ assert }: Context) {\n  const helloMock = Mock.when(this.object, 'hello').resolve('hello world')\n\n  await this.someMethodThatCallsHelloMethod()\n\n  assert.isTrue(helloMock.called)\n}\n")),(0,a.kt)("h4",{id:"mocking-a-class-method"},"Mocking a class method"),(0,a.kt)("p",null,"There are two ways to mock a class method. The first one is\nmocking the class instance directly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ApiHelper } from '#app/helpers/ApiHelper'\nimport { Test, Mock, type Context, AfterEach } from '@athenna/test'\n\nexport default class MockTest {\n  public apiHelper = new ApiHelper()\n\n  @AfterEach()\n  public afterEach() {\n    Mock.restoreAll()\n  }\n\n  @Test()\n  public async mockAClassMethod({ assert }: Context) {\n    Mock.when(this.apiHelper, 'findOne').return({ fake: true })\n\n    assert.deepEqual(this.apiHelper.findOne(), { fake: true })\n  }\n}\n")),(0,a.kt)("p",null,"With this approach, you can only mock the method for the current\ninstance. If another instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"ApiHelper")," is created, that\none will not be mocked."),(0,a.kt)("p",null,"To mock a class method for all instances of a given class, you\nneed to mock the class ",(0,a.kt)("inlineCode",{parentName:"p"},"prototype"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ApiHelper } from '#app/helpers/ApiHelper'\nimport { Test, Mock, type Context, AfterEach } from '@athenna/test'\n\nexport default class MockTest {\n  @AfterEach()\n  public afterEach() {\n    Mock.restoreAll()\n  }\n\n  @Test()\n  public async mockAClassMethod({ assert }: Context) {\n    Mock.when(ApiHelper.prototype, 'findOne').return({ fake: true })\n\n    assert.deepEqual(new ApiHelper().findOne(), { fake: true })\n  }\n}\n")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Never forget to restore all mocks after each test case. If you don't\nrestore it, the mock will be kept in memory and will affect your other\ntests. Test cases should be isolated from each other, so always try to\ncreate your mocks inside your test cases to avoid problems when your\napplication gets bigger.")),(0,a.kt)("h3",{id:"the-mockspy-method"},"The ",(0,a.kt)("inlineCode",{parentName:"h3"},"Mock::spy()")," method"),(0,a.kt)("p",null,"This method is responsible for spying on a given object method.\nDifferent from ",(0,a.kt)("inlineCode",{parentName:"p"},"Mock::when()"),", this method will not change the\nbehavior of the method, it will only spy it and allow you to verify\nif the given method was called, how many times, and with which params:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ApiHelper } from '#app/helpers/ApiHelper'\nimport { Test, Mock, type Context, AfterEach } from '@athenna/test'\n\nexport default class MockTest {\n  @AfterEach()\n  public afterEach() {\n    Mock.restoreAll()\n  }\n\n  @Test()\n  public async spyAClassMethod({ assert }: Context) {\n    Mock.spy(ApiHelper.prototype, 'findOne')\n\n    const apiHelper = new ApiHelper()\n\n    apiHelper.findOne()\n\n    assert.calledOnce(apiHelper.findOne)\n  }\n}\n")),(0,a.kt)("p",null,"Just like ",(0,a.kt)("inlineCode",{parentName:"p"},"Mock::when()"),", if you don't have access to the method\nyou want to spy, you can save the return of ",(0,a.kt)("inlineCode",{parentName:"p"},"Mock::spy()")," method\nand use it to make your assertions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"@Test()\npublic async spyAClassMethod({ assert }: Context) {\n  const findOneSpy = Mock.spy(ApiHelper.prototype, 'findOne')\n\n  await this.someMethodThatCallsApiHelperFindOne()\n\n  assert.calledOnce(findOneSpy)\n}\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"For more assertions like ",(0,a.kt)("inlineCode",{parentName:"p"},"assert.calledOnce()")," method, check the\n",(0,a.kt)("a",{parentName:"p",href:"/docs/testing/mocking#assertion-in-mocks"},"assertion in mocks"),"\ndocumentation section.")),(0,a.kt)("p",null,"Since ",(0,a.kt)("inlineCode",{parentName:"p"},"Mock::spy()")," does not change the behavior of the method,\nbut only spies it, you can use it to spy all the methods of a\ngiven object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"@Test()\npublic async spyAnEntireClass({ assert }: Context) {\n  Mock.spy(ApiHelper.prototype)\n\n  const apiHelper = new ApiHelper()\n\n  apiHelper.findOne()\n\n  assert.calledOnce(apiHelper.findOne)\n}\n")),(0,a.kt)("h3",{id:"the-mockfake-method"},"The ",(0,a.kt)("inlineCode",{parentName:"h3"},"Mock::fake()")," method"),(0,a.kt)("p",null,"This method is responsible for creating a fake object that\nyou can in parallel with ",(0,a.kt)("inlineCode",{parentName:"p"},"Mock::when()")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ApiHelper } from '#app/helpers/ApiHelper'\nimport { Test, Mock, type Context, AfterEach } from '@athenna/test'\n\nexport default class MockTest {\n  @AfterEach()\n  public afterEach() {\n    Mock.restoreAll()\n  }\n\n  @Test()\n  public async mockReturnOfClassMethod({ assert }: Context) {\n    Mock.when(ApiHelper.prototype, 'findOne').return({\n      hello: Mock.fake()\n    })\n\n    const apiHelper = new ApiHelper()\n\n    const result = apiHelper.findOne()\n\n    result.hello()\n\n    assert.calledOnce(result.hello)\n    assert.calledOnce(apiHelper.findOne)\n  }\n}\n")),(0,a.kt)("h2",{id:"mocking-services"},"Mocking services"),(0,a.kt)("p",null,"Mocking a service is the same process of mocking a simple class\nusing the ",(0,a.kt)("inlineCode",{parentName:"p"},"prototype")," property:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { AppService } from '#app/services/AppService'\nimport { Test, Mock, type Context, AfterEach } from '@athenna/test'\n\nexport default class MockTest {\n  @AfterEach()\n  public afterEach() {\n    Mock.restoreAll()\n  }\n\n  @Test()\n  public async mockServiceMethod({ assert }: Context) {\n    Mock.when(AppService.prototype, 'findOne').return({ fake: true }) \ud83d\udc48\n\n    assert.deepEqual(new AppService().findOne(), { fake: true })\n  }\n}\n")),(0,a.kt)("h3",{id:"replacing-the-entire-service"},"Replacing the entire service"),(0,a.kt)("p",null,"Sometimes you may want to have more control over the service\ninstance; for this scenario, we recommend you to create a new instance\nof the service within your test class, registering it in the service\ncontainer and then mocking the method you want in each test case:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { AppService } from '#app/services/AppService'\nimport { BaseHttpTest } from '@athenna/core/testing/BaseHttpTest'\nimport { Test, type Context, BeforeAll, Mock, AfterEach } from '@athenna/test'\n\nexport default class AppControllerTest extends BaseHttpTest {\n  public appService = new AppService()\n\n  @BeforeAll()\n  public async beforeAll() {\n    ioc.instance('App/Services/AppService', this.appService) \ud83d\udc48\n  }\n\n  @AfterEach()\n  public async afterEach() {\n    Mock.restoreAll()\n  }\n\n  @Test()\n  public async mockServiceMethod({ assert, request }: Context) {\n    Mock.when(this.appService, 'findOne').return({ fake: true }) \ud83d\udc48\n\n    const response = await request.get('/api/v1')\n\n    response.assertStatusCode(200)\n    response.assertBodyContains({ fake: true })\n    assert.calledOnce(this.appService.findOne)\n  }\n}\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Keep in mind that if you change your service alias in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"@Service()")," annotation, you will also need to use the same\nvalue in the ",(0,a.kt)("inlineCode",{parentName:"p"},"ioc.instance()")," method."),(0,a.kt)("p",{parentName:"admonition"},"For more information, check the ",(0,a.kt)("a",{parentName:"p",href:"/docs/architecture-concepts/service-container#the-service-annotation"},(0,a.kt)("inlineCode",{parentName:"a"},"@Service()")),"\nannotation documentation section.")),(0,a.kt)("p",null,"With ",(0,a.kt)("inlineCode",{parentName:"p"},"ioc.instance()")," method, you can also create an entire different\nimplementation of your service that will be used only for testing:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=\"Path.fixtures('services/FakeAppService.ts')\"",title:"\"Path.fixtures('services/FakeAppService.ts')\""},"import { AppServiceInterface } from '#app/interfaces/AppServiceInterface'\n\nexport class FakeAppService implements AppServiceInterface {\n  public findOne() {\n    return { fake: true }\n  }\n}\n")),(0,a.kt)("p",null,"And now let's use it in our test class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { BaseHttpTest } from '@athenna/core/testing/BaseHttpTest'\nimport { FakeAppService } from '#tests/fixtures/services/FakeAppService'\nimport { Test, type Context, BeforeAll, Mock, AfterEach } from '@athenna/test'\n\nexport default class AppControllerTest extends BaseHttpTest {\n  @BeforeAll()\n  public async beforeAll() {\n    ioc.instance('App/Services/AppService', new FakeAppService()) \ud83d\udc48\n  }\n\n  @AfterEach()\n  public async afterEach() {\n    Mock.restoreAll()\n  }\n\n  @Test()\n  public async mockServiceMethod({ request }: Context) {\n    const response = await request.get('/api/v1')\n\n    response.assertStatusCode(200)\n    response.assertBodyContains({ fake: true }) \ud83d\udc48\n  }\n}\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Taste the power of dependency injection! \ud83d\ude80\ud83e\uddd9\u200d\u2642\ufe0f")),(0,a.kt)("h2",{id:"mocking-facades"},"Mocking facades"),(0,a.kt)("p",null,"When testing, you may often want to mock a call to\nan Athenna facade that occurs in your code logic.\nFor example, consider the following controller action:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Mail } from '@athenna/mail'\nimport { Controller, type Context } from '@athenna/http'\n\n@Controller()\nexport class UserController {\n  public async store({ response }: Context) {\n    const user = {\n      name: 'Antoine Du Hamel',\n      email: 'duhamelantoine1995@gmail.com'\n    }\n\n    await Mail.from('lenon@athenna.io')\n        .to(user.email)\n        .subject(`Welcome ${user.name} to Athenna!`)\n        .html('<h1>Welcome to Athenna!</h1>')\n        .send()\n\n    return response.status(200).send(user)\n  }\n}\n")),(0,a.kt)("p",null,"We can mock the call to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Mail")," facade by using the\n",(0,a.kt)("inlineCode",{parentName:"p"},"when()")," method, check the example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Mail } from '@athenna/mail'\nimport { BaseHttpTest } from '@athenna/core/testing/BaseHttpTest'\nimport { Test, type Context, Mock, AfterEach } from '@athenna/test'\n\nexport default class AppControllerTest extends BaseHttpTest {\n  @AfterEach()\n  public async afterEach() {\n    Mock.restoreAll()\n  }\n\n  @Test()\n  public async mockMailSendMethod({ assert, request }: Context) {\n    Mail.when('send').resolve(undefined) \ud83d\udc48\n\n    const response = await request.post('/api/v1/users')\n\n    assert.calledOnce(Mail.send) \ud83d\udc48\n    response.assertStatusCode(200)\n    response.assertBodyContains([\n        // ...\n    ])\n  }\n}\n")),(0,a.kt)("h3",{id:"facade-stubs"},"Facade stubs"),(0,a.kt)("p",null,"Coming soon..."),(0,a.kt)("h3",{id:"facade-spies"},"Facade spies"),(0,a.kt)("p",null,"Coming soon..."),(0,a.kt)("h2",{id:"assertions-in-mocks"},"Assertions in mocks"),(0,a.kt)("p",null,"Coming soon..."),(0,a.kt)("h2",{id:"mocking-commands"},"Mocking commands"),(0,a.kt)("p",null,"Coming soon..."))}d.isMDXComponent=!0}}]);