"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[3594],{3905:function(e,a,t){t.d(a,{Zo:function(){return u},kt:function(){return m}});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=n.createContext({}),d=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},u=function(e){var a=d(e.components);return n.createElement(o.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(t),m=r,h=c["".concat(o,".").concat(m)]||c[m]||p[m]||i;return t?n.createElement(h,s(s({ref:a},u),{},{components:t})):n.createElement(h,s({ref:a},u))}));function m(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=c;var l={};for(var o in a)hasOwnProperty.call(a,o)&&(l[o]=a[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var d=2;d<i;d++)s[d]=t[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9542:function(e,a,t){t.r(a),t.d(a,{contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var n=t(7462),r=t(3366),i=(t(7294),t(3905)),s=["components"],l={sidebar_position:2,id:"query-builder",title:"Query Builder",hide_title:!0,hide_table_of_contents:!0,tags:["Database","Query builder"]},o=void 0,d={unversionedId:"database/query-builder",id:"database/query-builder",title:"Query Builder",description:"\ud83c\udfe0",source:"@site/docs/database/query-builder.mdx",sourceDirName:"database",slug:"/database/query-builder",permalink:"/docs/database/query-builder",editUrl:"https://github.com/AthennaIO/Docs/docs/database/query-builder.mdx",tags:[{label:"Database",permalink:"/docs/tags/database"},{label:"Query builder",permalink:"/docs/tags/query-builder"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"query-builder",title:"Query Builder",hide_title:!0,hide_table_of_contents:!0,tags:["Database","Query builder"]},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/database/getting-started"},next:{title:"Migrations",permalink:"/docs/database/migrations"}},u=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Running database queries",id:"id-running-database-queries",children:[{value:"Retrieve all rows from a table",id:"id-retrieve-all-rows-from-a-table",children:[],level:3},{value:"Retrieve a single row",id:"id-retrieve-a-single-row",children:[],level:3},{value:"Get the client and query builder of driver",id:"id-get-the-client-of-driver",children:[],level:3}],level:2},{value:"Aggregates",id:"id-aggregates",children:[],level:2},{value:"Select statements",id:"id-select-statements",children:[],level:2},{value:"Raw expressions",id:"id-raw-expressions",children:[{value:"Raw methods",id:"id-raw-methods",children:[{value:"<code>selectRaw</code>",id:"id-select-raw",children:[],level:4},{value:"<code>whereRaw / orWhereRaw</code>",id:"id-where-raw",children:[],level:4},{value:"<code>havingRaw / orHavingRaw</code>",id:"id-having-raw",children:[],level:4},{value:"<code>orderByRaw</code>",id:"id-orderby-raw",children:[],level:4},{value:"<code>groupByRaw</code>",id:"id-groupby-raw",children:[],level:4}],level:3}],level:2},{value:"Joins",id:"id-joins",children:[{value:"Inner join clause",id:"id-inner-join-clause",children:[],level:3},{value:"Other join clauses",id:"id-other-join-clauses",children:[],level:3},{value:"Advanced join clauses",id:"id-advanced-join-clauses",children:[],level:3}],level:2},{value:"Basic where clauses",id:"id-basic-where-clauses",children:[{value:"Where clauses",id:"id-where-clauses",children:[{value:"Or where clauses",id:"id-or-where-clauses",children:[],level:4},{value:"Where not clauses",id:"id-where-not-clauses",children:[],level:4}],level:3},{value:"Additional where clauses",id:"id-additional-where-clauses",children:[],level:3},{value:"Logical grouping",id:"id-logical-grouping",children:[],level:3}],level:2},{value:"Advanced where clauses",id:"id-advanced-where-clauses",children:[{value:"Where exists clauses",id:"id-where-exists-clauses",children:[],level:3}],level:2},{value:"Ordering, grouping, limit &amp; skip",id:"id-ordering-grouping-limit-and-skip",children:[{value:"Ordering",id:"id-ordering",children:[{value:"The <code>orderBy</code> method",id:"id-the-orderby-method",children:[],level:4},{value:"The <code>latest</code> &amp; <code>oldest</code> methods",id:"id-the-latest-and-oldest-methods",children:[],level:4}],level:3},{value:"Grouping",id:"id-grouping",children:[{value:"The <code>groupBy</code> &amp; <code>having</code> methods",id:"id-the-groupby-and-having-method",children:[],level:4}],level:3},{value:"Limit &amp; Offset",id:"limit--offset",children:[],level:3}],level:2},{value:"Conditional clauses",id:"id-conditional-clauses",children:[],level:2},{value:"Pagination",id:"id-pagination",children:[],level:2},{value:"Insert statements",id:"id-insert-statements",children:[{value:"Create or update (Upsert)",id:"id-create-or-update",children:[],level:3}],level:2},{value:"Update statements",id:"id-update-statements",children:[{value:"Incrementing &amp; decrementing",id:"id-incrementing-and-decrementing",children:[],level:3}],level:2},{value:"Delete statements",id:"id-delete-statements",children:[],level:2},{value:"Debugging",id:"id-debugging",children:[],level:2}],p={toc:u};function c(e){var a=e.components,t=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("nav",{"aria-label":"breadcrumbs"},(0,i.kt)("ul",{class:"breadcrumbs"},(0,i.kt)("li",{class:"breadcrumbs__item"},(0,i.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,i.kt)("li",{class:"breadcrumbs__item"},(0,i.kt)("a",{class:"breadcrumbs__link"},"Database")),(0,i.kt)("li",{class:"breadcrumbs__item"},(0,i.kt)("a",{class:"breadcrumbs__link",href:"/docs/database/query-builder"},"Query Builder")))),(0,i.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,i.kt)("h1",{id:"database-query-builder"},"Database: Query Builder"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"introduction"},(0,i.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"running-database-queries"},(0,i.kt)("a",{parentName:"h4",href:"#id-running-database-queries"},"Running database queries")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"get-the-client-of-driver"},(0,i.kt)("a",{parentName:"h4",href:"#id-get-the-client-of-driver"},"Get the client of driver"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"aggregates"},(0,i.kt)("a",{parentName:"h4",href:"#id-aggregates"},"Aggregates"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"select-statements"},(0,i.kt)("a",{parentName:"h4",href:"#id-select-statements"},"Select statements"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"raw-expressions"},(0,i.kt)("a",{parentName:"h4",href:"#id-raw-expressions"},"Raw expressions"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"joins"},(0,i.kt)("a",{parentName:"h4",href:"#id-joins"},"Joins"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"basic-where-clauses"},(0,i.kt)("a",{parentName:"h4",href:"#id-basic-where-clauses"},"Basic where clauses")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"where-clauses"},(0,i.kt)("a",{parentName:"h4",href:"#id-where-clauses"},"Where clauses"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"or-where-clauses"},(0,i.kt)("a",{parentName:"h4",href:"#id-or-where-clauses"},"Or where clauses"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"where-not-clauses"},(0,i.kt)("a",{parentName:"h4",href:"#id-where-not-clauses"},"Where not clauses"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"additional-where-clauses"},(0,i.kt)("a",{parentName:"h4",href:"#id-additional-where-clauses"},"Additional where clauses"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"logical-grouping"},(0,i.kt)("a",{parentName:"h4",href:"#id-logical-grouping"},"Logical grouping"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"advanced-where-clauses"},(0,i.kt)("a",{parentName:"h4",href:"#id-advanced-where-clauses"},"Advanced where clauses")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"where-exists-clauses"},(0,i.kt)("a",{parentName:"h4",href:"#id-where-exists-clauses"},"Where exists clauses"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"ordering-grouping-limit--skip"},(0,i.kt)("a",{parentName:"h4",href:"#id-ordering-grouping-limit-and-skip"},"Ordering, grouping, limit & skip"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"conditional-clauses"},(0,i.kt)("a",{parentName:"h4",href:"#id-conditional-clauses"},"Conditional clauses"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"pagination"},(0,i.kt)("a",{parentName:"h4",href:"#id-pagination"},"Pagination"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"insert-statements"},(0,i.kt)("a",{parentName:"h4",href:"#id-insert-statements"},"Insert statements"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"update-statements"},(0,i.kt)("a",{parentName:"h4",href:"#id-update-statements"},"Update statements"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"delete-statements"},(0,i.kt)("a",{parentName:"h4",href:"#id-delete-statements"},"Delete statements"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"debugging"},(0,i.kt)("a",{parentName:"h4",href:"#id-debugging"},"Debugging")))),(0,i.kt)("h2",{id:"id-introduction"},"Introduction"),(0,i.kt)("p",null,"Athenna database query builder provides a convenient, fluent interface to creating and running database queries. It can\nbe used to perform most database operations in your application and works perfectly with all of Athenna supported database\ndrivers."),(0,i.kt)("h2",{id:"id-running-database-queries"},"Running database queries"),(0,i.kt)("h3",{id:"id-retrieve-all-rows-from-a-table"},"Retrieve all rows from a table"),(0,i.kt)("p",null,"You may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"table")," method provided by the ",(0,i.kt)("inlineCode",{parentName:"p"},"Database")," facade to begin a query. The ",(0,i.kt)("inlineCode",{parentName:"p"},"table")," method returns a fluent\nquery builder instance for the given table, allowing you to chain more constraints onto the query and then finally retrieve\nthe results of the query using the ",(0,i.kt)("inlineCode",{parentName:"p"},"findMany")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Database } from '@athenna/database'\n\nconst users = await Database.table('users')\n        .select('id', 'name')\n        .whereILike({ name: '%Valmir Barbosa%' })\n        .orderBy('name', 'ASC')\n        .findMany()\n")),(0,i.kt)("p",null,"Athenna also provides the ",(0,i.kt)("inlineCode",{parentName:"p"},"collection")," method that returns an ",(0,i.kt)("inlineCode",{parentName:"p"},"Collection")," instance containing the results of the query.\nYou may access each column's value using the ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const collection = await Database.table('users')\n        .select('id', 'name')\n        .whereILike({ name: '%Valmir Barbosa%' })\n        .orderBy('name', 'ASC')\n        .collection()\n\nconst users = collection.all()\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Athenna collections provide a variety of extremely powerful methods for mapping and reducing data. For more information\non Athenna collections, check out the ",(0,i.kt)("a",{parentName:"p",href:"/docs/digging-deeper/collections"},"collection documentation"),"."))),(0,i.kt)("h3",{id:"id-retrieve-a-single-row"},"Retrieve a single row"),(0,i.kt)("p",null,"If you just need to retrieve a single row from a database table, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Database")," facade's ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," method. This\nmethod will return a single object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await Database.table('users')\n        .select('id', 'name')\n        .where({ name: 'Rodrigo Kamada' })\n        .find()\n")),(0,i.kt)("h3",{id:"id-get-the-client-of-driver"},"Get the client and query builder of driver"),(0,i.kt)("p",null,"To get the vanilla client or query builder of your connection driver you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"getClient")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"getQueryBuilder")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Knex client\nconst client = Database.connection('postgres').getClient()\n\nawait client.close()\n\n// Knex query builder\nconst queryBuilder = Database.connection('postgres').getQueryBuilder()\n\nconst result = await queryBuilder\n        .where({ id: 1, status: 'ACTIVE' })\n        .orWhere('status', 'PENDING')\n")),(0,i.kt)("h2",{id:"id-aggregates"},"Aggregates"),(0,i.kt)("p",null,"The query builder also provides a variety of methods for retrieving aggregate values like ",(0,i.kt)("strong",{parentName:"p"},"count, max, min, avg,")," and ",(0,i.kt)("strong",{parentName:"p"},"sum"),".\nYou may call any of these methods after constructing your query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const numberOfUsers = await Database.table('users').count()\nconst maxPriceOrder = await Database.table('orders').max('price')\n")),(0,i.kt)("p",null,"Of course, you may combine these methods with other clauses to fine-tune how your aggregate value is calculated:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const priceAverage = await Database.table('orders')\n        .where('finalized', true)\n        .avg('price')\n")),(0,i.kt)("h2",{id:"id-select-statements"},"Select statements"),(0,i.kt)("p",null,"You may not always want to select all columns from a database table. Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"select"),' method, you can specify a\ncustom "select" clause for the query:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const { id, name } = await Database.table('users')\n        .select('id', 'name')\n        .find()\n")),(0,i.kt)("p",null,"If you want to select all fields including the ",(0,i.kt)("inlineCode",{parentName:"p"},"hidden")," you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," operator:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const { id, name, email } = await Database.table('users')\n        .select('*')\n        .find()\n")),(0,i.kt)("h2",{id:"id-raw-expressions"},"Raw expressions"),(0,i.kt)("p",null,"Sometimes you may need to insert an arbitrary string into a query. To create a raw string expression, you may\nuse the ",(0,i.kt)("inlineCode",{parentName:"p"},"raw")," method provided by the ",(0,i.kt)("inlineCode",{parentName:"p"},"Database")," facade:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .select(Database.raw('count(*) as users_count, status'))\n        .where('status', '<>', 1)\n        .groupBy('status')\n        .findMany()\n")),(0,i.kt)("p",null,"You can also use ",(0,i.kt)("inlineCode",{parentName:"p"},"await")," to execute your query in that moment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.raw('SELECT * FROM users')\n")),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You should be extremely careful to avoid creating SQL injection vulnerabilities using the ",(0,i.kt)("inlineCode",{parentName:"p"},"raw")," method."))),(0,i.kt)("h3",{id:"id-raw-methods"},"Raw methods"),(0,i.kt)("p",null,"Instead of using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Database.raw")," method, you may also use the following methods to insert a raw expression\ninto various parts of your query. Remember, Athenna can not guarantee that any query using raw expressions is\nprotected against SQL injection vulnerabilities."),(0,i.kt)("h4",{id:"id-select-raw"},(0,i.kt)("inlineCode",{parentName:"h4"},"selectRaw")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"selectRaw")," method can be used in place of ",(0,i.kt)("inlineCode",{parentName:"p"},"select(Database.raw(/* ... */))"),". This method accepts an\noptional array of bindings as its second argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const orders = await Database.table('orders')\n        .selectRaw('price * ? as price_with_tax', [1.0825])\n        .findMany()\n")),(0,i.kt)("h4",{id:"id-where-raw"},(0,i.kt)("inlineCode",{parentName:"h4"},"whereRaw / orWhereRaw")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"whereRaw")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhereRaw"),' methods can be used to inject a raw "where" clause into your query.\nThese methods accept an optional array of bindings as their second argument:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const orders = await Database.table('orders')\n        .whereRaw('price > IF(state= \"TX\", ?, 100)', [200])\n        .findMany()\n")),(0,i.kt)("h4",{id:"id-having-raw"},(0,i.kt)("inlineCode",{parentName:"h4"},"havingRaw / orHavingRaw")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"havingRaw")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"orHavingRaw"),' methods may be used to provide a raw string as the value of the "having" clause.\nThese methods accept an optional array of bindings as their second argument:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const orders = await Database.table('orders')\n        .select('department', Database.raw('SUM(price) as total_sales'))\n        .groupBy('department')\n        .havingRaw('SUM(price) > ?', [2500])\n        .findMany()\n")),(0,i.kt)("h4",{id:"id-orderby-raw"},(0,i.kt)("inlineCode",{parentName:"h4"},"orderByRaw")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"orderByRaw"),' method may be used to provide a raw string as the value of the "order by" clause:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const orders = await Database.table('orders')\n        .orderByRaw('updated_at - created_at DESC')\n        .findMany()\n")),(0,i.kt)("h4",{id:"id-groupby-raw"},(0,i.kt)("inlineCode",{parentName:"h4"},"groupByRaw")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"groupByRaw"),' method may be used to provide a raw string as the value of the "group by" clause:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const orders = await Database.table('orders')\n        .select('city', 'state')\n        .groupByRaw('city, state')\n        .findMany()\n")),(0,i.kt)("h2",{id:"id-joins"},"Joins"),(0,i.kt)("h3",{id:"id-inner-join-clause"},"Inner join clause"),(0,i.kt)("p",null,'The query builder may also be used to add join clauses to your queries. To perform a basic "inner join",\nyou may use the join method on a query builder instance. The first argument passed to the ',(0,i.kt)("inlineCode",{parentName:"p"},"join")," method is\nthe name of the table you need to join to, while the remaining arguments specify the column constraints for\nthe join. You may even join multiple tables in a single query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .join('contacts', 'users.id', '=', 'contacts.user_id')\n        .join('orders', 'users.id', '=', 'orders.user_id')\n        .select('users.*', 'contacts.phone', 'orders.price')\n        .findMany()\n")),(0,i.kt)("h3",{id:"id-other-join-clauses"},"Other join clauses"),(0,i.kt)("p",null,'If you would like to perform a "left join" or "right join" instead of an "inner join", use the ',(0,i.kt)("inlineCode",{parentName:"p"},"leftJoin")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"rightJoin"),"\nmethods. They have the same signature of ",(0,i.kt)("inlineCode",{parentName:"p"},"join")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .leftJoin('contacts', 'users.id', '=', 'contacts.user_id')\n        .rightJoin('orders', 'users.id', '=', 'orders.user_id')\n        .select('users.*', 'contacts.phone', 'orders.price')\n        .findMany()\n")),(0,i.kt)("p",null,"You can use any of the join types bellow in your queries:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"leftJoin"),(0,i.kt)("li",{parentName:"ul"},"rightJoin"),(0,i.kt)("li",{parentName:"ul"},"crossJoin"),(0,i.kt)("li",{parentName:"ul"},"fullOuterJoin"),(0,i.kt)("li",{parentName:"ul"},"leftOuterJoin"),(0,i.kt)("li",{parentName:"ul"},"rightOuterJoin")),(0,i.kt)("h3",{id:"id-advanced-join-clauses"},"Advanced join clauses"),(0,i.kt)("p",null,"You may also specify more advanced join clauses using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Database")," facade:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .join('contacts', join => join.on('users.id', '=', 'contacts.user_id').orOn(/* ... */))\n        .findMany()\n")),(0,i.kt)("h2",{id:"id-basic-where-clauses"},"Basic where clauses"),(0,i.kt)("h3",{id:"id-where-clauses"},"Where clauses"),(0,i.kt)("p",null,"You may use the query builder's ",(0,i.kt)("inlineCode",{parentName:"p"},"where"),' method to add "where" clauses to the query. The most basic call to the ',(0,i.kt)("inlineCode",{parentName:"p"},"where"),"\nmethod requires three arguments. The first argument is the name of the column. The second argument is an operator, which can be\nany of the database's supported operators. The third argument is the value to compare against the column's value."),(0,i.kt)("p",null,"For example, the following query retrieves users where the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"votes")," column is equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"100")," and the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"age"),"\ncolumn is greater than ",(0,i.kt)("inlineCode",{parentName:"p"},"35"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await Database.table('users')\n        .where('votes', '=', 100)\n        .where('age', '>', 35)\n        .find()\n")),(0,i.kt)("p",null,"For convenience, if you want to verify that a column is ",(0,i.kt)("inlineCode",{parentName:"p"},"=")," to a given value, you may pass the value as the second argument\nto the ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," method. Athenna will assume you would like to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"=")," operator:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .where('votes', 100)\n        .findMany()\n")),(0,i.kt)("p",null,"As previously mentioned, you may use any operator that is supported by your database system:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .where('votes', '>=', 100)\n        .findMany()\n\nconst users = await Database.table('users')\n        .where('votes', '<>', 100)\n        .findMany()\n\nconst users = await Database.table('users')\n        .where('name', 'like', 'J%')\n        .findMany()\n")),(0,i.kt)("p",null,"You may also pass an object of conditions, but remember that when using objects the operation is always going to be ",(0,i.kt)("inlineCode",{parentName:"p"},"="),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .where({ name: 'Jo\xe3o Lenon', deletedAt: null })\n        .findMany()\n")),(0,i.kt)("h4",{id:"id-or-where-clauses"},"Or where clauses"),(0,i.kt)("p",null,"When chaining together calls to the query builder's ",(0,i.kt)("inlineCode",{parentName:"p"},"where"),' method, the "where" clauses will be joined together using\nthe ',(0,i.kt)("inlineCode",{parentName:"p"},"and")," operator. However, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhere")," method to join a clause to the query using the ",(0,i.kt)("inlineCode",{parentName:"p"},"or")," operator.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhere")," method accepts the same arguments as the ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .where('votes', '>', 100)\n        .orWhere('name', 'Jo\xe3o')\n        .findMany()\n")),(0,i.kt)("h4",{id:"id-where-not-clauses"},"Where not clauses"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"whereNot")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhereNot")," methods may be used to negate a given constraint. For example, the following query\nexcludes the product with ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," ten:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const products = await Database\n        .table('products')\n        .whereNot('id', 10)\n        .findMany()\n")),(0,i.kt)("h3",{id:"id-additional-where-clauses"},"Additional where clauses"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"whereBetween / orWhereBetween")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"whereBetween")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhereBetween")," methods verifies that a column's value is between two values:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .whereBetween('votes', [1, 100])\n        .findMany()\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"whereNotBetween / orWhereNotBetween")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"whereNotBetween")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhereNotBetween")," methods verifies that a column's value lies outside two values:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .whereNotBetween('votes', [1, 100])\n        .findMany()\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"whereIn / orWhereIn")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"whereIn")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhereIn")," methods verifies that a given column's value is contained within the given array:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .whereIn('id', [1, 2, 3])\n        .findMany()\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"whereNotIn / orWhereNotIn")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"whereNotIn")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhereNotIn")," methods verifies that the given column's value is not contained in the given array:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .whereNotIn('id', [1, 2, 3])\n        .findMany()\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"whereNull / orWhereNull")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"whereNull")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhereNull")," methods verifies that the value of the given column is ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .whereNull('deletedAt')\n        .findMany()\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"whereNotNull / orWhereNotNull")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"whereNotNull")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhereNotNull")," methods verifies that the column's value is not ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .whereNotNull('deletedAt')\n        .findMany()\n")),(0,i.kt)("h3",{id:"id-logical-grouping"},"Logical grouping"),(0,i.kt)("p",null,'Sometimes you may need to group several "where" clauses within parentheses in order to achieve your query\'s desired\nlogical grouping. In fact, you should generally always group calls to the ',(0,i.kt)("inlineCode",{parentName:"p"},"orWhere")," method in parentheses in order\nto avoid unexpected query behavior. To accomplish this, you may pass a closure to the ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .where('name', '=', 'Jo\xe3o')\n        .where(query => {\n                query\n                    .where('votes', '>', 100)\n                    .orWhere('title', '=', 'Admin')\n        })\n        .findMany()\n")),(0,i.kt)("p",null,"As you can see, passing a closure into the ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," method instructs the query builder to begin a constraint group.\nThe closure will receive a query builder instance which you can use to set the constraints that should be contained\nwithin the parenthesis group. The example above will produce the following SQL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"select * from users where name = 'Jo\xe3o' and (votes > 100 or title = 'Admin')\n")),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You should always group ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhere")," calls in order to avoid unexpected behavior when global scopes are applied."))),(0,i.kt)("h2",{id:"id-advanced-where-clauses"},"Advanced where clauses"),(0,i.kt)("h3",{id:"id-where-exists-clauses"},"Where exists clauses"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"whereExists"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhereExists"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"whereNotExists")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"orWhereNotExists"),' methods allows you to write "where exists" SQL clauses.\nThey accept a closure which will receive a query builder instance, allowing you to define the query that should be placed inside\nthe "exists" clause:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .whereExists(Database.table('orders')\n                        .selectRaw(1)\n                        .whereRaw(\"`orders`.`user_id` = `users`.`id`\"))\n        .findMany()\n")),(0,i.kt)("p",null,"The query above will produce the following SQL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"select * from users\nwhere exists (\n    select 1\n    from orders\n    where orders.user_id = users.id\n)\n")),(0,i.kt)("h2",{id:"id-ordering-grouping-limit-and-skip"},"Ordering, grouping, limit & skip"),(0,i.kt)("h3",{id:"id-ordering"},"Ordering"),(0,i.kt)("h4",{id:"id-the-orderby-method"},"The ",(0,i.kt)("inlineCode",{parentName:"h4"},"orderBy")," method"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"orderBy")," method allows you to sort the results of the query by a given column. The first argument accepted by the\n",(0,i.kt)("inlineCode",{parentName:"p"},"orderBy")," method should be the column you wish to sort by, while the second argument determines the direction of the\nsort and may be either ",(0,i.kt)("inlineCode",{parentName:"p"},"asc"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ASC"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"desc")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"DESC"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .orderBy('name', 'desc')\n        .findMany()\n")),(0,i.kt)("p",null,"To sort by multiple columns, you may simply invoke ",(0,i.kt)("inlineCode",{parentName:"p"},"orderBy")," as many times as necessary:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .orderBy('name', 'desc')\n        .orderBy('email', 'asc')\n        .findMany()\n")),(0,i.kt)("h4",{id:"id-the-latest-and-oldest-methods"},"The ",(0,i.kt)("inlineCode",{parentName:"h4"},"latest")," & ",(0,i.kt)("inlineCode",{parentName:"h4"},"oldest")," methods"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"latest")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"oldest")," methods allow you to easily order results by date. By default, the result will be ordered by\nthe table's ",(0,i.kt)("inlineCode",{parentName:"p"},"createdAt")," column:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await Database.table('users')\n        .latest()\n        .find()\n")),(0,i.kt)("p",null,"Or, you may pass the column name that you wish to sort by:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await Database.table('users')\n        .oldest('updatedAt')\n        .find()\n")),(0,i.kt)("h3",{id:"id-grouping"},"Grouping"),(0,i.kt)("h4",{id:"id-the-groupby-and-having-method"},"The ",(0,i.kt)("inlineCode",{parentName:"h4"},"groupBy")," & ",(0,i.kt)("inlineCode",{parentName:"h4"},"having")," methods"),(0,i.kt)("p",null,"As you might expect, the ",(0,i.kt)("inlineCode",{parentName:"p"},"groupBy")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"having")," methods may be used to group the query results. The having method's\nsignature is similar to that of the ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .groupBy('account_id')\n        .having('account_id', '>', 100)\n        .findMany()\n")),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"havingBetween")," method to filter the results within a given range:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .selectRaw('count(id) as number_of_users, account_id')\n        .groupBy('account_id')\n        .havingBetween('number_of_users', [0, 100])\n        .findMany()\n")),(0,i.kt)("p",null,"You may pass multiple arguments to the ",(0,i.kt)("inlineCode",{parentName:"p"},"groupBy")," method to group by multiple columns:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .groupBy('first_name', 'status')\n        .having('account_id', '>', 100)\n        .findMany()\n")),(0,i.kt)("p",null,"To build more advanced ",(0,i.kt)("inlineCode",{parentName:"p"},"having")," statements, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/database/query-builder#id-having-raw"},(0,i.kt)("inlineCode",{parentName:"a"},"havingRaw"))," method."),(0,i.kt)("h3",{id:"limit--offset"},"Limit & Offset"),(0,i.kt)("p",null,"You may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"offset")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"limit")," methods to limit the number of results returned from the query or to skip a given\nnumber of results in the query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .offset(10)\n        .limit(5)\n        .findMany()\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"offset")," method is equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"skip")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"limit")," method is equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"take"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"take")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"skip")," are usually\nused by other query builders."))),(0,i.kt)("h2",{id:"id-conditional-clauses"},"Conditional clauses"),(0,i.kt)("p",null,"Sometimes you may want certain query clauses to apply to a query based on another condition. For instance, you may only\nwant to apply a ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," statement if a given input value is present on the incoming HTTP request. You may accomplish this\nusing the ",(0,i.kt)("inlineCode",{parentName:"p"},"when")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const role = request.payload('role')\n\nawait Database.table('users')\n        .when(role, (query, role) => query.where('roleId', role))\n        .findMany()\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"when")," method only executes the given closure when the first argument is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". If the first argument is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", the\nclosure will not be executed. So, in the example above, the closure given to the ",(0,i.kt)("inlineCode",{parentName:"p"},"when")," method will only be invoked if the\nrole field is present on the incoming request and evaluates to a ",(0,i.kt)("inlineCode",{parentName:"p"},"truthy")," value."),(0,i.kt)("p",null,"You can also add two ",(0,i.kt)("inlineCode",{parentName:"p"},"when")," methods to your query to execute a different closure when the ",(0,i.kt)("inlineCode",{parentName:"p"},"role")," ",(0,i.kt)("strong",{parentName:"p"},"IS NOT")," present in your query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const role = request.payload('role')\n\nawait Database.table('users')\n        // Executes if role is present\n        .when(role, (query, role) => query.where('roleId', role))\n        // Executes if role is not present\n        .when(!role, (query, role) => query.where('roleId', role))\n        .findMany()\n")),(0,i.kt)("h2",{id:"id-pagination"},"Pagination"),(0,i.kt)("p",null,"You can paginate the results of your database using the ",(0,i.kt)("inlineCode",{parentName:"p"},"paginate")," method. This method support 3 arguments, the first argument\nis the page (default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),") it defines the page where your pagination will start, the second is the limit\n(default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"10"),") it defines the limit of data that will be retrieved per page and the third one defines the resource url\nthat Athenna will use to create the pagination links:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const { data, meta, links } = await Database.table('users')\n        .whereNull('deletedAt')\n        .paginate(0, 10, '/users')\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," param is where all the data retrieved from database will stay:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(data) // -> [{...}]\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"meta")," param will have information about the pagination such as the total of items finds using that query,\nitems per page, total pages left, current page and the number of itens in that specific execution:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(meta)\n/**\n* {\n*    totalItems: 10,\n*    itemsPerPage: 10,\n*    totalPages: 10,\n*    currentPage: 1,\n*    itemCount: 10\n* }\n*/\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"links")," object will help ho is consuming you API to know what is the next resource to call to go through your paginated data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(links)\n/**\n* {\n*   next: '/users?page=2&limit=10',\n*   previous: '/users?page=0&limit=10',\n*   last: '/users?page=10&limit=10,\n*   first: '/users?&limit=10'\n* }\n*/\n")),(0,i.kt)("h2",{id:"id-insert-statements"},"Insert statements"),(0,i.kt)("p",null,"The query builder also provides the ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"createMany")," methods that may be used to insert records into the database\ntable. The ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," method accepts a record with columns names and values:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await Database.table('users').create({\n    name: 'Valmir Barbosa',\n    email: 'valmirphp@gmail.com'\n})\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"createMany")," method accepts an array of records:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users').createMany([\n    {\n        name: 'Valmir Barbosa',\n        email: 'valmirphp@gmail.com'\n    },\n    {\n        name: 'Danrley Morais',\n        email: 'danrley.morais@gmail.com'\n    }\n])\n")),(0,i.kt)("h3",{id:"id-create-or-update"},"Create or update (Upsert)"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"createOrUpdate")," method will insert records that do not exist and update the records that already exist with new values\nthat you may specify. The method's first argument consists of the values to insert or update, while the second argument\nis the column that uniquely identify records within the associated table (the default is ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),"). In the example above we\nare going to create a new record in the users table ",(0,i.kt)("strong",{parentName:"p"},"only if")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"txsoura@athenna.io")," email is not already registered\nin ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await Database.table('users')\n        .createOrUpdate({\n            name: 'Victor Tesoura',\n            email: 'txsoura@athenna.io'\n        }, 'email') // <- The uniquely identifier\n")),(0,i.kt)("h2",{id:"id-update-statements"},"Update statements"),(0,i.kt)("p",null,"In addition to inserting records into the database, the query builder can also update existing records using the ",(0,i.kt)("inlineCode",{parentName:"p"},"update"),"\nmethod. The ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," method, like the ",(0,i.kt)("inlineCode",{parentName:"p"},"create"),' method, accepts a record with columns names and values indicating the columns\nto be updated. You may constrain the update query using where clauses. In the example above we are going to "undo" the soft\ndelete by searching for all records where the ',(0,i.kt)("inlineCode",{parentName:"p"},"deletedAt")," column is not null and setting it to ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await Database.table('users')\n        .whereNotNull('deletedAt')\n        .update({ deletedAt: null })\n")),(0,i.kt)("h3",{id:"id-incrementing-and-decrementing"},"Incrementing & decrementing"),(0,i.kt)("p",null,"The query builder also provides convenient methods for incrementing or decrementing the value of a given column. Both of\nthese methods accept at least one argument: the column to modify:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"await Database.table('users').increment('votes')\nawait Database.table('users').where('id', 1).increment('votes')\n\nawait Database.table('users').decrement('votes')\nawait Database.table('users').where('id', 1).decrement('votes')\n")),(0,i.kt)("h2",{id:"id-delete-statements"},"Delete statements"),(0,i.kt)("p",null,"The query builder's ",(0,i.kt)("inlineCode",{parentName:"p"},"delete"),' method may be used to delete records from the table. You may constrain delete statements by\nadding "where" clauses before calling the ',(0,i.kt)("inlineCode",{parentName:"p"},"delete")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"await Database.table('users').delete()\nawait Database.table('users').where('votes', '>', 100).delete()\n")),(0,i.kt)("p",null,"If you wish to truncate an entire table, which will remove all records from the table and reset the auto-incrementing ID to\nzero, you may use the truncate method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const tableName = 'users'\n\nawait Database.truncate(tableName)\n")),(0,i.kt)("h2",{id:"id-debugging"},"Debugging"),(0,i.kt)("p",null,"You may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"dump")," method while building a query to dump the current query bindings and SQL. The ",(0,i.kt)("inlineCode",{parentName:"p"},"dump")," method will\ndisplay the debug information and continue executing the code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = await Database.table('users')\n        .whereNull('deletedAt')\n        .dump() // <- Will log in the terminal your query until this point\n        .oldest('deletedAt')\n        .dump() // <- Will log in the terminal your query until this point\n        .findMany()\n")))}c.isMDXComponent=!0}}]);