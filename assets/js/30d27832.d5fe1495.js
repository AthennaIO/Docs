"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[3650],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=i,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return t?a.createElement(h,r(r({ref:n},c),{},{components:t})):a.createElement(h,r({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var u=2;u<o;u++)r[u]=t[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6107:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var a=t(7462),i=t(3366),o=(t(7294),t(3905)),r=["components"],l={sidebar_position:2,id:"configuration",title:"Configuration",hide_title:!0,hide_table_of_contents:!0,tags:["Getting Started","Architecture Concepts"]},s=void 0,u={unversionedId:"getting-started/configuration",id:"getting-started/configuration",title:"Configuration",description:"\ud83c\udfe0",source:"@site/docs/getting-started/configuration.mdx",sourceDirName:"getting-started",slug:"/getting-started/configuration",permalink:"/docs/getting-started/configuration",editUrl:"https://github.com/AthennaIO/Docs/docs/getting-started/configuration.mdx",tags:[{label:"Getting Started",permalink:"/docs/tags/getting-started"},{label:"Architecture Concepts",permalink:"/docs/tags/architecture-concepts"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"configuration",title:"Configuration",hide_title:!0,hide_table_of_contents:!0,tags:["Getting Started","Architecture Concepts"]},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/getting-started/installation"},next:{title:"Directory Structure",permalink:"/docs/getting-started/structure"}},c=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Environment configuration",id:"id-environment-configuration",children:[{value:"Determining the current environment",id:"id-determining-the-current-environment",children:[],level:3},{value:"Get an environment variable value",id:"id-get-an-environment-variable-value",children:[],level:3},{value:"Get a configuration value",id:"id-get-a-configuration-value",children:[],level:3},{value:"Load a custom configuration value",id:"id-load-a-custom-configuration-value",children:[],level:3}],level:2},{value:"Debug mode",id:"id-debug-mode",children:[],level:2}],d={toc:c};function p(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("nav",{"aria-label":"breadcrumbs"},(0,o.kt)("ul",{class:"breadcrumbs"},(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link"},"Getting Started")),(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link",href:"/docs/getting-started/configuration"},"Configuration")))),(0,o.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,o.kt)("h1",{id:"configuration"},"Configuration"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"introduction"},(0,o.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"environment-configuration"},(0,o.kt)("a",{parentName:"h4",href:"#id-environment-configuration"},"Environment configuration")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"determining-the-current-environment"},(0,o.kt)("a",{parentName:"h4",href:"#id-determining-the-current-environment"},"Determining the current environment"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"get-an-environment-variable-value"},(0,o.kt)("a",{parentName:"h4",href:"#id-get-an-environment-variable-value"},"Get an environment variable value"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"get-a-configuration-value"},(0,o.kt)("a",{parentName:"h4",href:"#id-get-a-configuration-value"},"Get a configuration value"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"load-a-custom-configuration-file"},(0,o.kt)("a",{parentName:"h4",href:"#id-load-a-custom-configuration-value"},"Load a custom configuration file"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"debug-mode"},(0,o.kt)("a",{parentName:"h4",href:"#id-debug-mode"},"Debug mode")))),(0,o.kt)("h2",{id:"id-introduction"},"Introduction"),(0,o.kt)("p",null,"All the configuration files for the Athenna framework are stored in the ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," directory. Each option is documented,\nso feel free to look through the files and get familiar with the options available to you."),(0,o.kt)("p",null,"These configuration files allow you to configure things like your database connection information, your filesystem\ninformation to handle file uploads, as well as various other core configuration values."),(0,o.kt)("h2",{id:"id-environment-configuration"},"Environment configuration"),(0,o.kt)("p",null,"It is often helpful to have different configuration values based on the environment where the application is running.\nFor example, you may wish to use a different storage driver locally than you do on your production server."),(0,o.kt)("p",null,"To make this a cinch, Athenna utilizes the ",(0,o.kt)("inlineCode",{parentName:"p"},"dotenv")," Node.js library. In a fresh Athenna installation, the root directory\nof your application will contain a ",(0,o.kt)("inlineCode",{parentName:"p"},".env.example")," file that defines many common environment variables. During the Athenna\ninstallation process, this file will automatically be copied to ",(0,o.kt)("inlineCode",{parentName:"p"},".env"),"."),(0,o.kt)("p",null,"Athenna default ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file contains some common configuration values that may differ based on whether your application\nis running locally or on a production. These values are then retrieved from various Athenna configuration files within\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," directory using Athenna ",(0,o.kt)("inlineCode",{parentName:"p"},"Env")," function."),(0,o.kt)("p",null,"If you are developing with a team, you may wish to continue including a ",(0,o.kt)("inlineCode",{parentName:"p"},".env.example")," file with your application. By\nputting placeholder values in the example configuration file, other developers on your team can clearly see which\nenvironment variables are needed to run your application."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Any variable in your ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file can be overridden by external environment variables such as server-level or system-level\nenvironment variables. But off course you can turn off this behavior setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"OVERRIDE_ENV=true")," variable before running\nyour application, if this variable is set to true, all environment variables set in ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," will override the externals."))),(0,o.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Your ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file should not be committed to your application source control, since each developer/server using your application\ncould require a different environment configuration. Furthermore, this would be a security risk in the event an intruder\ngains access to your source control repository, since any sensitive credentials would get exposed."))),(0,o.kt)("h3",{id:"id-determining-the-current-environment"},"Determining the current environment"),(0,o.kt)("p",null,"Before loading your application's environment variables, Athenna determines if either the ",(0,o.kt)("inlineCode",{parentName:"p"},"NODE_ENV")," environment variable\nhas been externally provided or if the ",(0,o.kt)("inlineCode",{parentName:"p"},"--env")," Artisan argument has been specified. If so, Athenna will attempt to load an\n",(0,o.kt)("inlineCode",{parentName:"p"},".env.${NODE_ENV}")," file if it exists. If it does not exist, the default .env file will be loaded."),(0,o.kt)("p",null,"Running providing ",(0,o.kt)("inlineCode",{parentName:"p"},"--env")," argument for artisan:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan serve --env=local\n")),(0,o.kt)("p",null,"Running providing ",(0,o.kt)("inlineCode",{parentName:"p"},"NODE_ENV")," externally:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"NODE_ENV=local node artisan serve\n")),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"NODE_ENV")," is not set, and you have not provided the ",(0,o.kt)("inlineCode",{parentName:"p"},"--env")," Artisan argument, Athenna will first load the ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file\nto get the ",(0,o.kt)("inlineCode",{parentName:"p"},"NODE_ENV")," that is inside it, than Athenna will attempt to load an ",(0,o.kt)("inlineCode",{parentName:"p"},".env.${NODE_ENV}")," file if it exists. Check\nthe example:"),(0,o.kt)("p",null,"This is the default ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file that comes in Athenna project:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dotenv"},"HOST=localhost\nPORT=1335\nNODE_ENV=local\n\nAPP_NAME=Athenna\nAPP_DEBUG=true\nAPP_URL=http://${HOST}:${PORT}\nAPP_DOMAIN=${HOST}\nAPP_DOCUMENTATION=${APP_URL}\nAPP_SOURCE=https://github.com/AthennaIO\n\nLOG_HTTP=true\nLOG_CHANNEL=application\n")),(0,o.kt)("p",null,"If you create a new ",(0,o.kt)("inlineCode",{parentName:"p"},".env.local")," file in your project root path, Athenna will load it and replace all the values of ",(0,o.kt)("inlineCode",{parentName:"p"},".env"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dotenv"},"HOST=localhost\nPORT=3030\nNODE_ENV=local\n\nAPP_NAME=Athenna Local\nAPP_DEBUG=true\nAPP_URL=http://localhost:3030\nAPP_DOMAIN=${HOST}\nAPP_DOCUMENTATION=${APP_URL}\nAPP_SOURCE=https://github.com/MyGithubUserHere/MyRepositoryHere\n\nLOG_HTTP=true\nLOG_CHANNEL=application\n")),(0,o.kt)("h3",{id:"id-get-an-environment-variable-value"},"Get an environment variable value"),(0,o.kt)("p",null,"You can get environment variables using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Env()")," function. If ",(0,o.kt)("inlineCode",{parentName:"p"},"APP_NAME")," cannot be found, the constant ",(0,o.kt)("inlineCode",{parentName:"p"},"appName")," will\nhave the value ",(0,o.kt)("inlineCode",{parentName:"p"},"Athenna"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const defaultValue = 'Athenna'\n\nconst appName = Env('APP_NAME', defaultValue)\n")),(0,o.kt)("p",null,"All variables in your ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," files are always parsed as strings. But the ",(0,o.kt)("inlineCode",{parentName:"p"},"Env")," function has an auto cast system to parse\nit for you when you call the function to get the value:"),(0,o.kt)("table",null,(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",null,"Value in .env or process.env"),(0,o.kt)("th",null,"Value returned by Env() function"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"true"),(0,o.kt)("td",null,"true")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"(true)"),(0,o.kt)("td",null,'"true"')),(0,o.kt)("tr",null,(0,o.kt)("td",null,"10"),(0,o.kt)("td",null,"10")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"10.090909"),(0,o.kt)("td",null,"10.090909")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"(10)"),(0,o.kt)("td",null,'"10"')),(0,o.kt)("tr",null,(0,o.kt)("td",null,'{"name":"Paulo"}'),(0,o.kt)("td",null,"{ name: 'Paulo' }")),(0,o.kt)("tr",null,(0,o.kt)("td",null,'({"name":"Paulo"})'),(0,o.kt)("td",null,'"{"name":"Paulo"}"')))),(0,o.kt)("p",null,"Let's see a more practical example of it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"process.env.APP_DEBUG = 'true'\nprocess.env.APP_DEBUG_STRING = '(true)'\n\nconsole.log(Env('APP_DEBUG')) // true <- boolean\nconsole.log(Env('APP_DEBUG_STRING')) // \"true\" <- string\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Maybe you want to force that your environment variable have the parentheses chars ",(0,o.kt)("inlineCode",{parentName:"p"},"(your-value)")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"(true)")," or just turn\noff the auto cast for some reason. For that, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Env")," function has the third parameter called ",(0,o.kt)("inlineCode",{parentName:"p"},"autoCast")," that by default\nis always ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", if you set as ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," it will not cast the value for you:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"process.env.APP_DEBUG = 'true'\nprocess.env.APP_DEBUG_STRING = '(true)'\n\nconst defaultValue = false\nconst autoCast = false\n\nconsole.log(Env('APP_DEBUG', defaultValue, autoCast)) // 'true'\nconsole.log(Env('APP_DEBUG_STRING', defaultValue, autoCast)) // '(true)'\n")))),(0,o.kt)("p",null,"Environment variables can parse other environment variables too. See the example above:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dotenv"},"HOST=localhost\nPORT=1335\n\nAPP_DOMAIN=http://${HOST}:${PORT}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(Env('APP_DOMAIN')) // \"http://localhost:1335\"\n")),(0,o.kt)("h3",{id:"id-get-a-configuration-value"},"Get a configuration value"),(0,o.kt)("p",null,"You may easily access your configuration values using the global ",(0,o.kt)("inlineCode",{parentName:"p"},"Config")," helper class from anywhere in your application.\nThe configuration values may be accessed using ",(0,o.kt)("inlineCode",{parentName:"p"},'"dot (.)"')," syntax, which includes the name of the file and option you\nwish to access. A default value may also be specified and will be returned if the configuration option does not exist:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const defaultValue = 'Athenna'\n\nconst name = Config.get('app.name', defaultValue)\n\nconsole.log(name) // MyAppName\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can get all the configuration values using ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," method without any key:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(Config.get()) // { app: {...}, http: {...}, ... }\n")))),(0,o.kt)("h3",{id:"id-load-a-custom-configuration-value"},"Load a custom configuration value"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Config")," class will always load all the configuration files inside ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," folder. But in some point you may want to load\na custom configuration file that is not inside ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," folder. To do that you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"load"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"safeLoad")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"loadAll")," methods:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Path } from '@athenna/common'\n\n// Load all configuration files of some folder path\nawait Config.loadAll(Path.pwd('/customConfigs'))\n\n// Load the configuration only if it has not been loaded yet\nawait Config.safeLoad(Path.pwd('/customConfigs/custom.js'))\n\n// Load or reload the configuration file\nawait Config.load(Path.pwd('/customConfigs/custom.js'))\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"As you can see, you can easily reload some configuration file in runtime using ",(0,o.kt)("inlineCode",{parentName:"p"},"load")," method of ",(0,o.kt)("inlineCode",{parentName:"p"},"Config")," class:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Path } from '@athenna/common'\n\n// Subscribe your APP_DESCRIPTION env\nprocess.env.APP_DESCRIPTION = 'Athenna is the best!'\n\n// Reload configuration file\nawait Config.load(Path.config('app.js'))\n\n// Will be equals to -> \"Athenna is the best!\"\nconsole.log(Config.get('app.description'))\n")))),(0,o.kt)("h2",{id:"id-debug-mode"},"Debug mode"),(0,o.kt)("p",null,"The debug option in your ",(0,o.kt)("inlineCode",{parentName:"p"},"config/app.js")," configuration file determines how much information about your application is actually\ndisplayed to you and for who is going to consume your application. By default, this option is set to respect the value of\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"APP_DEBUG")," environment variable, which is stored in your ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file."),(0,o.kt)("p",null,"For local development, you should set the ",(0,o.kt)("inlineCode",{parentName:"p"},"APP_DEBUG")," environment variable to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),". In your production and pipelines environment,\nthis value should always be ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),". If the variable is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," in production, you risk exposing sensitive configuration\nvalues to your application's end users."))}p.isMDXComponent=!0}}]);