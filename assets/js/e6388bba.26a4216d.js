"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[3942],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),u=i,h=p["".concat(l,".").concat(u)]||p[u]||m[u]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4443:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],s={sidebar_position:6,id:"extending-models",title:"Extending Models",hide_title:!0,hide_table_of_contents:!0,tags:["ORM","Database","Extending Models"]},l=void 0,d={unversionedId:"orm/extending-models",id:"orm/extending-models",title:"Extending Models",description:"\ud83c\udfe0",source:"@site/docs/orm/extending-models.mdx",sourceDirName:"orm",slug:"/orm/extending-models",permalink:"/docs/orm/extending-models",editUrl:"https://github.com/AthennaIO/Docs/docs/orm/extending-models.mdx",tags:[{label:"ORM",permalink:"/docs/tags/orm"},{label:"Database",permalink:"/docs/tags/database"},{label:"Extending Models",permalink:"/docs/tags/extending-models"}],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,id:"extending-models",title:"Extending Models",hide_title:!0,hide_table_of_contents:!0,tags:["ORM","Database","Extending Models"]},sidebar:"tutorialSidebar",previous:{title:"Factories",permalink:"/docs/orm/factories"},next:{title:"Getting Started",permalink:"/docs/testing/getting-started"}},c=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Writing static methods",id:"id-writing-static-methods",children:[],level:2},{value:"Writing instance methods",id:"id-writing-instance-methods",children:[],level:2}],m={toc:c};function p(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("nav",{"aria-label":"breadcrumbs"},(0,r.kt)("ul",{class:"breadcrumbs"},(0,r.kt)("li",{class:"breadcrumbs__item"},(0,r.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,r.kt)("li",{class:"breadcrumbs__item"},(0,r.kt)("a",{class:"breadcrumbs__link"},"ORM")),(0,r.kt)("li",{class:"breadcrumbs__item"},(0,r.kt)("a",{class:"breadcrumbs__link",href:"/docs/orm/extending-models"},"Extending Models")))),(0,r.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,r.kt)("h1",{id:"orm-extending-models"},"ORM: Extending Models"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"introduction"},(0,r.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"writing-static-methods"},(0,r.kt)("a",{parentName:"h4",href:"#id-writing-static-methods"},"Writing static methods"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"writing-instance-methods"},(0,r.kt)("a",{parentName:"h4",href:"#id-writing-instance-methods"},"Writing instance methods")))),(0,r.kt)("h2",{id:"id-introduction"},"Introduction"),(0,r.kt)("p",null,"All the Athenna models extends the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AthennaIO/Database/blob/develop/src/Models/Model.js"},(0,r.kt)("inlineCode",{parentName:"a"},"Model"))," class of the ",(0,r.kt)("inlineCode",{parentName:"p"},"@athenna/database")," package. This class\nprovides everything that a model needs to communicate with database in the best way possible. But sometimes you may need to write your own methods depending on your business\nlogic and to save some time. You will see at this page how you can easily create your own static and instance methods for your models."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Also, we recommend you to take a look at the implementation of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AthennaIO/Database/blob/develop/src/Models/Model.js"},(0,r.kt)("inlineCode",{parentName:"a"},"Model"))," class, this way you\ncould have more knowledge about all the methods available for your in the ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," property when implementing your own methods."))),(0,r.kt)("h2",{id:"id-writing-static-methods"},"Writing static methods"),(0,r.kt)("p",null,"Let's start by defining a new static method in our ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," model that will retrieve a user and also load relationships:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Model } from '@athenna/database'\n\nexport class User extends Model {\n  static async findWith(relationName, where = {}) {\n      const query = this.query().with(relationName)\n\n      // Verify if the where object is not\n      // empty to apply it in the query.\n      if (Object.keys(where).length) {\n          query.where(where)\n      }\n\n      return this.query().with(relationName).find()\n  }\n\n  /*...*/\n}\n")),(0,r.kt)("p",null,"Now we can start finding our user with his relations with a little less code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.findWith('posts.comments', { id: 1 })\n")),(0,r.kt)("p",null,"Let's implement another method that will get all the users that were created in the last 15 minutes ordering then by name:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Model } from '@athenna/database'\n\nexport class User extends Model {\n  static async getRecentlyCreatedUsers() {\n      const nowDate = new Date()\n      const nowDateLessFifteenMinutes = new Date(nowDate - 15 * 60000)\n\n      return this.query()\n        .whereBetween('createdAt', [nowDate, nowDateLessFifteenMinutes])\n        .findMany()\n  }\n\n  /*...*/\n}\n")),(0,r.kt)("p",null,"Calling our new static method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const recentlyUsers = await User.getRecentlyCreatedUsers()\n")),(0,r.kt)("h2",{id:"id-writing-instance-methods"},"Writing instance methods"),(0,r.kt)("p",null,"You can also implement your own instance methods for your models. Let's implement a new instance method that will confirm the user email:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Model } from '@athenna/database'\n\nexport class User extends Model {\n   async confirmEmailNow() {\n     this.emailVerifiedAt = new Date()\n\n     await this.save()\n   }\n\n  /*...*/\n}\n")),(0,r.kt)("p",null,"Now we can easily confirm the user email with one method call:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.find()\n\nawait user.confirmEmailNow()\n")),(0,r.kt)("p",null,"Now let's implement a method that will load the user posts if they are not loaded and also get the oldest post of the user:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Model } from '@athenna/database'\n\nexport class User extends Model {\n   async getOldestPost() {\n     if (!this.posts) {\n         await this.load('posts', query => query.oldest())\n     }\n\n     return this.posts[0]\n   }\n\n  /*...*/\n}\n")),(0,r.kt)("p",null,"Using our new method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = await User.find()\nconst oldestPost = await user.getOldestPost()\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Always be carefully to not break the single responsibility principle of ",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/backticks-tildes/the-s-o-l-i-d-principles-in-pictures-b34ce2f1e898"},(0,r.kt)("inlineCode",{parentName:"a"},"SOLID"))," when\nimplementing your own model methods. But you are free to do whatever you want with Athenna \ud83d\ude0e\ud83e\udd19. All this methods implementation will always depend on your business logic and\ncreativity."))))}p.isMDXComponent=!0}}]);