"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[4358],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),h=r,m=u["".concat(s,".").concat(h)]||u[h]||c[h]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8215:function(e,t,n){var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return p}});var a=n(7462),r=n(7294),i=n(2389),o=n(9548),l=n(6010),s="tabItem_LplD";function d(e){var t,n,i,d=e.lazy,p=e.block,c=e.defaultValue,u=e.values,h=e.groupId,m=e.className,f=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=u?u:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,o.lx)(v,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===c?c:null!=(t=null!=c?c:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(i=f[0])?void 0:i.props.value;if(null!==k&&!v.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,o.UB)(),b=y.tabGroupChoices,w=y.setTabGroupChoices,N=(0,r.useState)(k),T=N[0],C=N[1],x=[],A=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var O=b[h];null!=O&&O!==T&&v.some((function(e){return e.value===O}))&&C(O)}var I=function(e){var t=e.currentTarget,n=x.indexOf(t),a=v[n].value;a!==T&&(A(t),C(a),null!=h&&w(h,a))},Z=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=x.indexOf(e.currentTarget)+1;n=x[a]||x[0];break;case"ArrowLeft":var r=x.indexOf(e.currentTarget)-1;n=x[r]||x[x.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":p},m)},v.map((function(e){var t=e.value,n=e.label,i=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return x.push(e)},onKeyDown:Z,onFocus:I,onClick:I},i,{className:(0,l.Z)("tabs__item",s,null==i?void 0:i.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),d?(0,r.cloneElement)(f.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function p(e){var t=(0,i.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},4675:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return v},frontMatter:function(){return c},metadata:function(){return h},toc:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=n(9877),l=n(8215),s=n(9750),d=n(4996),p=["components"],c={sidebar_position:1,id:"lifecycle",title:"Application Lifecycle",hide_title:!0,hide_table_of_contents:!0,tags:["Architecture Concepts"]},u=void 0,h={unversionedId:"architecture-concepts/lifecycle",id:"architecture-concepts/lifecycle",title:"Application Lifecycle",description:"\ud83c\udfe0",source:"@site/docs/architecture-concepts/lifecycle.mdx",sourceDirName:"architecture-concepts",slug:"/architecture-concepts/lifecycle",permalink:"/docs/architecture-concepts/lifecycle",editUrl:"https://github.com/AthennaIO/Docs/docs/architecture-concepts/lifecycle.mdx",tags:[{label:"Architecture Concepts",permalink:"/docs/tags/architecture-concepts"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"lifecycle",title:"Application Lifecycle",hide_title:!0,hide_table_of_contents:!0,tags:["Architecture Concepts"]},sidebar:"tutorialSidebar",previous:{title:"Directory Structure",permalink:"/docs/getting-started/structure"},next:{title:"Service Container",permalink:"/docs/architecture-concepts/container"}},m=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Lifecycle overview",id:"id-lifecycle-overview",children:[{value:"First steps",id:"id-first-steps",children:[],level:3},{value:"Service providers",id:"id-service-providers",children:[],level:3},{value:"Kernels",id:"id-kernels",children:[],level:3},{value:"Routes",id:"id-routes",children:[],level:3},{value:"Finishing up",id:"id-finishing-up",children:[],level:3}],level:2},{value:"Focus on service providers",id:"id-focus-on-service-providers",children:[],level:2}],f={toc:m};function v(e){var t=e.components,n=(0,r.Z)(e,p);return(0,i.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("nav",{"aria-label":"breadcrumbs"},(0,i.kt)("ul",{class:"breadcrumbs"},(0,i.kt)("li",{class:"breadcrumbs__item"},(0,i.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,i.kt)("li",{class:"breadcrumbs__item"},(0,i.kt)("a",{class:"breadcrumbs__link"},"Architecture Concepts")),(0,i.kt)("li",{class:"breadcrumbs__item"},(0,i.kt)("a",{class:"breadcrumbs__link",href:"/docs/architecture-concepts/lifecycle"},"Application Lifecycle")))),(0,i.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,i.kt)("h1",{id:"application-lifecycle"},"Application Lifecycle"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"introduction"},(0,i.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"lifecycle-overview"},(0,i.kt)("a",{parentName:"h4",href:"#id-lifecycle-overview"},"Lifecycle overview")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"first-steps"},(0,i.kt)("a",{parentName:"h4",href:"#id-first-steps"},"First steps"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"service-providers"},(0,i.kt)("a",{parentName:"h4",href:"#id-service-providers"},"Service providers"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"kernels"},(0,i.kt)("a",{parentName:"h4",href:"#id-kernels"},"Kernels"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"routes"},(0,i.kt)("a",{parentName:"h4",href:"#id-routes"},"Routes"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"finishing-up"},(0,i.kt)("a",{parentName:"h4",href:"#id-finishing-up"},"Finishing up"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"focus-on-service-providers"},(0,i.kt)("a",{parentName:"h4",href:"#id-focus-on-service-providers"},"Focus on service providers")))),(0,i.kt)("h2",{id:"id-introduction"},"Introduction"),(0,i.kt)("p",null,'When using any tool in the "real world", you feel more confident if you understand how that tool works. Application\ndevelopment is no different. When you understand how your development tools function, you feel more comfortable and\nconfident using them.'),(0,i.kt)("p",null,"The goal of this document is to give you a good, high-level overview of how the Athenna framework works. By getting to\nknow the overall framework better, everything feels less \"magical\" and you will be more confident building your\napplications. If you don't understand all the terms right away, don't lose heart! Just try to get a basic grasp of what\nis going on, and your knowledge will grow as you explore other sections of the documentation."),(0,i.kt)("h2",{id:"id-lifecycle-overview"},"Lifecycle overview"),(0,i.kt)("h3",{id:"id-first-steps"},"First steps"),(0,i.kt)("p",null,"The entry point for all types of an Athenna application is the ",(0,i.kt)("inlineCode",{parentName:"p"},"bootstrap/main.js")," file. The first action taken by Athenna\nitself is to create an instance of the application and then boot it."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Athenna has the class called ",(0,i.kt)("inlineCode",{parentName:"p"},"Ignite"),". This class is responsible for resolving your environment, your language type (ts, js),\nresolving your environment files and configuration files of ",(0,i.kt)("inlineCode",{parentName:"p"},"config")," folder and booting/registering your providers. In the\nend of all, ",(0,i.kt)("inlineCode",{parentName:"p"},"fire")," method returns a new ",(0,i.kt)("inlineCode",{parentName:"p"},"Application")," instance, and it's with this instance that we are going to choose\nwhat type of application we want to run (http, worker, cli, etc...)."))),(0,i.kt)("h3",{id:"id-service-providers"},"Service providers"),(0,i.kt)("p",null,"One of the most important kernel bootstrapping actions is loading the service providers for your application. All the\nservice providers for the application are configured in the ",(0,i.kt)("inlineCode",{parentName:"p"},"config/app.js")," configuration file's providers array."),(0,i.kt)("p",null,"Athenna will iterate through this list of providers and instantiate each of them. After instantiating the providers,\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"register")," method will be called on all the providers. Then, once all the providers have been registered, the\n",(0,i.kt)("inlineCode",{parentName:"p"},"boot")," method will be called on each provider. This is so service providers may depend on every container binding being\nregistered and available by the time their boot method is executed."),(0,i.kt)("p",null,"Service providers are responsible for bootstrapping all the framework's various components, such as the database, http server,\nvalidation, services and routing components. Essentially every major feature offered by Athenna is bootstrapped and\nconfigured by a service provider. Since they bootstrap and configure so many features offered by the framework, service\nproviders are the most important aspect of the entire Athenna bootstrap process."),(0,i.kt)("h3",{id:"id-kernels"},"Kernels"),(0,i.kt)("p",null,"Each Athenna application type have a ",(0,i.kt)("inlineCode",{parentName:"p"},"Kernel"),". This classes serves configurations for each type of application."),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"Http Kernel",label:"Http Kernel",default:!0,mdxType:"TabItem"},(0,i.kt)("p",null,"The Kernel of ",(0,i.kt)("inlineCode",{parentName:"p"},"Http")," folder extends the ",(0,i.kt)("inlineCode",{parentName:"p"},"HttpKernel")," class from ",(0,i.kt)("inlineCode",{parentName:"p"},"@athenna/http"),", which defines some bootstraps that will\nbe run before the ",(0,i.kt)("inlineCode",{parentName:"p"},"routes/http")," file is preloaded. These bootstraps configure error handling, configure logging, detect\nthe application environment, and perform other tasks that need to be done before the request is actually handled. Typically,\nthese classes handle internal Athenna configuration that you do not need to worry about."),(0,i.kt)("p",null,"The Kernel of ",(0,i.kt)("inlineCode",{parentName:"p"},"Http")," folder also defines a list of global ",(0,i.kt)("a",{parentName:"p",href:"/docs/the-basics/http/middlewares"},(0,i.kt)("inlineCode",{parentName:"a"},"middlewares"))," that all requests must pass through before being\nhandled by the application. It also defines your named middlewares to use inside ",(0,i.kt)("inlineCode",{parentName:"p"},"routes/http")," file. See the example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n* The application's global HTTP middlewares.\n*\n* This middlewares are run during every request to your http server.\n*/\nget globalMiddlewares() {\n    return [import('#app/Http/Middlewares/ResponseMiddleware')]\n}\n")),(0,i.kt)("p",null,"Or you can define as a named middleware and choose what routes are going to use it inside ",(0,i.kt)("inlineCode",{parentName:"p"},"routes/http"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n* The application's named HTTP middlewares.\n*\n* Here you define all your named middlewares to use inside routes/http file.\n*/\nget namedMiddlewares() {\n    return {\n        response: import('#app/Http/Middlewares/ResponseMiddleware')\n    }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.get('/', 'WelcomeController.show').middleware('response')\n"))),(0,i.kt)(l.Z,{value:"Console Kernel",label:"Console Kernel",mdxType:"TabItem"},(0,i.kt)("p",null,"The Kernel of ",(0,i.kt)("inlineCode",{parentName:"p"},"Console")," folder extends the ",(0,i.kt)("inlineCode",{parentName:"p"},"ConsoleKernel")," class from ",(0,i.kt)("inlineCode",{parentName:"p"},"@athenna/artisan"),", which defines some bootstraps that will\nbe run before the ",(0,i.kt)("inlineCode",{parentName:"p"},"routes/console.js")," file is preloaded. These bootstraps configure error handling, configure logging, register custom\ntemplates, detect the application environment, and perform other tasks that need to be done before the request is actually handled.\nTypically, these classes handle internal Athenna configuration that you do not need to worry about."),(0,i.kt)("p",null,"The Kernel of ",(0,i.kt)("inlineCode",{parentName:"p"},"Console")," folder also defines a list of ",(0,i.kt)("a",{parentName:"p",href:"/docs/the-basics/cli/commands"},(0,i.kt)("inlineCode",{parentName:"a"},"commands"))," that will be registered\nbefore the application bootstrap and before preloading ",(0,i.kt)("inlineCode",{parentName:"p"},"routes/console.js"),". See the example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Register the commands for the application.\n *\n * @return {any[]}\n */\nget commands() {\n    const internalCommands = [\n        ...ArtisanLoader.loadCommands(),\n        ...TestLoader.loadCommands(),\n    ]\n\n    const appCommands = new Folder(Path.console('Commands'))\n        .loadSync()\n        .getFilesByPattern('**/*.js', true)\n        .map(command => import(command.href))\n\n    if (Env('NODE_ENV') === 'production') {\n        return appCommands\n    }\n\n    return [...internalCommands, ...appCommands]\n}\n")),(0,i.kt)("p",null,"In Athenna you can use the loaders helpers such as ",(0,i.kt)("inlineCode",{parentName:"p"},"TestLoader")," to load all commands and custom templates from\neach package."),(0,i.kt)("p",null,"But as you can see we have a little logic here to separate what is an internal command of Artisan of what is a command of\nyour application. If we hadn't separated the internal and application commands, when you were going to publish your library,\nthe internal Artisan commands like ",(0,i.kt)("inlineCode",{parentName:"p"},"node artisan make:test")," would be there."),(0,i.kt)("p",null,"The Kernel of ",(0,i.kt)("inlineCode",{parentName:"p"},"Console")," folder also defines a list of ",(0,i.kt)("a",{parentName:"p",href:"/docs/the-basics/cli/commands#id-registering-custom-templates"},(0,i.kt)("inlineCode",{parentName:"a"},"templates"))," that you can set to use inside your commands using the\n",(0,i.kt)("inlineCode",{parentName:"p"},"TemplateHelper")," class from ",(0,i.kt)("inlineCode",{parentName:"p"},"@athenna/artisan"),". See the example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Register the custom templates for the application.\n *\n * @return {any[]}\n */\nget templates() {\n    return [\n        ...TestLoader.loadTemplates(),\n        ...ArtisanLoader.loadTemplates(),\n    ]\n}\n")))),(0,i.kt)("h3",{id:"id-routes"},"Routes"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"routes")," folder is the kernel of your application. The route files that you will find here are:"),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"http",label:"http",default:!0,mdxType:"TabItem"},(0,i.kt)("p",null,"This file is responsible to create a contract between your client and your application. Is\nin here that we define all of ours routes and the controllers who will handle the client request."),(0,i.kt)("p",null,"One of the most important service providers in your application is the ",(0,i.kt)("inlineCode",{parentName:"p"},"HttpRouteProvider"),". This service provider adds in\nthe container the ",(0,i.kt)("inlineCode",{parentName:"p"},"Route")," class instance used inside ",(0,i.kt)("inlineCode",{parentName:"p"},"http")," file."),(0,i.kt)("p",null,"When the client request arrives, the server first execute all ",(0,i.kt)("inlineCode",{parentName:"p"},"handle")," method of your global middlewares. Than it will execute\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"handle")," method of all your route middlewares. Once it finish, it goes for your controller or handler function. See the example:"),(0,i.kt)(s.Z,{alt:"Handle request image",sources:{light:(0,d.Z)("/img/handle-request-1-light.png"),dark:(0,d.Z)("/img/handle-request-1-dark.png")},mdxType:"ThemedImage"})),(0,i.kt)(l.Z,{value:"console",label:"console",mdxType:"TabItem"},(0,i.kt)("p",null,"This file is responsible to create a contract between your client and your application. Is in here that we define some\nof ours commands and their handlers."),(0,i.kt)("p",null,"One of the most important service providers in your application is the ",(0,i.kt)("inlineCode",{parentName:"p"},"ArtisanProvider"),". This service provider adds in\nthe container the ",(0,i.kt)("inlineCode",{parentName:"p"},"Artisan")," class instance used inside ",(0,i.kt)("inlineCode",{parentName:"p"},"console")," file."),(0,i.kt)("p",null,"When console commands arrive, the Artisan will take all the arguments sent by the client and send to ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/commander"},(0,i.kt)("inlineCode",{parentName:"a"},"commander")),"\nto resolve the command. Then commander will execute the ",(0,i.kt)("inlineCode",{parentName:"p"},"handler")," defined by your command. See the example:"),(0,i.kt)(s.Z,{alt:"Handle console image",sources:{light:(0,d.Z)("/img/handle-console-1-light.png"),dark:(0,d.Z)("/img/handle-console-1-dark.png")},mdxType:"ThemedImage"}))),(0,i.kt)("h3",{id:"id-finishing-up"},"Finishing up"),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"http",label:"http",default:!0,mdxType:"TabItem"},(0,i.kt)("p",null,"Once the controller/handler function returns a response, the response will travel back outward through the ",(0,i.kt)("inlineCode",{parentName:"p"},"intercept"),"\nmethod of each global middleware and than route's middleware, giving the application a chance to modify or examine the\noutgoing response. See the example:"),(0,i.kt)(s.Z,{alt:"Handle request image",sources:{light:(0,d.Z)("/img/handle-request-2-light.png"),dark:(0,d.Z)("/img/handle-request-2-dark.png")},mdxType:"ThemedImage"}),(0,i.kt)("p",null,"As you can see in the example the response content is sent to the client. The request finish for the client but not for\nthe server. Now it's time to execute the ",(0,i.kt)("inlineCode",{parentName:"p"},"terminate")," method from our global and route's middleware. The ",(0,i.kt)("inlineCode",{parentName:"p"},"terminate")," method\nis executed when a response has been sent, so you will not be able to send more data to the client. It can however be\nuseful for sending data to external services, for example, create metrics of the entire request. See the example:"),(0,i.kt)(s.Z,{alt:"Handle request image",sources:{light:(0,d.Z)("/img/handle-request-3-light.png"),dark:(0,d.Z)("/img/handle-request-3-dark.png")},mdxType:"ThemedImage"}),(0,i.kt)("p",null,"Finally, once the ",(0,i.kt)("inlineCode",{parentName:"p"},"terminate")," method is executed in all middlewares the request finish in the server. We've finished\nour journey through the entire Athenna request lifecycle!")),(0,i.kt)(l.Z,{value:"cli",label:"cli",mdxType:"TabItem"},(0,i.kt)("p",null,"That's all the flow of calling a command inside Athenna using Artisan. It's very simple, the application starts, runs and\ngoes down."),(0,i.kt)(s.Z,{alt:"Handle console image",sources:{light:(0,d.Z)("/img/handle-console-1-light.png"),dark:(0,d.Z)("/img/handle-console-1-dark.png")},mdxType:"ThemedImage"}),(0,i.kt)("p",null,"We've finished our journey through the entire Athenna console command lifecycle!"))),(0,i.kt)("h2",{id:"id-focus-on-service-providers"},"Focus on service providers"),(0,i.kt)("p",null,"Service providers are truly the key to bootstrapping an Athenna application. The application instance is created, the\nservice providers are registered, and the request is handed to the bootstrapped application. It's really that simple!"),(0,i.kt)("p",null,"Having a firm grasp of how an Athenna application is built and bootstrapped via service providers is very valuable.\nYour application's default service providers are stored in the ",(0,i.kt)("inlineCode",{parentName:"p"},"providers")," directory."),(0,i.kt)("p",null,"By default, the ",(0,i.kt)("inlineCode",{parentName:"p"},"AppServiceProvider")," is fairly empty. This provider is a great place to add your application's own\nbootstrapping and service container bindings. For large applications, you may wish to create several service providers,\neach with more granular bootstrapping for specific services used by your application."))}v.isMDXComponent=!0}}]);