"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[9736],{8409:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=n(5893),o=n(1151);const r={title:"Request Context",sidebar_position:4,description:"Understand the purpose of the request context object."},d="Request Context",i={id:"rest-api-application/request-context",title:"Request Context",description:"Understand the purpose of the request context object.",source:"@site/docs/rest-api-application/request-context.mdx",sourceDirName:"rest-api-application",slug:"/rest-api-application/request-context",permalink:"/docs/rest-api-application/request-context",draft:!1,unlisted:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/rest-api-application/request-context.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Request Context",sidebar_position:4,description:"Understand the purpose of the request context object."},sidebar:"tutorialSidebar",previous:{title:"Controllers",permalink:"/docs/rest-api-application/controllers"},next:{title:"Error Handling",permalink:"/docs/rest-api-application/error-handling"}},a={},l=[{value:"Introduction",id:"introduction",level:2},{value:"The context object",id:"the-context-object",level:2},{value:"The request object",id:"the-request-object",level:3},{value:"The <code>id</code> getter",id:"the-id-getter",level:4},{value:"The <code>ip</code> getter",id:"the-ip-getter",level:4},{value:"The <code>method</code> getter",id:"the-method-getter",level:4},{value:"The <code>hostUrl</code> getter",id:"the-hosturl-getter",level:4},{value:"The <code>baseUrl</code> getter",id:"the-baseurl-getter",level:4},{value:"The <code>originalUrl</code> getter",id:"the-originalurl-getter",level:4},{value:"The <code>body</code>, <code>params</code>, <code>queries</code> and <code>headers</code> getters",id:"the-body-params-queries-and-headers-getters",level:4},{value:"The <code>input()</code> and <code>payload()</code> methods",id:"the-input-and-payload-methods",level:4},{value:"The <code>only()</code> and <code>except()</code> methods",id:"the-only-and-except-methods",level:4},{value:"The <code>param()</code>, <code>query()</code> and <code>header()</code> methods",id:"the-param-query-and-header-methods",level:4},{value:"The <code>getFastifyRequest()</code> method",id:"the-getfastifyrequest-method",level:4},{value:"The response object",id:"the-response-object",level:3},{value:"The <code>send()</code> method",id:"the-send-method",level:4},{value:"The <code>view()</code> method",id:"the-view-method",level:4},{value:"The <code>helmet()</code> method",id:"the-helmet-method",level:4},{value:"The <code>status()</code> method",id:"the-status-method",level:4},{value:"The <code>sendFile()</code> method",id:"the-sendfile-method",level:4},{value:"The <code>download()</code> method",id:"the-download-method",level:4},{value:"The <code>header()</code>, <code>safeHeader()</code> and <code>removeHeader()</code> methods",id:"the-header-safeheader-and-removeheader-methods",level:4},{value:"The <code>redirectTo()</code> method",id:"the-redirectto-method",level:4},{value:"The <code>sent</code> getter",id:"the-sent-getter",level:4},{value:"The <code>body</code>, <code>statusCode</code> and <code>headers</code> getters",id:"the-body-statuscode-and-headers-getters",level:4},{value:"The <code>responseTime</code> getter",id:"the-responsetime-getter",level:4},{value:"The <code>getFastifyResponse()</code> method",id:"the-getfastifyresponse-method",level:4},{value:"The data object",id:"the-data-object",level:3},{value:"The context object in middlewares",id:"the-context-object-in-middlewares",level:2},{value:"Middleware context",id:"middleware-context",level:3},{value:"Interceptor context",id:"interceptor-context",level:3},{value:"Terminate middleware context",id:"terminate-middleware-context",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"request-context",children:"Request Context"}),"\n",(0,s.jsx)(t.p,{children:"Understand the purpose of the request context object."}),"\n",(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(t.p,{children:["Athenna provides an object inside all Http handlers called\n",(0,s.jsx)(t.code,{children:"ctx"}),". This property is implemented by the ",(0,s.jsx)(t.code,{children:"Context"}),"\ninterface imported from ",(0,s.jsx)(t.code,{children:"@athenna/http"})," package."]}),"\n",(0,s.jsx)(t.h2,{id:"the-context-object",children:"The context object"}),"\n",(0,s.jsxs)(t.p,{children:["In Athenna as you can see in the previous documentation page\nof ",(0,s.jsx)(t.a,{href:"/docs/the-basics/http/middlewares",children:(0,s.jsx)(t.code,{children:"Middlewares"})})," and\n",(0,s.jsx)(t.a,{href:"/docs/the-basics/http/controllers",children:(0,s.jsx)(t.code,{children:"Controllers"})})," we are\nalways destructuring the ",(0,s.jsx)(t.code,{children:"ctx"})," property and using like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', ({ response }) => {\n    response.status(200).send({ hello: 'world' })\n})\n"})}),"\n",(0,s.jsx)(t.p,{children:"But is the same of doing this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', (ctx) => {\n    ctx.response.status(200).send({ hello: 'world' })\n})\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"ctx"})," object is little different for each type of\nhandlers, and we will see all the differences previous in\nthis documentation page."]}),"\n",(0,s.jsx)(t.h3,{id:"the-request-object",children:"The request object"}),"\n",(0,s.jsxs)(t.p,{children:["Athenna ",(0,s.jsx)(t.code,{children:"Request"})," class provides an object-oriented way to\ninteract with the current HTTP request being handled by your\napplication as well as retrieve the ip, headers, body, and\nfiles that were submitted with the request."]}),"\n",(0,s.jsxs)(t.h4,{id:"the-id-getter",children:["The ",(0,s.jsx)(t.code,{children:"id"})," getter"]}),"\n",(0,s.jsx)(t.p,{children:"Get the id from the request:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', ({ request }) => {\n    console.log(request.id) // 123e4567-e89b-12d3-a456-426614174000\n\n    /*....*/\n})\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This is very useful to trace the requests of your server.\nCheck the ",(0,s.jsx)(t.a,{href:"/docs/rest-api-application/tracing-requests",children:"tracing requests"})," documentation page for more information."]}),"\n",(0,s.jsxs)(t.h4,{id:"the-ip-getter",children:["The ",(0,s.jsx)(t.code,{children:"ip"})," getter"]}),"\n",(0,s.jsx)(t.p,{children:"Get the ip from where the request were executed:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', ({ request }) => {\n    console.log(request.ip) // 192.168.0.1\n\n    /*....*/\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-method-getter",children:["The ",(0,s.jsx)(t.code,{children:"method"})," getter"]}),"\n",(0,s.jsxs)(t.p,{children:["Get the ",(0,s.jsx)(t.a,{href:"https://restfulapi.net/",children:(0,s.jsx)(t.code,{children:"REST"})})," method of your request:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', ({ request }) => {\n    console.log(request.method) // GET\n\n    /*....*/\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-hosturl-getter",children:["The ",(0,s.jsx)(t.code,{children:"hostUrl"})," getter"]}),"\n",(0,s.jsxs)(t.p,{children:["Get the host url of the request concatenating the host",":port","\nof your application and the ",(0,s.jsx)(t.a,{href:"/docs/the-basics/http/context#the-originalUrl-getter",children:(0,s.jsx)(t.code,{children:"originalUrl"})}),"\nof the request:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', ({ request }) => {\n    console.log(request.hostUrl) // http://localhost:1335/welcome\n\n    /*....*/\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-baseurl-getter",children:["The ",(0,s.jsx)(t.code,{children:"baseUrl"})," getter"]}),"\n",(0,s.jsx)(t.p,{children:"Get the url of the route without the query params:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', ({ request }) => {\n    console.log(request.baseUrl) // /welcome\n\n    /*....*/\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-originalurl-getter",children:["The ",(0,s.jsx)(t.code,{children:"originalUrl"})," getter"]}),"\n",(0,s.jsx)(t.p,{children:"Get the original url with the query params:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', ({ request }) => {\n    console.log(request.originalUrl) // /welcome?hello=world\n\n    /*....*/\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-body-params-queries-and-headers-getters",children:["The ",(0,s.jsx)(t.code,{children:"body"}),", ",(0,s.jsx)(t.code,{children:"params"}),", ",(0,s.jsx)(t.code,{children:"queries"})," and ",(0,s.jsx)(t.code,{children:"headers"})," getters"]}),"\n",(0,s.jsx)(t.p,{children:"Retrieve all the data inside each one of then:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.post('/welcome/:id', ({ request }) => {\n    console.log(request.body) // { hello: 'world' }\n    console.log(request.params) // { id: '1' }\n    console.log(request.queries) // { world: 'hello' }\n    console.log(request.headers) // { 'content-type': 'application/json' }\n\n    /*....*/\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-input-and-payload-methods",children:["The ",(0,s.jsx)(t.code,{children:"input()"})," and ",(0,s.jsx)(t.code,{children:"payload()"})," methods"]}),"\n",(0,s.jsx)(t.p,{children:"Retrieve only one value per call from the request body:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.post('/welcome/:id', ({ request }) => {\n    const defaultValue = 'defaultValue'\n\n    console.log(request.input('hello', 'found')) // 'world'\n    console.log(request.input('not-found', defaultValue)) // 'defaultValue'\n\n    console.log(request.payload('hello', defaultValue)) // 'world'\n    console.log(request.payload('not-found', defaultValue)) // 'defaultValue'\n\n    /*....*/\n})\n"})}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsx)(t.p,{children:"As you can see, you can use the second argument of this type\nof methods to set the default value if the key has not been\nfound in your request."})}),"\n",(0,s.jsx)(t.p,{children:'You may even use "dot" syntax to retrieve values that are\nnested within JSON arrays / objects:'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const name = request.input('user.name')\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-only-and-except-methods",children:["The ",(0,s.jsx)(t.code,{children:"only()"})," and ",(0,s.jsx)(t.code,{children:"except()"})," methods"]}),"\n",(0,s.jsxs)(t.p,{children:["If you need to retrieve a subset of the input data, you may\nuse the ",(0,s.jsx)(t.code,{children:"only()"})," and ",(0,s.jsx)(t.code,{children:"except()"})," methods. Both of these methods\naccept a single array or a dynamic list of arguments:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const input = request.only('username', 'password')\nconst input = request.only(['username', 'password'])\n\nconst input = request.except('credit_card')\nconst input = request.except(['credit_card'])\n"})}),"\n",(0,s.jsx)(t.admonition,{type:"warning",children:(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"only()"})," method returns all the key / value pairs that you\nrequest; however, it will not return key / value pairs that\nare not present on the request body."]})}),"\n",(0,s.jsxs)(t.h4,{id:"the-param-query-and-header-methods",children:["The ",(0,s.jsx)(t.code,{children:"param()"}),", ",(0,s.jsx)(t.code,{children:"query()"})," and ",(0,s.jsx)(t.code,{children:"header()"})," methods"]}),"\n",(0,s.jsxs)(t.p,{children:["Retrieve only one value of ",(0,s.jsx)(t.code,{children:"params"}),", ",(0,s.jsx)(t.code,{children:"queries"})," or ",(0,s.jsx)(t.code,{children:"headers"}),".\nYou can also set a second parameter that will set the default\nvalue if the first argument key doesn't exist:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.post('/welcome/:id', ({ request }) => {\n    const defaultValue = 'defaultValue'\n\n    console.log(request.param('id', defaultValue)) // '1'\n    console.log(request.param('not-found', defaultValue)) // 'defaultValue'\n\n    console.log(request.query('world', defaultValue)) // 'hello'\n    console.log(request.query('not-found', defaultValue)) // 'defaultValue'\n\n    console.log(request.header('content-type', defaultValue)) // 'application/json'\n    console.log(request.header('not-found', defaultValue)) // 'defaultValue'\n\n    /*....*/\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-getfastifyrequest-method",children:["The ",(0,s.jsx)(t.code,{children:"getFastifyRequest()"})," method"]}),"\n",(0,s.jsx)(t.p,{children:"Retrieve the vanilla Fastify request object to use more\nadvanced getters and methods from Fastify:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', ({ request }) => {\n    const fastifyRequest = request.getFastifyRequest()\n\n    /*....*/\n})\n"})}),"\n",(0,s.jsx)(t.h3,{id:"the-response-object",children:"The response object"}),"\n",(0,s.jsxs)(t.p,{children:["Athenna ",(0,s.jsx)(t.code,{children:"Response"})," class provides an object-oriented way to\ninteract with the current HTTP response being handled by\nyour application as well set a status code and return the\nresponse to the client."]}),"\n",(0,s.jsxs)(t.h4,{id:"the-send-method",children:["The ",(0,s.jsx)(t.code,{children:"send()"})," method"]}),"\n",(0,s.jsx)(t.p,{children:"Terminate the request sending a response body to the client:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', ({ response }) => {\n    response.send({ hello: 'world' })\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-view-method",children:["The ",(0,s.jsx)(t.code,{children:"view()"})," method"]}),"\n",(0,s.jsx)(t.p,{children:"Terminate the request rendering a view in the response\nbody to the client:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', ({ response }) => {\n    response.view('welcome', { hello: 'world' })\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-helmet-method",children:["The ",(0,s.jsx)(t.code,{children:"helmet()"})," method"]}),"\n",(0,s.jsxs)(t.p,{children:["Apply all the ",(0,s.jsx)(t.a,{href:"https://www.npmjs.com/package/helmet",children:(0,s.jsx)(t.code,{children:"Helmet"})})," response\nheaders in your response:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', async ({ response }) => {\n    if (condition) {\n      // we apply the default options\n      await response.helmet()\n    } else {\n      // we apply customized options\n      await response.helmet({ frameguard: false })\n    }\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-status-method",children:["The ",(0,s.jsx)(t.code,{children:"status()"})," method"]}),"\n",(0,s.jsx)(t.p,{children:"Apply the status code of your response:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', async ({ response }) => {\n    response.status(200).send({ hello: 'World' })\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-sendfile-method",children:["The ",(0,s.jsx)(t.code,{children:"sendFile()"})," method"]}),"\n",(0,s.jsxs)(t.p,{children:["Serve files if the ",(0,s.jsx)(t.a,{href:"/docs/rest-api-application/static-files",children:"static plugin"}),"\nis enabled in your application:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', async ({ response }) => {\n    response.status(200).sendFile('img.png')\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-download-method",children:["The ",(0,s.jsx)(t.code,{children:"download()"})," method"]}),"\n",(0,s.jsxs)(t.p,{children:["Serve files with a custom name if the ",(0,s.jsx)(t.a,{href:"/docs/rest-api-application/static-files",children:"static plugin"}),"\nis enabled in your application:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"response.status(200).download('img.png', 'custom-img.png')\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-header-safeheader-and-removeheader-methods",children:["The ",(0,s.jsx)(t.code,{children:"header()"}),", ",(0,s.jsx)(t.code,{children:"safeHeader()"})," and ",(0,s.jsx)(t.code,{children:"removeHeader()"})," methods"]}),"\n",(0,s.jsxs)(t.p,{children:["Set custom header for your response, the ",(0,s.jsx)(t.code,{children:"header()"})," method will\noverwrite the already set headers, the ",(0,s.jsx)(t.code,{children:"safeHeader()"})," will only\nregister the header if the header is not yet registered and\nthe ",(0,s.jsx)(t.code,{children:"removeHeader()"})," will remove a header from the response:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', async ({ response }) => {\n    response.header('content-type', 'application/json')\n    response.safeHeader('content-type', 'application/json')\n    response.removeHeader('content-type')\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-redirectto-method",children:["The ",(0,s.jsx)(t.code,{children:"redirectTo()"})," method"]}),"\n",(0,s.jsx)(t.p,{children:"Redirect your response to another url and with a different status code:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/hello', ctx => ctx.response.status(200))\n\nRoute.get('/welcome', async ({ response }) => {\n    response.redirectTo('/hello', 200)\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-sent-getter",children:["The ",(0,s.jsx)(t.code,{children:"sent"})," getter"]}),"\n",(0,s.jsxs)(t.p,{children:["Verify if your response has already been sent to client, useful to be used in\n",(0,s.jsx)(t.a,{href:"/docs/rest-api-application/middlewares#intercept-middleware",children:"interceptors"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', async ({ response }) => {\n    response.send({ status: 'ok' })\n}).interceptor(({ response }) => {\n    if (response.sent) {\n        // do something\n    }\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-body-statuscode-and-headers-getters",children:["The ",(0,s.jsx)(t.code,{children:"body"}),", ",(0,s.jsx)(t.code,{children:"statusCode"})," and ",(0,s.jsx)(t.code,{children:"headers"})," getters"]}),"\n",(0,s.jsxs)(t.p,{children:["Get the content of the response body, status code and headers if\nit exists. These values will be available before you use ",(0,s.jsx)(t.code,{children:"response.send()"}),",\n",(0,s.jsx)(t.code,{children:"response.status()"})," and ",(0,s.jsx)(t.code,{children:"response.headers()"})," methods somewhere.\nThese getters are useful when using\n",(0,s.jsx)(t.a,{href:"/docs/rest-api-application/middlewares#intercept-middleware",children:"interceptors"})," and\n",(0,s.jsx)(t.a,{href:"/docs/rest-api-application/middlewares#terminate-middleware",children:"terminators"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', async ({ response }) => {\n    response.send({ status: 'ok' })\n}).terminator(({ response }) => {\n    if (response.statusCode !== 200) {\n        // do something\n    }\n\n    if (response.body.status === 'ok') {\n        // do something\n    }\n\n    if (response.headers['Content-Type'] !== 'application/json') {\n        // do something\n    }\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-responsetime-getter",children:["The ",(0,s.jsx)(t.code,{children:"responseTime"})," getter"]}),"\n",(0,s.jsxs)(t.p,{children:["Get how much time your request has taken until it finish and\nturn back to client. This value will only be available in\n",(0,s.jsx)(t.a,{href:"/docs/rest-api-application/middlewares#terminate-middleware",children:"terminators"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', async ({ response }) => {\n    response.send({ status: 'ok' })\n}).terminator(({ response }) => {\n    console.log('Request has taken: ', response.responseTime, 'ms', ' to finish.')\n})\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"the-getfastifyresponse-method",children:["The ",(0,s.jsx)(t.code,{children:"getFastifyResponse()"})," method"]}),"\n",(0,s.jsx)(t.p,{children:"Retrieve the vanilla Fastify response object to use more advanced\ngetters and methods from Fastify:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/welcome', ({ response }) => {\n    const fastifyResponse = response.getFastifyResponse()\n\n    /*....*/\n})\n"})}),"\n",(0,s.jsx)(t.h3,{id:"the-data-object",children:"The data object"}),"\n",(0,s.jsxs)(t.p,{children:["Use the ",(0,s.jsx)(t.code,{children:"data"})," object to define properties that will be available\nin your entire request flow. This is really useful for some cases\nwhere you want to transfer data from a middleware to a controller\nfor example. Let's see an example setting default pagination values\nif client has not sent page and limit:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"import { Config } from '@athenna/config'\nimport { Context, Middleware } from '@athenna/http'\n\n@Middleware()\nexport class PaginationMiddleware {\n  public async handle({ request, data }: Context) {\n    const page = request.queries.page ? parseInt(request.queries.page) : 0\n    const limit = request.queries.limit ? parseInt(request.queries.limit) : 10\n    const resourceUrl = `${Config.get('http.domain')}${request.baseUrl}`\n\n    data.pagination = {\n      page,\n      limit,\n      resourceUrl,\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["And now is very simple to get this ",(0,s.jsx)(t.code,{children:"pagination"})," object\ninside your handler:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"Route.get('/products', ({ response, data }) => {\n    return response.send({ paginationObj: data.pagination })\n}).middleware('PaginationMiddleware')\n"})}),"\n",(0,s.jsx)(t.h2,{id:"the-context-object-in-middlewares",children:"The context object in middlewares"}),"\n",(0,s.jsx)(t.h3,{id:"middleware-context",children:"Middleware context"}),"\n",(0,s.jsxs)(t.p,{children:["The context of a ",(0,s.jsx)(t.a,{href:"/docs/rest-api-application/middlewares",children:"middleware"}),"\nis the same of a Controller. It uses the same ",(0,s.jsx)(t.code,{children:"Context"}),"\ninterface from ",(0,s.jsx)(t.code,{children:"@athenna/http"})," package."]}),"\n",(0,s.jsx)(t.h3,{id:"interceptor-context",children:"Interceptor context"}),"\n",(0,s.jsxs)(t.p,{children:["In ",(0,s.jsx)(t.a,{href:"/docs/rest-api-application/middlewares#intercept-middleware",children:"interceptors"}),"\nAthenna uses the ",(0,s.jsx)(t.code,{children:"InterceptContext"}),". This context is quite\nthe same of ",(0,s.jsx)(t.code,{children:"Context"}),", but it has additional property ",(0,s.jsx)(t.code,{children:"status"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"terminate-middleware-context",children:"Terminate middleware context"}),"\n",(0,s.jsxs)(t.p,{children:["In ",(0,s.jsx)(t.a,{href:"/docs/rest-api-application/middlewares#terminate-middleware",children:"terminators"}),"\nAthenna set the ",(0,s.jsx)(t.code,{children:"TerminateContext"}),". This context is quite\nthe same of ",(0,s.jsx)(t.code,{children:"Context"}),", but it has additional properties\n",(0,s.jsx)(t.code,{children:"status"})," and ",(0,s.jsx)(t.code,{children:"responseTime"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>d});var s=n(7294);const o={},r=s.createContext(o);function d(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);