"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[805],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),m=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(t),u=i,g=c["".concat(l,".").concat(u)]||c[u]||d[u]||o;return t?a.createElement(g,r(r({ref:n},p),{},{components:t})):a.createElement(g,r({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:i,r[1]=s;for(var m=2;m<o;m++)r[m]=t[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9528:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var a=t(7462),i=(t(7294),t(3905));const o={title:"Commands",sidebar_position:1,description:"See how to create and configure your CLI commands.",tags:["CLI Application","Commands"]},r="Commands",s={unversionedId:"cli-application/commands",id:"cli-application/commands",title:"Commands",description:"See how to create and configure your CLI commands.",source:"@site/docs/cli-application/commands.mdx",sourceDirName:"cli-application",slug:"/cli-application/commands",permalink:"/docs/cli-application/commands",draft:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/cli-application/commands.mdx",tags:[{label:"CLI Application",permalink:"/docs/tags/cli-application"},{label:"Commands",permalink:"/docs/tags/commands"}],version:"current",sidebarPosition:1,frontMatter:{title:"Commands",sidebar_position:1,description:"See how to create and configure your CLI commands.",tags:["CLI Application","Commands"]},sidebar:"tutorialSidebar",previous:{title:"CLI Application",permalink:"/docs/cli-application"},next:{title:"Running",permalink:"/docs/cli-application/running"}},l={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Writing commands",id:"writing-commands",level:2},{value:"Registering commands",id:"registering-commands",level:2},{value:"Generating commands",id:"generating-commands",level:2},{value:"Commands structure",id:"commands-structure",level:2},{value:"Booting the app within the command",id:"booting-the-app-within-the-command",level:3},{value:"Constructor injection is not allowed",id:"constructor-injection-is-not-allowed",level:3},{value:"\u274c Does not work",id:"-does-not-work",level:4},{value:"\u2705 Works",id:"-works",level:4},{value:"Calling commands in runtime",id:"calling-commands-in-runtime",level:2},{value:"Defining input expectations",id:"defining-input-expectations",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Spread/Variadic arguments",id:"spreadvariadic-arguments",level:4},{value:"Arguments options",id:"arguments-options",level:4},{value:"Options",id:"options",level:3},{value:"Negatable boolean options",id:"negatable-boolean-options",level:4},{value:"Spread/Variadic options",id:"spreadvariadic-options",level:4},{value:"Option options",id:"option-options",level:4},{value:"Prompts",id:"prompts",level:2},{value:"Logger and UI",id:"logger-and-ui",level:2},{value:"Generating templates in commands",id:"generating-templates-in-commands",level:2},{value:"Manipulating <code>.athennarc.json</code> in commands",id:"manipulating-athennarcjson-in-commands",level:2}],p={toc:m},c="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"commands"},"Commands"),(0,i.kt)("p",null,"See how to create and configure your CLI commands."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"In Athenna you are able to create your own CLI application\ncreating your own commands by extending the abstract class\n",(0,i.kt)("inlineCode",{parentName:"p"},"Command")," and implement its methods."),(0,i.kt)("h2",{id:"writing-commands"},"Writing commands"),(0,i.kt)("p",null,"In addition to the commands provided with Artisan, you may\nbuild your own custom commands. Commands are typically stored\nin the ",(0,i.kt)("inlineCode",{parentName:"p"},"app/console/commands")," directory; however, you are\nfree to choose your own storage location as long as your\ncommands can be imported."),(0,i.kt)("h2",{id:"registering-commands"},"Registering commands"),(0,i.kt)("p",null,"All of your console commands are registered within your\napplication's ",(0,i.kt)("inlineCode",{parentName:"p"},".athennarc.json")," file. If you have created\nyour command using ",(0,i.kt)("inlineCode",{parentName:"p"},"make:command")," your command will already\nbe registered for you in ",(0,i.kt)("inlineCode",{parentName:"p"},"commands")," object, but we still\nrecommend you to do some adjustments before using your\ncommand."),(0,i.kt)("p",null,"In the example above we have changed the signature of\n",(0,i.kt)("inlineCode",{parentName:"p"},"SendEmails")," command to ",(0,i.kt)("inlineCode",{parentName:"p"},"send:email"),", we should always\nuse the command ",(0,i.kt)("inlineCode",{parentName:"p"},"signature")," as key when registering our\ncommands in ",(0,i.kt)("inlineCode",{parentName:"p"},"commands")," object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "commands": {\n    "send:email": { \ud83d\udc48\n      "path": "#app/console/commands/SendEmails",\n      "loadApp": true\n    }\n  }\n}\n')),(0,i.kt)("p",null,"If you do so, Athenna will always import and load only that\nspecific command that you want to execute, meaning that if\nyou execute the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./node artisan send:email lenon@athenna.io\n")),(0,i.kt)("p",null,"Athenna will only import and load ",(0,i.kt)("inlineCode",{parentName:"p"},"SendEmails")," class and\nexecute your command. If you change the key name to any\nvalue different from the command ",(0,i.kt)("inlineCode",{parentName:"p"},"signature")," (",(0,i.kt)("inlineCode",{parentName:"p"},"send:email"),")\nAthenna will load all your commands defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"commands"),"\nobject:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "commands": {\n    "sendEmails": { \ud83d\udc48 // All commands will be loaded\n      "path": "#app/console/commands/SendEmails",\n      "loadApp": true\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Loading all commands might be useful sometimes when your\ncommand wants to ",(0,i.kt)("a",{parentName:"p",href:"#calling-commands-in-runtime"},"execute other commands in runtime"),"\ninside your command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Inject } from '@athenna/ioc'\nimport { MailgunService } from '#app/services/MailgunService'\nimport { Option, Artisan, Argument, BaseCommand } from '@athenna/artisan'\n\nexport class SendEmails extends BaseCommand {\n  public static signature(): string {\n      return 'mail:send'\n  }\n\n  public static description(): string {\n      return 'Send an email.'\n  }\n\n  @Argument()\n  private email: string\n\n  @Option({\n    signature: '-s, --subject <subject>',\n    default: 'Athenna',\n    description: 'Set the subject of the email.',\n  })\n  private subject: string\n\n  @Inject()\n  private mailgunService: MailgunService\n\n  public async handle(): Promise<void> {\n    const message = 'Hello from Athenna!'\n\n    await this.mailgunService.send(this.email, {\n      message,\n      subject: this.subject,\n    })\n\n    await Artisan.call(`save:email ${this.email}`)\n  }\n}\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Even for this purpose, we recommend you to let the key\nof your command the same of your command ",(0,i.kt)("inlineCode",{parentName:"p"},"signature"),".\nTo load all your commands, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"loadAllCommands"),"\nsetting in your command:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "commands": {\n    "send:email": {\n      "path": "#app/console/commands/SendEmails",\n      "loadApp": true,\n      "loadAllCommands": true \ud83d\udc48 // All commands will be loaded\n    }\n  }\n}\n'))),(0,i.kt)("h2",{id:"generating-commands"},"Generating commands"),(0,i.kt)("p",null,"To create a new command, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"make:command"),"\nArtisan command. This command will create a new command\nclass in the ",(0,i.kt)("inlineCode",{parentName:"p"},"app/console/commands")," directory and register\nit inside ",(0,i.kt)("inlineCode",{parentName:"p"},"commands")," object of ",(0,i.kt)("inlineCode",{parentName:"p"},".athennarc.json")," file.\nDon't worry if this directory does not exist in your\napplication\u2014it will be created the first time you run the\n",(0,i.kt)("inlineCode",{parentName:"p"},"make:command")," Artisan command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./node artisan make:command SendEmails\n")),(0,i.kt)("h2",{id:"commands-structure"},"Commands structure"),(0,i.kt)("p",null,"Athenna commands are represented as classes and always extend\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseCommand")," class. You define the command ",(0,i.kt)("inlineCode",{parentName:"p"},"signature")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"description")," as static properties on the class itself:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export class SendEmails extends BaseCommand {\n  public static signature(): string {\n      return 'sendEmails'\n  }\n\n  public static description(): string {\n      return 'The description of sendEmails command'\n  }\n\n  public async handle(): Promise<void> {\n    //\n  }\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signature")," - The signature is basicaly the command. You will\nalways use this signature to call your command in terminal. It\nshould always be a string."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"description")," - The description is a short description of what\nyour command does, it will always be displayed in the help output."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"handle")," - The handle method will contain the logic of your\ncommand, this method will be called when executing your command.")),(0,i.kt)("h3",{id:"booting-the-app-within-the-command"},"Booting the app within the command"),(0,i.kt)("p",null,"Artisan commands do not boot your application before running\nthe command. If your command relies on the application code,\nyou must instruct the command to load the application first\nand then execute the ",(0,i.kt)("inlineCode",{parentName:"p"},"handle")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title=".athennarc.json"',title:'".athennarc.json"'},'{\n  "commands": {\n    "sendEmails": {\n      "path": "#app/console/commands/SendEmails",\n      "loadApp": true \ud83d\udc48\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Now we are able to request any dependencies we need using\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"@Inject()")," annotation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Inject } from '@athenna/ioc'\nimport { BaseCommand } from '@athenna/artisan'\nimport { MailgunService } from '#app/services/MailgunService'\n\nexport class SendEmails extends BaseCommand {\n  public static signature(): string {\n      return 'mail:send'\n  }\n\n  public static description(): string {\n      return 'Send an email.'\n  }\n\n  @Inject()\n  private mailgunService: MailgunService \ud83d\udc48\n\n  public async handle(): Promise<void> {\n    const msg = 'People reading this will have a wonderful day! \ud83e\udd73'\n\n    await this.mailgunService.send(msg)\n  }\n}\n")),(0,i.kt)("h3",{id:"constructor-injection-is-not-allowed"},"Constructor injection is not allowed"),(0,i.kt)("p",null,"The application is bootstrapped only after your command is\nalready registered, meaning that you can't use the\nautomatic constructor injection with commands to resolve\nyour dependencies:"),(0,i.kt)("h4",{id:"-does-not-work"},"\u274c Does not work"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Inject } from '@athenna/ioc'\nimport { BaseCommand } from '@athenna/artisan'\nimport { MailgunService } from '#app/services/MailgunService'\n\nexport class SendEmails extends BaseCommand {\n  public static signature(): string {\n      return 'mail:send'\n  }\n\n  public static description(): string {\n      return 'Send an email.'\n  }\n\n  public constructor(private mailgunService: MailgunService) { \ud83d\udc48\n    super()\n  }\n\n  public async handle(): Promise<void> {\n    const msg = 'People reading this will have a wonderful day! \ud83e\udd73'\n\n    await this.mailgunService.send(msg)\n  }\n}\n")),(0,i.kt)("h4",{id:"-works"},"\u2705 Works"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Inject } from '@athenna/ioc'\nimport { BaseCommand } from '@athenna/artisan'\nimport { MailgunService } from '#app/services/MailgunService'\n\nexport class SendEmails extends BaseCommand {\n  public static signature(): string {\n      return 'mail:send'\n  }\n\n  public static description(): string {\n      return 'Send an email.'\n  }\n\n  @Inject()\n  private mailgunService: MailgunService \ud83d\udc48\n\n  public async handle(): Promise<void> {\n    const msg = 'People reading this will have a wonderful day! \ud83e\udd73'\n\n    await this.mailgunService.send(msg)\n  }\n}\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},'For greater code reuse, it is good practice keeping your\nconsole commands light and let them defer to application\nservices to accomplish their tasks. In the example above,\nnote that we inject a service class to do the "heavy\nlifting" of sending the e-mails.')),(0,i.kt)("h2",{id:"calling-commands-in-runtime"},"Calling commands in runtime"),(0,i.kt)("p",null,"Sometimes you may wish to call other commands from an\nexisting Artisan command or from any other part of your\napplication. You may do so using the ",(0,i.kt)("inlineCode",{parentName:"p"},"call()")," method from\nArtisan. This method accepts the command string with its\narguments and options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Artisan } from '@athenna/artisan'\n\nawait Artisan.call('make:controller TestController')\n")),(0,i.kt)("p",null,"If you want to verify if your command has generated some\noutput in ",(0,i.kt)("inlineCode",{parentName:"p"},"stdout")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"stderr")," you can use the\n",(0,i.kt)("inlineCode",{parentName:"p"},"callInChild()")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const { stdout, stderr } = await Artisan.callInChild('make:controller TestController')\n\nassert.isTrue(stdout.includes('[ MAKING CONTROLLER ]'))\nassert.isUndefined(stderr)\n")),(0,i.kt)("p",null,"By default this method will look to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Path.boostrap('artisan.ts')"),"\nfile to execute your command, but you can change the file to be used\nsetting the path to it as second parameter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const command = 'make:controller TestController'\nconst artisanPath = Path.pwd(`artisan.${Path.ext()}`)\n\nawait Artisan.callInChild(command, artisanPath)\n")),(0,i.kt)("h2",{id:"defining-input-expectations"},"Defining input expectations"),(0,i.kt)("p",null,"When writing console commands, it is common to gather\ninput from the user through arguments or options. Athenna\nmakes it very convenient to define the input you expect\nfrom the user using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Argument()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@Option()"),"\nannotations on your commands. See the example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Inject } from '@athenna/ioc'\nimport { MailgunService } from '#app/services/MailgunService'\nimport { Option, Argument, BaseCommand } from '@athenna/artisan'\n\nexport class SendEmails extends BaseCommand {\n  public static signature(): string {\n      return 'mail:send'\n  }\n\n  public static description(): string {\n      return 'Send an email.'\n  }\n\n  @Argument()\n  private email: string\n\n  @Option({\n    signature: '-s, --subject <subject>',\n    default: 'Athenna',\n    description: 'Set the subject of the email.',\n  })\n  private subject: string\n\n  @Inject()\n  private mailgunService: MailgunService\n\n  public async handle(): Promise<void> {\n    const message = 'Hello from Athenna!'\n\n    await this.mailgunService.send(this.email, {\n      message,\n      subject: this.subject,\n    })\n  }\n}\n")),(0,i.kt)("h3",{id:"arguments"},"Arguments"),(0,i.kt)("p",null,"Command arguments are positional, and they are accepted\nin the same order as you define them in your class.\nFor example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Argument, BaseCommand } from '@athenna/artisan'\n\nexport class Greet extends BaseCommand {\n  public static signature(): string {\n    return 'greet'\n  }\n\n  @Argument()\n  public name: string\n\n  @Argument()\n  public age: string\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./node artisan greet <name> <age>\n")),(0,i.kt)("h4",{id:"spreadvariadic-arguments"},"Spread/Variadic arguments"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@Argument()")," annotation allows you to define a\ncatch-all argument. It is like the rest parameters\nin JavaScript and must always be the last argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Argument, BaseCommand } from '@athenna/artisan'\n\nexport class Greet extends BaseCommand {\n  public static signature(): string {\n    return 'greet'\n  }\n\n  @Argument()\n  public age: string\n\n  @Argument({ signature: '<names...>' }) \ud83d\udc48\n  public names: string[] \ud83d\udc48\n\n  public async handle() {\n    console.log(this.age, this.names)\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./node artisan greet 22 lenon txsoura\n")),(0,i.kt)("p",null,"Will output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"22 [ 'lenon', 'txsoura' ]\n")),(0,i.kt)("h4",{id:"arguments-options"},"Arguments options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@Argument()")," annotation accept the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signature")," - The signature of the argument. If not present\nthe name of the class property will be used."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"description")," - The description of the argument. This will\nbe displayed in the help output."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"required")," - Set if the argument is required or not. This\ncould also be done in the ",(0,i.kt)("inlineCode",{parentName:"li"},"signature")," using ",(0,i.kt)("inlineCode",{parentName:"li"},"<argName>")," for\nrequired and ",(0,i.kt)("inlineCode",{parentName:"li"},"[argName]")," for optional.")),(0,i.kt)("h3",{id:"options"},"Options"),(0,i.kt)("p",null,"You define the options using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Option()")," annotation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Option, BaseCommand } from '@athenna/artisan'\n\nexport class Greet extends BaseCommand {\n  public static signature(): string {\n    return 'greet'\n  }\n\n  @Option({ signature: '-n, --name <name>' })\n  public name: string\n\n  public async handle() {\n    console.log('hey', this.name)\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./node artisan greet -n lenon\n")),(0,i.kt)("p",null,"Will output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"hey lenon\n")),(0,i.kt)("h4",{id:"negatable-boolean-options"},"Negatable boolean options"),(0,i.kt)("p",null,"You can define a boolean option long name with a\nleading ",(0,i.kt)("inlineCode",{parentName:"p"},"no-")," to set the option value to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"\nwhen used. Defined alone this also makes the option\n",(0,i.kt)("inlineCode",{parentName:"p"},"true")," by default."),(0,i.kt)("p",null,"If you define ",(0,i.kt)("inlineCode",{parentName:"p"},"--foo")," first, adding ",(0,i.kt)("inlineCode",{parentName:"p"},"--no-foo")," does\nnot change the default value from what it would otherwise be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Option, BaseCommand } from '@athenna/artisan'\n\nexport class AthennaPizzeria extends BaseCommand {\n  public static signature(): string {\n    return 'pizza'\n  }\n\n  @Option({ signature: '--no-sauce' })\n  public addSauce: boolean\n\n  @Option({ signature: '--cheese <flavour>' })\n  public cheeseFlavour: string\n\n  @Option({ signature: '--no-cheese' })\n  public addCheese: boolean\n\n  public async handle() {\n    const sauceStr = this.addSauce ? 'sauce' : 'no sauce'\n    const cheeseStr = (this.addCheese === false) ? 'no cheese' : `${this.chesseFlavour} cheese`;\n\n    console.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./node artisan pizza\nYou ordered a pizza with sauce and mozzarella cheese\n\n./node artisan pizza --sauce\nerror: unknown option '--sauce'\n\n./node artisan pizza --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n\n./node artisan pizza --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n")),(0,i.kt)("h4",{id:"spreadvariadic-options"},"Spread/Variadic options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@Argument()")," annotation allows you to define a\ncatch-all argument. It is like the rest parameters\nin JavaScript and must always be the last argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Option, BaseCommand } from '@athenna/artisan'\n\nexport class Greet extends BaseCommand {\n  public static signature(): string {\n    return 'greet'\n  }\n\n  @Option({ signature: '--names <names...>' }) \ud83d\udc48\n  public names: string[] \ud83d\udc48\n\n  public async handle() {\n    console.log(this.names)\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./node artisan greet --names=lenon --names=txsoura\n")),(0,i.kt)("p",null,"Will output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"[ 'lenon', 'txsoura' ]\n")),(0,i.kt)("h4",{id:"option-options"},"Option options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@Option()")," annotation accept the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signature")," - The signature of the option. If not present\nthe name of the class property will be used."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"description")," - The description of the option. This will\nbe displayed in the help output."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default")," - Set the default value for the option if not\npresent.")),(0,i.kt)("h2",{id:"prompts"},"Prompts"),(0,i.kt)("p",null,"Coming soon"),(0,i.kt)("h2",{id:"logger-and-ui"},"Logger and UI"),(0,i.kt)("p",null,"Coming soon"),(0,i.kt)("h2",{id:"generating-templates-in-commands"},"Generating templates in commands"),(0,i.kt)("p",null,"Coming soon"),(0,i.kt)("h2",{id:"manipulating-athennarcjson-in-commands"},"Manipulating ",(0,i.kt)("inlineCode",{parentName:"h2"},".athennarc.json")," in commands"),(0,i.kt)("p",null,"Coming soon"))}d.isMDXComponent=!0}}]);