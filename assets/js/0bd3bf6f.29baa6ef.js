"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[1803],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=c(n),u=i,v=h["".concat(p,".").concat(u)]||h[u]||l[u]||o;return n?r.createElement(v,a(a({ref:t},d),{},{components:n})):r.createElement(v,a({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=h;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1152:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],s={sidebar_position:3,id:"providers",title:"Service Providers",hide_title:!0,hide_table_of_contents:!0,tags:["Architecture Concepts"]},p=void 0,c={unversionedId:"architecture-concepts/providers",id:"architecture-concepts/providers",title:"Service Providers",description:"\ud83c\udfe0",source:"@site/docs/architecture-concepts/providers.mdx",sourceDirName:"architecture-concepts",slug:"/architecture-concepts/providers",permalink:"/docs/architecture-concepts/providers",editUrl:"https://github.com/AthennaIO/Docs/docs/architecture-concepts/providers.mdx",tags:[{label:"Architecture Concepts",permalink:"/docs/tags/architecture-concepts"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"providers",title:"Service Providers",hide_title:!0,hide_table_of_contents:!0,tags:["Architecture Concepts"]},sidebar:"tutorialSidebar",previous:{title:"Service Container",permalink:"/docs/architecture-concepts/container"},next:{title:"Facades",permalink:"/docs/architecture-concepts/facades"}},d=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Writing service providers",id:"id-writing-service-providers",children:[{value:"The register method",id:"id-the-register-method",children:[{value:"The bindings and singletons properties",id:"the-bindings-and-singletons-properties",children:[],level:4}],level:3},{value:"The boot method",id:"id-the-boot-method",children:[],level:3},{value:"The shutdown method",id:"id-the-shutdown-method",children:[],level:3}],level:2},{value:"Registering providers",id:"id-registering-providers",children:[],level:2},{value:"Choosing applications",id:"id-choosing-applications",children:[],level:2}],l={toc:d};function h(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("nav",{"aria-label":"breadcrumbs"},(0,o.kt)("ul",{class:"breadcrumbs"},(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link"},"Architecture Concepts")),(0,o.kt)("li",{class:"breadcrumbs__item"},(0,o.kt)("a",{class:"breadcrumbs__link",href:"/docs/architecture-concepts/providers"},"Service Providers")))),(0,o.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,o.kt)("h1",{id:"service-providers"},"Service Providers"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"introduction"},(0,o.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"writing-service-providers"},(0,o.kt)("a",{parentName:"h4",href:"#id-writing-service-providers"},"Writing service providers")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"the-register-method"},(0,o.kt)("a",{parentName:"h4",href:"#id-the-register-method"},"The register method"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"the-boot-method"},(0,o.kt)("a",{parentName:"h4",href:"#id-the-boot-method"},"The boot method"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"the-shutdown-method"},(0,o.kt)("a",{parentName:"h4",href:"#id-the-shutdown-method"},"The shutdown method"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"registering-providers"},(0,o.kt)("a",{parentName:"h4",href:"#id-registering-providers"},"Registering providers"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("h4",{parentName:"li",id:"choosing-applications"},(0,o.kt)("a",{parentName:"h4",href:"#id-choosing-applications"},"Choosing applications")))),(0,o.kt)("h2",{id:"id-introduction"},"Introduction"),(0,o.kt)("p",null,"Service providers are the central place of all Athenna application bootstrapping. Your own application, as well as all\nof Athenna core services, are bootstrapped via service providers."),(0,o.kt)("p",null,'But, what do we mean by "bootstrapped"? In general, we mean registering things, including registering service container\nbindings, event listeners, middleware, and even routes. Service providers are the central place to configure your application.'),(0,o.kt)("p",null,"If you open the ",(0,o.kt)("inlineCode",{parentName:"p"},"config/app.js")," file included with Athenna, you will see a providers array. These are all the service provider\nclasses that will be loaded for your application. By default, a set of Athenna core service providers are listed in this array.\nThese providers bootstrap the core Athenna components, such as the http, route, logger, services and others."),(0,o.kt)("p",null,"In this overview, you will learn how to write your own service providers and register them with your Athenna application."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you would like to learn more about how Athenna works internally, check out our documentation on the Athenna ",(0,o.kt)("a",{parentName:"p",href:"lifecycle"},"request lifecycle"),"."))),(0,o.kt)("h2",{id:"id-writing-service-providers"},"Writing service providers"),(0,o.kt)("p",null,"All service providers extend the ",(0,o.kt)("inlineCode",{parentName:"p"},"ServiceProvider")," class. Most service providers contain a ",(0,o.kt)("inlineCode",{parentName:"p"},"register")," and a ",(0,o.kt)("inlineCode",{parentName:"p"},"boot")," method.\nWithin the ",(0,o.kt)("inlineCode",{parentName:"p"},"register")," method, you should only bind things into the service container. You should never attempt to register\nany event listeners, routes, or any other piece of functionality within the register method."),(0,o.kt)("p",null,"The Artisan can generate a new provider via the ",(0,o.kt)("inlineCode",{parentName:"p"},"make:provider")," command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan make:provider MyAppProvider\n")),(0,o.kt)("h3",{id:"id-the-register-method"},"The register method"),(0,o.kt)("p",null,"As mentioned previously, within the ",(0,o.kt)("inlineCode",{parentName:"p"},"register")," method, you should only bind things into the service container. You should\nnever attempt to register any event listeners, routes, or any other piece of functionality within the register method.\nOtherwise, you may accidentally use a service that is provided by a service provider which has not loaded yet."),(0,o.kt)("p",null,"Let's take a look at a basic service provider. Within any of your service provider methods, you always have access to\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"this.container")," property which provides access to the service container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { ServiceProvider } from '@athenna/ioc'\nimport { MyAppService } from '#app/Utils/MyAppService'\n\nexport class MyAppProvider extends ServiceProvider {\n\n  /**\n   * Register any application services.\n   *\n   * @return {Promise<void>}\n   */\n  register() {\n    this.container.singleton('MyApp/Service', MyAppService)\n  }\n}\n")),(0,o.kt)("p",null,"This service provider only defines a ",(0,o.kt)("inlineCode",{parentName:"p"},"register")," method, and uses that method to define an implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"MyAppService"),"\nin the service container. If you're not yet familiar with Athenna service container, check out ",(0,o.kt)("a",{parentName:"p",href:"container"},"its documentation"),"."),(0,o.kt)("h4",{id:"the-bindings-and-singletons-properties"},"The bindings and singletons properties"),(0,o.kt)("p",null,"If your service provider registers many simple bindings, you may wish to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"bindings")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"singletons")," properties instead\nof manually registering each container binding. When the service provider is loaded by the framework, it will automatically\ncheck for these properties and register their bindings:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { ServiceProvider } from '@athenna/ioc'\nimport { MyAppService } from '#app/Utils/MyAppService'\nimport { MyAppResource } from '#app/Utils/MyAppResource'\nimport { MyAppRepository } from '#app/Utils/MyAppRepository'\n\nexport class MyAppProvider extends ServiceProvider {\n  /**\n   * All the container bindings that should be registered.\n   */\n  get bindings() {\n      return {\n        'MyApp/Service': MyAppService\n      }\n  }\n\n  /**\n   * All the container instances that should be registered.\n   */\n  get instances() {\n      return {\n        'MyApp/Resource': new MyAppResource()\n      }\n  }\n\n  /**\n   * All the container singletons that should be registered.\n   */\n  get singletons() {\n      return {\n        'MyApp/Repository': MyAppRepository\n      }\n  }\n}\n")),(0,o.kt)("h3",{id:"id-the-boot-method"},"The boot method"),(0,o.kt)("p",null,"So, what if we need to register a dependency that needs another dependency within our service provider? This should be\ndone within the ",(0,o.kt)("inlineCode",{parentName:"p"},"boot")," method. This method is called after all other service providers have been registered, meaning you\nhave access to all other services that have been registered by the framework:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { ServiceProvider } from '@athenna/ioc'\nimport { MyAppService } from '#app/Utils/MyAppService'\n\nexport class MyAppProvider extends ServiceProvider {\n\n  /**\n   * Bootstrap any application services.\n   *\n   * @return {Promise<void>}\n   */\n  boot() {\n      /** @type {import('#app/Utils/MyAppRepository').MyAppRepository} */\n    const myAppRepository = this.container.safeUse('MyApp/Repository')\n\n    this.container.instance('MyApp/Service', new MyAppService(myAppRepository))\n  }\n}\n")),(0,o.kt)("h3",{id:"id-the-shutdown-method"},"The shutdown method"),(0,o.kt)("p",null,"The shutdown method will be called when the application is going down for some reason. This method is extremely useful for ",(0,o.kt)("a",{parentName:"p",href:"/docs/digging-deeper/graceful-shutdown"},(0,o.kt)("inlineCode",{parentName:"a"},"gracefully shutdown")),"\nthe application, and it's used in providers such as ",(0,o.kt)("inlineCode",{parentName:"p"},"HttpServerProvider")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"DatabaseProvider"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { ServiceProvider } from '@athenna/ioc'\n\nexport class MyAppProvider extends ServiceProvider {\n\n  /**\n   * Shutdown any application services.\n   *\n   * @return {Promise<void>}\n   */\n  async shutdown() {\n    /** @type {import('#app/Utils/MyAppRepository').MyAppRepository} */\n    const MyAppService = this.container.use('MyApp/Service')\n\n    if (!MyAppService) {\n        return\n    }\n\n    await MyAppService.close()\n  }\n}\n")),(0,o.kt)("h2",{id:"id-registering-providers"},"Registering providers"),(0,o.kt)("p",null,"All service providers are registered in the ",(0,o.kt)("inlineCode",{parentName:"p"},"config/app.js")," configuration file. This file contains a providers array where\nyou can list the class names of your service providers. By default, a set of Athenna core service providers are listed\nin this array. These providers bootstrap the core Athenna components, such as the http, route, services and others."),(0,o.kt)("p",null,"To register your provider, add it to the array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"providers: [\n  // Other service providers\n\n  import('#providers/MyAppProvider'),\n],\n")),(0,o.kt)("h2",{id:"id-choosing-applications"},"Choosing applications"),(0,o.kt)("p",null,"In some cases you want that your provider only run for determined type of Athenna applications. For example, I have a ",(0,o.kt)("inlineCode",{parentName:"p"},"TestingDatabaseProvider"),"\nthat connect with some database, if I don't have an ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/cli/commands"},(0,o.kt)("inlineCode",{parentName:"a"},"Artisan command"))," that do some work inside\nthis database, why I would need to run this ",(0,o.kt)("inlineCode",{parentName:"p"},"TestingDatabaseProvider")," on application bootstrap?"),(0,o.kt)("p",null,"To solve this problem you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"bootstrapIn")," getter to choose the applications that could run this provider:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Set where the type of application where this provider can\n * be registered or not.\n *\n * @return {string[]}\n */\nget bootstrapIn() {\n    return ['http', 'worker']\n}\n")),(0,o.kt)("p",null,"Now in ",(0,o.kt)("inlineCode",{parentName:"p"},"bootstrap/main")," file we need to define the ",(0,o.kt)("inlineCode",{parentName:"p"},"ATHENNA_APPLICATIONS")," environment variable before the application ignite:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Ignite } from '@athenna/core'\nimport { install } from 'source-map-support'\n\nasync function main() {\n  install()\n\n  process.env.ATHENNA_APPLICATIONS = 'http,worker'\n\n  const application = await new Ignite().fire()\n\n  await application.bootWorker()\n  await application.bootHttpServer()\n}\n\nmain().catch()\n")),(0,o.kt)("p",null,"Now when running ",(0,o.kt)("inlineCode",{parentName:"p"},"node artisan")," commands the ",(0,o.kt)("inlineCode",{parentName:"p"},"TestingDatabaseProvider")," will not be ignited!"))}h.isMDXComponent=!0}}]);