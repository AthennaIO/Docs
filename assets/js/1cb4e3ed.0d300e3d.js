"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[6805],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return u}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},m=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=d(a),u=i,h=c["".concat(s,".").concat(u)]||c[u]||p[u]||l;return a?n.createElement(h,r(r({ref:t},m),{},{components:a})):n.createElement(h,r({ref:t},m))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var d=2;d<l;d++)r[d]=a[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1803:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return m}});var n=a(7462),i=a(3366),l=(a(7294),a(3905)),r=["components"],o={sidebar_position:1,id:"getting-started",title:"Getting Started",hide_title:!0,hide_table_of_contents:!0,tags:["ORM","Database","Getting Started"]},s=void 0,d={unversionedId:"orm/getting-started",id:"orm/getting-started",title:"Getting Started",description:"\ud83c\udfe0",source:"@site/docs/orm/getting-started.mdx",sourceDirName:"orm",slug:"/orm/getting-started",permalink:"/docs/orm/getting-started",editUrl:"https://github.com/AthennaIO/Docs/docs/orm/getting-started.mdx",tags:[{label:"ORM",permalink:"/docs/tags/orm"},{label:"Database",permalink:"/docs/tags/database"},{label:"Getting Started",permalink:"/docs/tags/getting-started"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"getting-started",title:"Getting Started",hide_title:!0,hide_table_of_contents:!0,tags:["ORM","Database","Getting Started"]},sidebar:"tutorialSidebar",previous:{title:"Seeding",permalink:"/docs/database/seeding"},next:{title:"Criterias",permalink:"/docs/orm/criterias"}},m=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Generating models",id:"id-generating-models",children:[],level:2},{value:"Model conventions",id:"id-model-conventions",children:[{value:"Table names",id:"id-table-names",children:[],level:3},{value:"Primary keys",id:"id-primary-keys",children:[],level:3},{value:"Default attributes vales",id:"id-default-attributes-values",children:[],level:3},{value:"Schemas",id:"id-schemas",children:[],level:3},{value:"UUID Keys",id:"id-uuid-keys",children:[],level:3},{value:"Database connections",id:"id-database-connections",children:[],level:3}],level:2},{value:"Retrieving models",id:"id-retrieving-models",children:[{value:"Building queries",id:"id-building-queries",children:[],level:3},{value:"Refreshing models",id:"id-refreshing-models",children:[],level:3}],level:2},{value:"Pagination",id:"id-pagination",children:[],level:2},{value:"Collections",id:"id-collections",children:[],level:2},{value:"Retrieve single models &amp; Aggregates",id:"id-retrieve-single-models-and-aggregates",children:[{value:"Not found exceptions",id:"id-not-found-exceptions",children:[],level:3},{value:"Retrieving aggregates",id:"id-retrieving-aggregates",children:[],level:3}],level:2},{value:"Inserting &amp; Updating models",id:"id-inserting-and-updating-models",children:[{value:"Inserts",id:"id-inserts",children:[],level:3},{value:"Updates",id:"id-updates",children:[{value:"Mass updates",id:"id-mass-updates",children:[],level:4}],level:3},{value:"Mass assignment",id:"id-mass-assignment",children:[],level:3},{value:"Allowing mass assignment",id:"id-allowing-mass-assignment",children:[{value:"Allowing mass assignment for some calls",id:"id-allowing-mass-assignment-for-some-calls",children:[],level:4}],level:3},{value:"Insert or update (Upserts)",id:"id-insert-or-update-upserts",children:[],level:3}],level:2},{value:"Deleting models",id:"id-deleting-models",children:[{value:"Deleting models using queries",id:"id-deleting-models-using-queries",children:[],level:3}],level:2},{value:"Soft deleting",id:"id-soft-deleting",children:[{value:"Restoring soft delete models",id:"id-restoring-soft-delete-models",children:[],level:3},{value:"Permanently deleting a model",id:"id-permanently-deleting-a-model",children:[],level:3},{value:"Querying soft delete models",id:"id-querying-soft-delete-models",children:[{value:"Retrieving only soft deleted models",id:"id-retrieving-only-soft-deleted-models",children:[],level:4}],level:3}],level:2}],p={toc:m};function c(e){var t=e.components,a=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("nav",{"aria-label":"breadcrumbs"},(0,l.kt)("ul",{class:"breadcrumbs"},(0,l.kt)("li",{class:"breadcrumbs__item"},(0,l.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,l.kt)("li",{class:"breadcrumbs__item"},(0,l.kt)("a",{class:"breadcrumbs__link"},"ORM")),(0,l.kt)("li",{class:"breadcrumbs__item"},(0,l.kt)("a",{class:"breadcrumbs__link",href:"/docs/orm/getting-started"},"Getting Started")))),(0,l.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,l.kt)("h1",{id:"orm-getting-started"},"ORM: Getting Started"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"introduction"},(0,l.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"generating-models"},(0,l.kt)("a",{parentName:"h4",href:"#id-generating-models"},"Generating models"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"model-conventions"},(0,l.kt)("a",{parentName:"h4",href:"#id-model-conventions"},"Model conventions")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"table-names"},(0,l.kt)("a",{parentName:"h4",href:"#id-table-names"},"Table names"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"primary-keys"},(0,l.kt)("a",{parentName:"h4",href:"#id-primary-keys"},"Primary keys"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"default-attributes-values"},(0,l.kt)("a",{parentName:"h4",href:"#id-default-attributes-values"},"Default attributes values"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"schemas"},(0,l.kt)("a",{parentName:"h4",href:"#id-schemas"},"Schemas"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"database-connections"},(0,l.kt)("a",{parentName:"h4",href:"#id-database-connections"},"Database connections"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"retrieving-models"},(0,l.kt)("a",{parentName:"h4",href:"#id-retrieving-models"},"Retrieving models")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"building-queries"},(0,l.kt)("a",{parentName:"h4",href:"#id-building-queries"},"Building queries"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"refreshing-models"},(0,l.kt)("a",{parentName:"h4",href:"#id-refreshing-models"},"Refreshing models"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"pagination"},(0,l.kt)("a",{parentName:"h4",href:"#id-pagination"},"Pagination"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"collections"},(0,l.kt)("a",{parentName:"h4",href:"#id-collections"},"Collections"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"retrieve-single-models--aggregates"},(0,l.kt)("a",{parentName:"h4",href:"#id-retrieve-single-models-and-aggregates"},"Retrieve single models & Aggregates"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"inserting--updating-models"},(0,l.kt)("a",{parentName:"h4",href:"#id-inserting-and-updating-models"},"Inserting & Updating models"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"deleting-models"},(0,l.kt)("a",{parentName:"h4",href:"#id-deleting-models"},"Deleting models"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h4",{parentName:"li",id:"soft-deleting"},(0,l.kt)("a",{parentName:"h4",href:"#id-soft-deleting"},"Soft deleting")))),(0,l.kt)("h2",{id:"id-introduction"},"Introduction"),(0,l.kt)("p",null,'Athenna has an object-relational mapper (ORM) that makes it enjoyable to interact with your database. When using the Athenna ORM,\neach database table has a corresponding "Model" that is used to interact with that table. In addition to retrieving records from\nthe database table, the models allow you to insert, update, and delete records from the table as well.'),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Before getting started, be sure to configure a database connection in your application's ",(0,l.kt)("inlineCode",{parentName:"p"},"config/database.js")," configuration file.\nFor more information on configuring your database, check out ",(0,l.kt)("a",{parentName:"p",href:"/docs/database/getting-started#id-configuration"},(0,l.kt)("inlineCode",{parentName:"a"},"the database configuration documentation."))))),(0,l.kt)("h2",{id:"id-generating-models"},"Generating models"),(0,l.kt)("p",null,"To get started, let's create a model. Models typically live in the ",(0,l.kt)("inlineCode",{parentName:"p"},"app/Models")," directory and extend the\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/AthennaIO/Database/blob/develop/src/Models/Model.js"},(0,l.kt)("inlineCode",{parentName:"a"},"Model"))," class. You may use the ",(0,l.kt)("inlineCode",{parentName:"p"},"make:model")," Artisan\ncommand to generate a new model:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan make:model Flight\n")),(0,l.kt)("h2",{id:"id-model-conventions"},"Model conventions"),(0,l.kt)("p",null,"Models generated by the ",(0,l.kt)("inlineCode",{parentName:"p"},"make:model")," command will be placed in the ",(0,l.kt)("inlineCode",{parentName:"p"},"app/Models")," directory. Let's examine a basic model\nclass and discuss some of Model's key conventions:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Model } from '@athenna/database'\n\nexport class Flight extends Model {\n\n}\n")),(0,l.kt)("h3",{id:"id-table-names"},"Table names"),(0,l.kt)("p",null,"After glancing at the example above, you may have noticed that we did not tell the model which database table corresponds to\nour ",(0,l.kt)("inlineCode",{parentName:"p"},"Flight"),' model. By convention, the "snake_case", plural name of the class will be used as the table name unless another\nname is explicitly specified. So, in this case, the model will assume the ',(0,l.kt)("inlineCode",{parentName:"p"},"Flight")," model stores records in the ",(0,l.kt)("inlineCode",{parentName:"p"},"flights")," table,\nwhile an ",(0,l.kt)("inlineCode",{parentName:"p"},"AirTrafficController")," model would store records in an ",(0,l.kt)("inlineCode",{parentName:"p"},"air_traffic_controllers")," table."),(0,l.kt)("p",null,"If your model's corresponding database table does not fit this convention, you may manually specify the model's table name by\ndefining a static getter ",(0,l.kt)("inlineCode",{parentName:"p"},"table")," on the model:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Model } from '@athenna/database'\n\nexport class Flight extends Model {\n  static get table() {\n      return 'my_flights'\n  }\n\n  /*...*/\n}\n")),(0,l.kt)("h3",{id:"id-primary-keys"},"Primary keys"),(0,l.kt)("p",null,"The model will also assume that each model's corresponding database table has a primary key column named id. If necessary,\nyou may define a static getter ",(0,l.kt)("inlineCode",{parentName:"p"},"primaryKey")," on your model to specify a different column that serves as your model's primary\nkey:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Model } from '@athenna/database'\n\nexport class Flight extends Model {\n  static get primaryKey() {\n      return 'id'\n  }\n\n  /*...*/\n}\n")),(0,l.kt)("h3",{id:"id-default-attributes-values"},"Default attributes vales"),(0,l.kt)("p",null,"By default, a newly instantiated model instance will not contain any attribute values. If you would like to define the default values\nfor some of your model's attributes, you may define a static getter ",(0,l.kt)("inlineCode",{parentName:"p"},"attributes")," on your model:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Uuid } from '@athenna/common'\nimport { Model } from '@athenna/database'\n\nexport class Flight extends Model {\n  static get attributes() {\n      return {\n          id: Uuid.generate()\n      }\n  }\n\n  /*...*/\n}\n")),(0,l.kt)("p",null,"As you can see we are defining an ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," property in our static getter ",(0,l.kt)("inlineCode",{parentName:"p"},"attributes"),". This property will have the value of a generated\nuuid randomly everytime that Athenna calls the ",(0,l.kt)("inlineCode",{parentName:"p"},"attributes")," getter. This means that ",(0,l.kt)("inlineCode",{parentName:"p"},"attributes")," is totally different from the default\nvalues that you set in your database migrations. Athenna will call the ",(0,l.kt)("inlineCode",{parentName:"p"},"attributes")," getter everytime that ",(0,l.kt)("inlineCode",{parentName:"p"},"create")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"createMany"),"\nmethods are called, this means that a new uuid will be generated for each call:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Flight } from '#app/Models/Flight'\n\nconst flight1 = await Flight.create()\nconst flight2 = await Flight.query().create()\n\nconsole.log(flight1.id) // -> 43bf66ec-658a-4f59-8f89-2aac5ae96e6a\nconsole.log(flight2.id) // -> cbe35c9c-60f3-11ed-9b6a-0242ac120002\n")),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"But always remember that if you have already set the attribute in one of these methods, the ",(0,l.kt)("inlineCode",{parentName:"p"},"attributes")," getter will not subscribe then:"),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Flight } from '#app/Models/Flight'\n\n// Setting my own id attribute\nconst flight = await Flight.create({ id: '299dabf8-60f4-11ed-9b6a-0242ac120002' })\n\nconsole.log(flight.id) // -> 299dabf8-60f4-11ed-9b6a-0242ac120002\n")))),(0,l.kt)("h3",{id:"id-schemas"},"Schemas"),(0,l.kt)("p",null,'The schemas are very important for Athenna models to work as a "dictionary". When you define a value in your schema you need to\nuse the ',(0,l.kt)("inlineCode",{parentName:"p"},"Column")," class to define all the options available in your database:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Model, Column } from '@athenna/database'\n\nexport class Flight extends Model {\n  static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      title: Column.string('flight_title'),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n    }\n  }\n}\n")),(0,l.kt)("h3",{id:"id-uuid-keys"},"UUID Keys"),(0,l.kt)("p",null,"Instead of using auto-incrementing integers as your model's primary keys, you may choose to use UUIDs instead. UUIDs are\nuniversally unique alphanumeric identifiers that are 36 characters long."),(0,l.kt)("p",null,"If you would like a model to use a UUID key instead of an auto-incrementing integer key, you may use the ",(0,l.kt)("inlineCode",{parentName:"p"},"Column.autoIncrementedUuid"),"\nmethod in your primary key and then set what is your primary key (the default is already the ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," property). Athenna will automatically\nidentify if you are using UUID's in your primary key and generate a new uuid after creating some record in your database:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Model, Column } from '@athenna/database'\n\nexport class Article extends Model {\n  static get primaryKey() {\n      return 'id'\n  }\n\n  static schema() {\n    return {\n      id: Column.autoIncrementedUuid(),\n      title: Column.string('my_title'),\n    }\n  }\n}\n\nconst article = await Article.create({ title: 'Traveling to Mozambique' })\n\nconsole.log(article.id) // -> 84b7cdcf-9e97-4547-ae3a-ec652c08f5ac\n")),(0,l.kt)("h3",{id:"id-database-connections"},"Database connections"),(0,l.kt)("p",null,"By default, all models will use the default database connection that is configured for your application. If you would like\nto specify a different connection that should be used when interacting with a particular model, you should define a\nstatic getter ",(0,l.kt)("inlineCode",{parentName:"p"},"connection")," on the model:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Model } from '@athenna/database'\n\nexport class Article extends Model {\n  static get connection() {\n      return 'mysql'\n  }\n\n  /*...*/\n}\n")),(0,l.kt)("h2",{id:"id-retrieving-models"},"Retrieving models"),(0,l.kt)("p",null,"Once you have created a model and its associated database table, you are ready to start retrieving data from your database. You can think of each model as a\npowerful query builder allowing you to fluently query the database table associated with the model. The model's ",(0,l.kt)("inlineCode",{parentName:"p"},"findMany")," method will retrieve all the records\nfrom the model's associated database table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Flight } from '#app/Models/Flight'\n\nconst flights = await Flight.findMany()\n\nflights.forEach(flight => console.log(flight.name))\n")),(0,l.kt)("h3",{id:"id-building-queries"},"Building queries"),(0,l.kt)("p",null,"The model ",(0,l.kt)("inlineCode",{parentName:"p"},"findMany")," method will return all the results in the model's table. However, since each model serves as a query builder, you may invoke the ",(0,l.kt)("inlineCode",{parentName:"p"},"query"),"\nmethod first and add additional constraints to queries and then invoke the ",(0,l.kt)("inlineCode",{parentName:"p"},"findMany")," method to retrieve the results:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const flights = await Flight.query()\n        .where('active', 1)\n        .orderBy('name')\n        .limit(10)\n        .findMany()\n")),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Since models are query builders, you should review all the methods provided by ",(0,l.kt)("a",{parentName:"p",href:"https://athenna.io/docs/database/query-builder"},(0,l.kt)("inlineCode",{parentName:"a"},"Athenna's query builder")),".\nYou may use any of these methods when writing your model queries."))),(0,l.kt)("h3",{id:"id-refreshing-models"},"Refreshing models"),(0,l.kt)("p",null,'If you already have an instance of an model that was retrieved from the database, you can "refresh" the model using the ',(0,l.kt)("inlineCode",{parentName:"p"},"fresh")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"refresh")," methods. The ",(0,l.kt)("inlineCode",{parentName:"p"},"fresh"),"\nmethod will re-retrieve the model from the database. The existing model instance will not be affected:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const flight = await Flight.find({ number: 'FR 900' })\n\nconst freshFlight = await flight.fresh()\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"refresh")," method will re-hydrate the existing model using fresh data from the database. In addition, all of its loaded relationships will be refreshed as well:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const flight = await Flight.find({ number: 'FR 900' })\n\nflight.number = 'FR 456'\n\nawait flight.refresh()\n\nconsole.log(flight.number) // -> \"FR 900\"\n")),(0,l.kt)("h2",{id:"id-pagination"},"Pagination"),(0,l.kt)("p",null,"The Athenna models also has a ",(0,l.kt)("inlineCode",{parentName:"p"},"paginate")," method that works exact like the ",(0,l.kt)("a",{parentName:"p",href:"/docs/database/query-builder#id-pagination"},(0,l.kt)("inlineCode",{parentName:"a"},"paginate method from the query builder:"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const page = 0\nconst limit = 10\nconst resourceUrl = '/flights'\nconst where = { active: 1 }\n\nconst { data, meta, links } = await Flight.paginate(page, limit, resourceUrl, where)\n")),(0,l.kt)("p",null,"You can also use the ",(0,l.kt)("inlineCode",{parentName:"p"},"paginate")," method when working with the ",(0,l.kt)("inlineCode",{parentName:"p"},"ModelQueryBuilder:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const page = 0\nconst limit = 10\nconst resourceUrl = '/flights'\n\nconst { data, meta, links } = await Flight.query()\n        .where({ active: 1 })\n        .paginate(page, limit, resourceUrl)\n")),(0,l.kt)("h2",{id:"id-collections"},"Collections"),(0,l.kt)("p",null,"As we have seen, the models method ",(0,l.kt)("inlineCode",{parentName:"p"},"findMany")," retrieve multiple records from the database. However, the Athenna model has a ",(0,l.kt)("inlineCode",{parentName:"p"},"collection")," method that will also retrieve\nmultiple records from the database but return it as an instance of the ",(0,l.kt)("a",{parentName:"p",href:"/docs/digging-deeper/collections"},(0,l.kt)("inlineCode",{parentName:"a"},"Collection"))," class."),(0,l.kt)("p",null,"The Collection class provides a variety of helpful methods for interacting with data collections. For example, the ",(0,l.kt)("inlineCode",{parentName:"p"},"reject")," method may be used to remove models from a\ncollection based on the results of an invoked closure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const flights = await Flight.collection({ destination: 'Paris' })\n\nconst availableFlights = flights.reject(flight => flight.cancelled)\n")),(0,l.kt)("h2",{id:"id-retrieve-single-models-and-aggregates"},"Retrieve single models & Aggregates"),(0,l.kt)("p",null,"In addition to retrieving all the records matching a given query, you may also retrieve single records using the ",(0,l.kt)("inlineCode",{parentName:"p"},"find")," method. Instead of returning an array or\ncollection of models, this method return a single model instance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const flight = await Flight.find({ id: 1 })\n\nconst flight = await Flight.find({ active: 1 })\n\nconst flight = await Flight.query().where('active', 1).find()\n")),(0,l.kt)("p",null,"Sometimes you may wish to perform some other action if no results are found. The ",(0,l.kt)("inlineCode",{parentName:"p"},"findOr")," method will return a single model instance or, if no results are found,\nexecute the given closure. The value returned by the closure ",(0,l.kt)("strong",{parentName:"p"},"will be considered the result of the method:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const flight = await Flight.findOr({ id: 1 }, async () => {\n    // ...\n})\n\nconst flight = await Flight.query()\n        .where('legs', '>', 3)\n        .findOr(async () => {\n            // ...\n        })\n")),(0,l.kt)("h3",{id:"id-not-found-exceptions"},"Not found exceptions"),(0,l.kt)("p",null,"Sometimes you may wish to throw an exception if a model is not found. This is particularly useful in routes or controllers. The ",(0,l.kt)("inlineCode",{parentName:"p"},"findOrFail")," method will retrieve\nthe first result of the query; however, if no result is found, an ",(0,l.kt)("inlineCode",{parentName:"p"},"ModelNotFoundException")," will be thrown:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const flight = await Flight.findOrFail({ id: 1 })\n\nconst flight = await Flight.query().where('legs', '>', 3).findOrFail()\n")),(0,l.kt)("h3",{id:"id-retrieving-aggregates"},"Retrieving aggregates"),(0,l.kt)("p",null,"When interacting with models, you may also use the ",(0,l.kt)("inlineCode",{parentName:"p"},"count"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"sum"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"max"),", and other aggregate methods provided by the ",(0,l.kt)("a",{parentName:"p",href:"/docs/database/query-builder"},(0,l.kt)("inlineCode",{parentName:"a"},"Athenna query builder")),".\nAs you might expect, these methods return a scalar value instead of a model instance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const count = await Flight.query().where('active', 1).count()\n\nconst max = await Flight.query().where('active', 1).max('price')\n")),(0,l.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Aggregate methods will not exist directly in your models, you will always need to call the ",(0,l.kt)("inlineCode",{parentName:"p"},"query")," method first and then execute it using one of then."))),(0,l.kt)("h2",{id:"id-inserting-and-updating-models"},"Inserting & Updating models"),(0,l.kt)("h3",{id:"id-inserts"},"Inserts"),(0,l.kt)("p",null,"Of course, when using the models, we don't only need to retrieve then from the database. We also need to insert new records. Thankfully, the models makes it simple.\nTo insert a new record into the database, you should instantiate a new model instance and set attributes on the model. Then, call the ",(0,l.kt)("inlineCode",{parentName:"p"},"save")," method on the model instance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Flight } from '#app/Models/Flight'\n\nconst flight = new Flight()\n\nflight.name = 'Brazil to Ukraine'\n\nawait flight.save()\n")),(0,l.kt)("p",null,"In this example, we assign the ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," field to the name attribute of the ",(0,l.kt)("inlineCode",{parentName:"p"},"#app/Models/Flight")," model instance. When we call the ",(0,l.kt)("inlineCode",{parentName:"p"},"save")," method, a record will be inserted into\nthe database. The model's ",(0,l.kt)("inlineCode",{parentName:"p"},"createdAt")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"updatedAt")," timestamps will automatically be set when the ",(0,l.kt)("inlineCode",{parentName:"p"},"save")," method is called, so there is no need to set them manually."),(0,l.kt)("p",null,"Alternatively, you may use the ",(0,l.kt)("inlineCode",{parentName:"p"},"create"),' method to "save" a new model using a single statement. The inserted model instance will be returned to you by the ',(0,l.kt)("inlineCode",{parentName:"p"},"create")," method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Flight } from '#app/Models/Flight'\n\nconst flight = await Flight.create({ name: 'Brazil to Angola' })\n")),(0,l.kt)("p",null,"However, we highly recommend that before using the ",(0,l.kt)("inlineCode",{parentName:"p"},"create")," method, you specify the static getter ",(0,l.kt)("inlineCode",{parentName:"p"},"persistOnly")," on your model class. This property will help your models to\nget protected against mass assignment vulnerabilities. To learn more about mass assignment, please consult the ",(0,l.kt)("a",{parentName:"p",href:"/docs/orm/getting-started#id-mass-assignment"},(0,l.kt)("inlineCode",{parentName:"a"},"mass assignment documentation."))),(0,l.kt)("h3",{id:"id-updates"},"Updates"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"save")," method may also be used to update models that already exist in the database. To update a model, you should retrieve it and set any attributes\nyou wish to update. Then, you should call the model's ",(0,l.kt)("inlineCode",{parentName:"p"},"save")," method. Again, the ",(0,l.kt)("inlineCode",{parentName:"p"},"updatedAt")," timestamp will automatically be updated, so there is no need\nto manually set its value:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Flight } from '#app/Models/Flight'\n\nconst flight = await Flight.query()\n    .where({ id: 1 })\n    .find()\n\nflight.name = 'Paris to London'\n\nawait flight.save()\n")),(0,l.kt)("h4",{id:"id-mass-updates"},"Mass updates"),(0,l.kt)("p",null,"Updates can also be performed against models that match a given query. In this example, all flights that are ",(0,l.kt)("inlineCode",{parentName:"p"},"active")," and have a ",(0,l.kt)("inlineCode",{parentName:"p"},"destination")," of ",(0,l.kt)("inlineCode",{parentName:"p"},"San Diego"),"\nwill be marked as delayed:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"await Flight.query()\n      .where('active', 1)\n      .where('destination', 'San Diego')\n      .update({ delayed: 1 })\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"update")," method expects a record of columns and value pairs representing the columns that should be updated. The ",(0,l.kt)("inlineCode",{parentName:"p"},"update")," method will always return one\ninstance of your model if your query only modifies one value. If you query modifies more than one the ",(0,l.kt)("inlineCode",{parentName:"p"},"update")," method will return an array of your models\ninstance."),(0,l.kt)("h3",{id:"id-mass-assignment"},"Mass assignment"),(0,l.kt)("p",null,"You may use the ",(0,l.kt)("inlineCode",{parentName:"p"},"create"),' method to "save" a new model using a single statement. The inserted model instance will be returned to you by the method:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Flight } from '#app/Models/Flight'\n\nconst flight = await Flight.create({\n    name: 'London to Korea',\n})\n")),(0,l.kt)("p",null,"However, before using the ",(0,l.kt)("inlineCode",{parentName:"p"},"create")," method, we extremely recommend you to specify the static getter ",(0,l.kt)("inlineCode",{parentName:"p"},"persistOnly")," on your model class. This property are\nwill help you to stay protected against mass assignment vulnerabilities."),(0,l.kt)("p",null,"A mass assignment vulnerability occurs when a user passes an unexpected field using some object and that field changes a column in your database that\nyou did not expect. For example, a malicious user might send an ",(0,l.kt)("inlineCode",{parentName:"p"},"isAdmin")," parameter through an HTTP request, which is then passed to your model's ",(0,l.kt)("inlineCode",{parentName:"p"},"create"),"\nmethod, allowing the user to escalate themselves to an administrator."),(0,l.kt)("p",null,"So, to get started, you should define which model attributes you want to make mass assignable. You may do this using the static getter ",(0,l.kt)("inlineCode",{parentName:"p"},"persistOnly")," on\nthe model. For example, let's make the ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," attribute of our Flight model mass assignable:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Model } from '@athenna/database'\n\nexport class Flight extends Model {\n  static get persistOnly() {\n    return ['name']\n  }\n\n  /*...*/\n}\n")),(0,l.kt)("p",null,"Once you have specified which attributes are mass assignable, you may use the ",(0,l.kt)("inlineCode",{parentName:"p"},"create")," method to insert a new record in the database. The ",(0,l.kt)("inlineCode",{parentName:"p"},"create"),"\nmethod returns the newly created model instance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const flight = await Flight.create({ name: 'London to Paris' })\n")),(0,l.kt)("h3",{id:"id-allowing-mass-assignment"},"Allowing mass assignment"),(0,l.kt)("p",null,"If you would like to make all of your attributes mass assignable, you may define your model's static getter ",(0,l.kt)("inlineCode",{parentName:"p"},"persistOnly")," as an array returning an\nasterisk (",(0,l.kt)("inlineCode",{parentName:"p"},"['*']"),"). If you choose to unguarded your model, you should take special care to always hand-craft the arrays passed to ",(0,l.kt)("inlineCode",{parentName:"p"},"create")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"update"),"\nmethods:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"static get persistOnly() {\n    return ['*']\n}\n")),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"By default, the Model class already implements the static getter ",(0,l.kt)("inlineCode",{parentName:"p"},"persistOnly")," returning the array with asterisk (",(0,l.kt)("inlineCode",{parentName:"p"},"['*']"),"). So if you don't want mass\nassignment protection, you could only delete this getter from your model:"),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Model } from '@athenna/database'\n\nexport class Flight extends Model {\n  /*...*/\n}\n")))),(0,l.kt)("h4",{id:"id-allowing-mass-assignment-for-some-calls"},"Allowing mass assignment for some calls"),(0,l.kt)("p",null,"You can also allow mass assignment when calling your ",(0,l.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"createMany"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"createOrUpdate")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"update")," methods:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const data = { name: 'Brazil to Mexico' }\nconst where = { active: 1 }\nconst ignorePersistOnly = true\n\nawait Flight.create(data, ignorePersistOnly)\nawait Flight.query().create(data, ignorePersistOnly)\n\nawait Flight.createMany([data], ignorePersistOnly)\nawait Flight.query().createMany([data], ignorePersistOnly)\n\nawait Flight.createOrUpdate(where, data, ignorePersistOnly)\nawait Flight.query().createOrUpdate(where, data, ignorePersistOnly)\n\nawait Flight.update(where, data, ignorePersistOnly)\nawait Flight.query().update(where, data, ignorePersistOnly)\n")),(0,l.kt)("h3",{id:"id-insert-or-update-upserts"},"Insert or update (Upserts)"),(0,l.kt)("p",null,"Occasionally, you may need to update an existing model or create a new model if no matching model exists. The ",(0,l.kt)("inlineCode",{parentName:"p"},"createOrUpdate")," method will update the model\nif some record is found by the query that you have built, otherwise the record will be created."),(0,l.kt)("p",null,"In the example below, if a flight exists with a ",(0,l.kt)("inlineCode",{parentName:"p"},"departure")," location of ",(0,l.kt)("inlineCode",{parentName:"p"},"Oakland")," and a ",(0,l.kt)("inlineCode",{parentName:"p"},"destination")," location of ",(0,l.kt)("inlineCode",{parentName:"p"},"San Diego"),", its ",(0,l.kt)("inlineCode",{parentName:"p"},"price")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"discounted"),"\ncolumns will be updated. If no such flight exists, a new flight will be created:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const where = {\n    departure: 'Oakland',\n    destination: 'San Diego'\n}\nconst data = {\n    price: 99,\n    discounted: 1,\n    departure: 'Oakland',\n    destination: 'San Diego'\n}\n\nawait Flight.createOrUpdate(where, data)\n")),(0,l.kt)("p",null,"Or you can use the query builder instead:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"await Flight.query()\n    .where('departure', 'Oakland')\n    .where('destination', 'San Diego')\n    .createOrUpdate({\n        price: 99,\n        discounted: 1,\n        departure: 'Oakland',\n        destination: 'San Diego'\n    })\n")),(0,l.kt)("h2",{id:"id-deleting-models"},"Deleting models"),(0,l.kt)("p",null,"To delete a model, you may call the ",(0,l.kt)("inlineCode",{parentName:"p"},"delete")," method on the model instance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Flight } from '#app/Models/Flight'\n\nconst where = { id: 1 }\nawait Flight.delete(where)\n")),(0,l.kt)("p",null,"You can also delete an instance directly:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Flight } from '#app/Models/Flight'\n\nconst where = { id: 1 }\nconst flight = await Flight.find(where)\n\nawait flight.delete()\n")),(0,l.kt)("p",null,"You may call the ",(0,l.kt)("inlineCode",{parentName:"p"},"truncate")," method to delete all the model's associated database records. The ",(0,l.kt)("inlineCode",{parentName:"p"},"truncate")," operation will also reset any auto-incrementing\nIDs on the model's associated table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"await Flight.truncate()\n")),(0,l.kt)("h3",{id:"id-deleting-models-using-queries"},"Deleting models using queries"),(0,l.kt)("p",null,"Of course, you may build a query to delete all models matching your query's criteria. In this example, we will delete all flights that are marked as\ninactive:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"await Flight.query().where('active', 0).delete()\n")),(0,l.kt)("h2",{id:"id-soft-deleting"},"Soft deleting"),(0,l.kt)("p",null,'In addition to actually removing records from your database, the ORM can also "soft delete" models. When models are soft deleted, they are not actually\nremoved from your database. Instead, a ',(0,l.kt)("inlineCode",{parentName:"p"},"deletedAt"),' attribute is set on the model indicating the date and time at which the model was "deleted". To enable\nsoft deletes for a model, you can just make the static getter ',(0,l.kt)("inlineCode",{parentName:"p"},"isSoftDelete")," return true in your model:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"export class Flight extends Model {\n  static get isSoftDelete() {\n    return false\n  }\n\n  /*...*/\n}\n")),(0,l.kt)("p",null,"You should also add the ",(0,l.kt)("inlineCode",{parentName:"p"},"deletedAt")," column to your database table in your migrations:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Migration } from '@athenna/database'\n\nexport class FlightMigration extends Migration {\n  async up({ schema }) {\n    return schema.createTable('my_flights', table => {\n      table.increments('id')\n      table.string('flight_title')\n      table.timestamps(true, true, true)\n      table.dateTime('deletedAt').nullable().defaultTo(null)\n    })\n  }\n\n  async down({ schema }) {\n    return schema.dropTableIfExists('my_flights')\n  }\n}\n")),(0,l.kt)("p",null,"And in your Model schema:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"export class Flight extends Model {\n  static get isSoftDelete() {\n    return false\n  }\n\n  static schema() {\n    return {\n      id: Column.autoIncrementedInt(),\n      title: Column.string('flight_title'),\n      createdAt: Column.createdAt(),\n      updatedAt: Column.updatedAt(),\n      deletedAt: Column.deletedAt(),\n    }\n  }\n\n  /*...*/\n}\n")),(0,l.kt)("p",null,"Now, when you call the ",(0,l.kt)("inlineCode",{parentName:"p"},"delete")," method on the model, Athenna will update your model with setting the current date and time in your ",(0,l.kt)("inlineCode",{parentName:"p"},"deletedAt")," column\nHowever, the model's database record will be left in the table. When querying a model that uses soft deletes, the soft deleted models will automatically\nbe excluded from all query results:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const where = { id: 1 }\nconst flight = await Flight.find(where)\n\nawait flight.delete()\n\n// The flight with id = 1 will not be inside the above array.\nconst flights = await Flight.findMany()\n")),(0,l.kt)("p",null,"To determine if a given model instance has been soft deleted, you may use the ",(0,l.kt)("inlineCode",{parentName:"p"},"isTrashed")," method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"if (flight.isTrashed()) {\n    //\n}\n")),(0,l.kt)("h3",{id:"id-restoring-soft-delete-models"},"Restoring soft delete models"),(0,l.kt)("p",null,'Sometimes you may wish to "un-delete" a soft deleted model. To restore a soft deleted model, you may call the ',(0,l.kt)("inlineCode",{parentName:"p"},"restore")," method on a model instance. The\n",(0,l.kt)("inlineCode",{parentName:"p"},"restore")," method will set the model's ",(0,l.kt)("inlineCode",{parentName:"p"},"deletedAt")," column to ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"await flight.restore()\n")),(0,l.kt)("p",null,"You may also use the ",(0,l.kt)("inlineCode",{parentName:"p"},"restore")," method in a query to restore multiple models:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const flights = await Flight.query()\n    .where('airlineId', 1)\n    .restore()\n")),(0,l.kt)("h3",{id:"id-permanently-deleting-a-model"},"Permanently deleting a model"),(0,l.kt)("p",null,"Sometimes you may need to truly remove a model from your database. You may use the ",(0,l.kt)("inlineCode",{parentName:"p"},"delete")," method with a ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," value in the first argument to permanently\nremove a soft deleted model from the database table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const force = true\nawait flight.delete(force)\n")),(0,l.kt)("h3",{id:"id-querying-soft-delete-models"},"Querying soft delete models"),(0,l.kt)("p",null,"As noted above, soft deleted models will automatically be excluded from query results. However, you may force soft deleted models to be included in a\nquery's results by calling the ",(0,l.kt)("inlineCode",{parentName:"p"},"withTrashed")," method on the query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const flights = await Flight.query()\n    .withTrashed()\n    .where('airlineId', 1)\n    .findMany()\n")),(0,l.kt)("h4",{id:"id-retrieving-only-soft-deleted-models"},"Retrieving only soft deleted models"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"onlyTrashed")," method will retrieve only soft deleted models:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const flights = await Flight.query()\n    .onlyTrashed()\n    .where('airlineId', 1)\n    .findMany()\n")))}c.isMDXComponent=!0}}]);