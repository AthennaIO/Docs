"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[7454],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),l=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=l(n),m=r,b=p["".concat(o,".").concat(m)]||p[m]||u[m]||i;return n?a.createElement(b,s(s({ref:t},c),{},{components:n})):a.createElement(b,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=p;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d.mdxType="string"==typeof e?e:r,s[1]=d;for(var l=2;l<i;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8261:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return d},metadata:function(){return l},toc:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),s=["components"],d={sidebar_position:4,id:"seeding",title:"Seeding",hide_title:!0,hide_table_of_contents:!0,tags:["Database","Seeding"]},o=void 0,l={unversionedId:"database/seeding",id:"database/seeding",title:"Seeding",description:"\ud83c\udfe0",source:"@site/docs/database/seeding.mdx",sourceDirName:"database",slug:"/database/seeding",permalink:"/docs/database/seeding",editUrl:"https://github.com/AthennaIO/Docs/docs/database/seeding.mdx",tags:[{label:"Database",permalink:"/docs/tags/database"},{label:"Seeding",permalink:"/docs/tags/seeding"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"seeding",title:"Seeding",hide_title:!0,hide_table_of_contents:!0,tags:["Database","Seeding"]},sidebar:"tutorialSidebar",previous:{title:"Migrations",permalink:"/docs/database/migrations"},next:{title:"Getting Started",permalink:"/docs/orm/getting-started"}},c=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Writing seeders",id:"id-writing-seeders",children:[],level:2},{value:"Running seeders",id:"id-running-seeders",children:[{value:"Setting the seeder connection",id:"id-setting-the-seeder-connection",children:[],level:3}],level:2}],u={toc:c};function p(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("nav",{"aria-label":"breadcrumbs"},(0,i.kt)("ul",{class:"breadcrumbs"},(0,i.kt)("li",{class:"breadcrumbs__item"},(0,i.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,i.kt)("li",{class:"breadcrumbs__item"},(0,i.kt)("a",{class:"breadcrumbs__link"},"Database")),(0,i.kt)("li",{class:"breadcrumbs__item"},(0,i.kt)("a",{class:"breadcrumbs__link",href:"/docs/database/seeding"},"Seeding")))),(0,i.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,i.kt)("h1",{id:"database-seeding"},"Database: Seeding"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"introduction"},(0,i.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"writing-seeders"},(0,i.kt)("a",{parentName:"h4",href:"#id-writing-seeders"},"Writing seeders"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"running-seeders"},(0,i.kt)("a",{parentName:"h4",href:"#id-running-seeders"},"Running seeders")))),(0,i.kt)("h2",{id:"id-introduction"},"Introduction"),(0,i.kt)("p",null,"Athenna includes the ability to seed your database with data using seed classes. All seed classes are stored in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"database/seeders")," directory."),(0,i.kt)("h2",{id:"id-writing-seeders"},"Writing seeders"),(0,i.kt)("p",null,"To generate a seeder, execute the ",(0,i.kt)("inlineCode",{parentName:"p"},"make:seeder")," Artisan command. All seeders generated by the framework will be placed in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"database/seeders")," directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan make:seeder UserSeeder\n")),(0,i.kt)("p",null,"A seeder class only contains one method by default: ",(0,i.kt)("inlineCode",{parentName:"p"},"run"),". This method is called when the ",(0,i.kt)("inlineCode",{parentName:"p"},"db:seed")," Artisan command is\nexecuted. Within the ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," method, you may insert data into your database however you wish. You may use the query builder\nto manually insert data, or you may use ",(0,i.kt)("a",{parentName:"p",href:"/docs/orm/getting-started"},"the model factories"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Seeder, Database } from '@athenna/database'\n\nimport { User } from '#app/Models/User'\n\nexport class UserSeeder extends Seeder {\n    /**\n     * Run the database seeders.\n     *\n     * @return {Promise<void>}\n     */\n    async run() {\n        await Database.table('users').createMany([/*.....*/])\n\n        await User.factory().count(20).create()\n    }\n}\n")),(0,i.kt)("h2",{id:"id-running-seeders"},"Running seeders"),(0,i.kt)("p",null,"You may execute the ",(0,i.kt)("inlineCode",{parentName:"p"},"db:seed")," Artisan command to seed your database. By default, the ",(0,i.kt)("inlineCode",{parentName:"p"},"db:seed")," command will run all the seeders\ninside the ",(0,i.kt)("inlineCode",{parentName:"p"},"database/seeders")," folder, but you can run only one seeder using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--class")," argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan db:seed\n\nnode artisan db:seed --class=UserSeeder\n")),(0,i.kt)("h3",{id:"id-setting-the-seeder-connection"},"Setting the seeder connection"),(0,i.kt)("p",null,"If your seeder will be interacting with a database connection other than your application's default database connection,\nyou should set the static getter ",(0,i.kt)("inlineCode",{parentName:"p"},"connection")," in your seeder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Seeder } from '@athenna/database'\n\nexport class UserSeeder extends Seeder {\n     /**\n      * Define the database connection to run the seeder.\n      *\n      * @return {string}\n      */\n     static get connection() {\n        return 'postgres'\n     }\n\n    /**\n     * Run the database seeders.\n     *\n     * @return {Promise<void>}\n     */\n    async run() {\n        await Database.table('users').createMany([/*.....*/])\n\n        await User.factory().count(20).create()\n    }\n}\n")))}p.isMDXComponent=!0}}]);