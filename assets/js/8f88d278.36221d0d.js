"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[918],{8644:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"rest-api-application/annotations","title":"Annotations","description":"Check all available REST API annotations and it options.","source":"@site/docs/rest-api-application/annotations.mdx","sourceDirName":"rest-api-application","slug":"/rest-api-application/annotations","permalink":"/docs/rest-api-application/annotations","draft":false,"unlisted":false,"editUrl":"https://github.com/AthennaIO/Docs/tree/main/docs/rest-api-application/annotations.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Annotations","sidebar_position":6,"toc_max_heading_level":2,"description":"Check all available REST API annotations and it options."},"sidebar":"tutorialSidebar","previous":{"title":"Error Handling","permalink":"/docs/rest-api-application/error-handling"},"next":{"title":"Rate Limiting","permalink":"/docs/rest-api-application/rate-limiting"}}');var i=r(4848),l=r(8453);const a={title:"Annotations",sidebar_position:6,toc_max_heading_level:2,description:"Check all available REST API annotations and it options."},o="Annotations",s={},c=[{value:"<code>@Controller()</code>",id:"controller",level:2},{value:"<code>alias</code>",id:"alias",level:3},{value:"<code>camelAlias</code>",id:"camelalias",level:3},{value:"<code>type</code>",id:"type",level:3},{value:"<code>@Middleware()</code>",id:"middleware",level:2},{value:"<code>isGlobal</code>",id:"isglobal",level:3},{value:"<code>name</code>",id:"name",level:3},{value:"<code>alias</code>",id:"alias-1",level:3},{value:"<code>camelAlias</code>",id:"camelalias-1",level:3},{value:"<code>type</code>",id:"type-1",level:3},{value:"<code>@Interceptor()</code>",id:"interceptor",level:2},{value:"<code>isGlobal</code>",id:"isglobal-1",level:3},{value:"<code>name</code>",id:"name-1",level:3},{value:"<code>alias</code>",id:"alias-2",level:3},{value:"<code>camelAlias</code>",id:"camelalias-2",level:3},{value:"<code>type</code>",id:"type-2",level:3},{value:"<code>@Terminator()</code>",id:"terminator",level:2},{value:"<code>isGlobal</code>",id:"isglobal-2",level:3},{value:"<code>name</code>",id:"name-2",level:3},{value:"<code>alias</code>",id:"alias-3",level:3},{value:"<code>camelAlias</code>",id:"camelalias-3",level:3},{value:"<code>type</code>",id:"type-3",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"annotations",children:"Annotations"})}),"\n",(0,i.jsx)(n.p,{children:"Check all available REST API annotations and it options."}),"\n",(0,i.jsx)(n.h2,{id:"controller",children:(0,i.jsx)(n.code,{children:"@Controller()"})}),"\n",(0,i.jsx)(n.p,{children:"Use this annotation to define all the metadata needed to register\nyour controller into the service container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Controller, type Context } from '@athenna/http'\n\n@Controller()\nexport class UserController {\n  public async index(({ response }): Context) {\n    return response.status(200).send({ status: 'ok' })\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can also define any of the following optional properties:"}),"\n",(0,i.jsx)(n.h3,{id:"alias",children:(0,i.jsx)(n.code,{children:"alias"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"'App/Http/Controllers/YourControllerName'"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Set what will be the alias that your controller will be registered\nwith in the service container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Controller({ alias: 'App/Http/Controllers/OtherControllerName' })\nexport class YourControllerName {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"camelalias",children:(0,i.jsx)(n.code,{children:"camelAlias"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Set what will be the camel alias that your controller will be\nregistered with in the service container. Camel aliases are very\nuseful when you need to resolve your dependency from ",(0,i.jsxs)(n.a,{href:"/docs/architecture-concepts/service-container#using-inject-annotation",children:[(0,i.jsx)(n.code,{children:"@Inject()"}),"\nannotation"]}),"\nor ",(0,i.jsx)(n.a,{href:"docs/architecture-concepts/service-container#automatic-constructor-injection",children:"automatic constructor injection."})]}),"\n",(0,i.jsxs)(n.p,{children:["Since controllers were not designed to be resolved using the above\napproaches, ",(0,i.jsx)(n.code,{children:"camelAlias"})," will always be ",(0,i.jsx)(n.code,{children:"undefined"}),", but you are\nfree to define one:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Controller({ camelAlias: 'yourControllerName' })\nexport class YourControllerName {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"type",children:(0,i.jsx)(n.code,{children:"type"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"'transient'"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Set the registration type of the controller into the service container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Controller({ type: 'transient' })\nexport class YourControllerName {}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"middleware",children:(0,i.jsx)(n.code,{children:"@Middleware()"})}),"\n",(0,i.jsx)(n.p,{children:"Use this annotation to define all the metadata needed to register\nyour middleware into the service container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { User } from '#src/models/User'\nimport { Middleware, type Context } from '@athenna/http'\n\n@Middleware()\nexport class UserMiddleware {\n  public async handle(({ request, data }): Context) {\n    data.user = await User.find({ id: request.param('id') })\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can also define any of the following optional properties:"}),"\n",(0,i.jsx)(n.h3,{id:"isglobal",children:(0,i.jsx)(n.code,{children:"isGlobal"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Define if your middleware will be registered globally for all routes\nof your REST API:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Middleware({ isGlobal: true })\nexport class YourMiddlewareName {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"name",children:(0,i.jsx)(n.code,{children:"name"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"'yourMiddlewareName'"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Set the name of your middleware that you will use to register it in\nyour REST API routes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Middleware({ name: 'auth' })\nexport class AuthMiddleware {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"alias-1",children:(0,i.jsx)(n.code,{children:"alias"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"'App/Http/Middlewares/YourMiddlewareName'"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Set what will be the alias that your middleware will be registered\nwith in the service container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Middleware({ alias: 'App/Http/Middlewares/OtherMiddlewareName' })\nexport class YourMiddlewareName {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"camelalias-1",children:(0,i.jsx)(n.code,{children:"camelAlias"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Set what will be the camel alias that your middleware will be\nregistered with in the service container. Camel aliases are very\nuseful when you need to resolve your dependency from ",(0,i.jsxs)(n.a,{href:"/docs/architecture-concepts/service-container#using-inject-annotation",children:[(0,i.jsx)(n.code,{children:"@Inject()"}),"\nannotation"]}),"\nor ",(0,i.jsx)(n.a,{href:"docs/architecture-concepts/service-container#automatic-constructor-injection",children:"automatic constructor injection."})]}),"\n",(0,i.jsxs)(n.p,{children:["Since middlewares were not designed to be resolved using the above\napproaches, ",(0,i.jsx)(n.code,{children:"camelAlias"})," will always be ",(0,i.jsx)(n.code,{children:"undefined"}),", but you are\nfree to define one:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Middleware({ camelAlias: 'yourMiddlewareName' })\nexport class YourMiddlewareName {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"type-1",children:(0,i.jsx)(n.code,{children:"type"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"'transient'"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Set the registration type of the middleware into the service container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Middleware({ type: 'transient' })\nexport class YourMiddlewareName {}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interceptor",children:(0,i.jsx)(n.code,{children:"@Interceptor()"})}),"\n",(0,i.jsx)(n.p,{children:"Use this annotation to define all the metadata needed to register\nyour interceptor into the service container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Interceptor, type Context } from '@athenna/http'\n\n@Interceptor()\nexport class UserInterceptor {\n  public async intercept(({ response }): Context) {\n    response.body.intercepted = true\n\n    return response.body \n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can also define any of the following optional properties:"}),"\n",(0,i.jsx)(n.h3,{id:"isglobal-1",children:(0,i.jsx)(n.code,{children:"isGlobal"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Define if your interceptor will be registered globally for all routes\nof your REST API:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Interceptor({ isGlobal: true })\nexport class YourInterceptorName {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"name-1",children:(0,i.jsx)(n.code,{children:"name"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"'yourInterceptorName'"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Set the name of your interceptor that you will use to register it in\nyour REST API routes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Interceptor({ name: 'intercept' })\nexport class AddInterceptInterceptor {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"alias-2",children:(0,i.jsx)(n.code,{children:"alias"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"'App/Http/Interceptors/YourInterceptorName'"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Set what will be the alias that your interceptor will be registered\nwith in the service container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Interceptor({ alias: 'App/Http/Interceptors/OtherInterceptorName' })\nexport class YourInterceptorName {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"camelalias-2",children:(0,i.jsx)(n.code,{children:"camelAlias"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Set what will be the camel alias that your interceptor will be\nregistered with in the service container. Camel aliases are very\nuseful when you need to resolve your dependency from ",(0,i.jsxs)(n.a,{href:"/docs/architecture-concepts/service-container#using-inject-annotation",children:[(0,i.jsx)(n.code,{children:"@Inject()"}),"\nannotation"]}),"\nor ",(0,i.jsx)(n.a,{href:"docs/architecture-concepts/service-container#automatic-constructor-injection",children:"automatic constructor injection."})]}),"\n",(0,i.jsxs)(n.p,{children:["Since interceptors were not designed to be resolved using the above\napproaches, ",(0,i.jsx)(n.code,{children:"camelAlias"})," will always be ",(0,i.jsx)(n.code,{children:"undefined"}),", but you are\nfree to define one:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Interceptor({ camelAlias: 'yourInterceptorName' })\nexport class YourInterceptorName {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"type-2",children:(0,i.jsx)(n.code,{children:"type"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"'transient'"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Set the registration type of the interceptor into the service container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Interceptor({ type: 'transient' })\nexport class YourInterceptorName {}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"terminator",children:(0,i.jsx)(n.code,{children:"@Terminator()"})}),"\n",(0,i.jsx)(n.p,{children:"Use this annotation to define all the metadata needed to register\nyour terminator into the service container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Terminator, type Context } from '@athenna/http'\n\n@Terminator()\nexport class UserTerminator {\n  public async terminate(ctx: Context) {\n    await Log.channel('slack').debug('Request finished.', JSON.stringify(ctx))\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can also define any of the following optional properties:"}),"\n",(0,i.jsx)(n.h3,{id:"isglobal-2",children:(0,i.jsx)(n.code,{children:"isGlobal"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Define if your terminator will be registered globally for all routes\nof your REST API:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Terminator({ isGlobal: true })\nexport class YourTerminatorName {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"name-2",children:(0,i.jsx)(n.code,{children:"name"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"'yourTerminatorName'"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Set the name of your terminator that you will use to register it in\nyour REST API routes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Terminator({ name: 'log' })\nexport class LogTerminator {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"alias-3",children:(0,i.jsx)(n.code,{children:"alias"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"'App/Http/Terminators/YourTerminatorName'"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Set what will be the alias that your terminator will be registered\nwith in the service container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Terminator({ alias: 'App/Http/Terminators/OtherTerminatorName' })\nexport class YourTerminatorName {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"camelalias-3",children:(0,i.jsx)(n.code,{children:"camelAlias"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Set what will be the camel alias that your terminator will be\nregistered with in the service container. Camel aliases are very\nuseful when you need to resolve your dependency from ",(0,i.jsxs)(n.a,{href:"/docs/architecture-concepts/service-container#using-inject-annotation",children:[(0,i.jsx)(n.code,{children:"@Inject()"}),"\nannotation"]}),"\nor ",(0,i.jsx)(n.a,{href:"docs/architecture-concepts/service-container#automatic-constructor-injection",children:"automatic constructor injection."})]}),"\n",(0,i.jsxs)(n.p,{children:["Since terminators were not designed to be resolved using the above\napproaches, ",(0,i.jsx)(n.code,{children:"camelAlias"})," will always be ",(0,i.jsx)(n.code,{children:"undefined"}),", but you are\nfree to define one:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Terminator({ camelAlias: 'yourTerminatorName' })\nexport class YourTerminatorName {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"type-3",children:(0,i.jsx)(n.code,{children:"type"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Default: ",(0,i.jsx)(n.code,{children:"'transient'"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Set the registration type of the terminator into the service container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@Terminator({ type: 'transient' })\nexport class YourTerminatorName {}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(6540);const i={},l=t.createContext(i);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);