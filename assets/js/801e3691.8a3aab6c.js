"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[2206],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(h,l(l({ref:t},p),{},{components:n})):r.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2049:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={title:"Controllers",sidebar_position:3,description:"Understand how you can set up controllers in your REST API application.",tags:["REST API Application","Controllers"]},l="Controllers",i={unversionedId:"rest-api-application/controllers",id:"rest-api-application/controllers",title:"Controllers",description:"Understand how you can set up controllers in your REST API application.",source:"@site/docs/rest-api-application/controllers.mdx",sourceDirName:"rest-api-application",slug:"/rest-api-application/controllers",permalink:"/docs/rest-api-application/controllers",draft:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/rest-api-application/controllers.mdx",tags:[{label:"REST API Application",permalink:"/docs/tags/rest-api-application"},{label:"Controllers",permalink:"/docs/tags/controllers"}],version:"current",sidebarPosition:3,frontMatter:{title:"Controllers",sidebar_position:3,description:"Understand how you can set up controllers in your REST API application.",tags:["REST API Application","Controllers"]},sidebar:"tutorialSidebar",previous:{title:"Middlewares",permalink:"/docs/rest-api-application/middlewares"},next:{title:"Request Context",permalink:"/docs/rest-api-application/request-context"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Writing controllers",id:"writing-controllers",level:2},{value:"Resource controllers",id:"resource-controllers",level:2},{value:"Partial resource routes",id:"partial-resource-routes",level:3},{value:"Nested resources",id:"nested-resources",level:3},{value:"Dependency injection and controllers",id:"dependency-injection-and-controllers",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"controllers"},"Controllers"),(0,o.kt)("p",null,"Understand how you can set up controllers in your REST API\napplication."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,'Instead of defining all of your request handling logic as\nclosures in your route files, you may wish to organize this\nbehavior using "controller" classes. Controllers can group\nrelated request handling logic into a single class. For\nexample, a ',(0,o.kt)("inlineCode",{parentName:"p"},"UserController")," class might handle all incoming\nrequests related to users, including showing, creating,\nupdating, and deleting users. By default, controllers are\nstored in the ",(0,o.kt)("inlineCode",{parentName:"p"},"app/Http/Controllers")," directory."),(0,o.kt)("h2",{id:"writing-controllers"},"Writing controllers"),(0,o.kt)("p",null,"Let's take a look at an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Context, Controller } from '@athenna/http'\n\n@Controller()\nexport class UserController {\n  public async show({ response, params }: Context) {\n    return response.send(`User_${params.id}`)\n  }\n}\n")),(0,o.kt)("p",null,"You can define a route to this controller method like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.controller('UserController').get('/user/:id', 'show')\n\n// or\n\nRoute.get('/user/:id', 'UserController.show')\n")),(0,o.kt)("p",null,"When an incoming request matches the specified route URL,\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"show")," method on the ",(0,o.kt)("inlineCode",{parentName:"p"},"UserController")," class will be\ninvoked and the route parameters will be passed to the\nmethod."),(0,o.kt)("h2",{id:"resource-controllers"},"Resource controllers"),(0,o.kt)("p",null,'If you think of each model in your application as a\n"resource", it is typical to perform the same sets of\nactions against each resource in your application. For\nexample, imagine your application contains a ',(0,o.kt)("inlineCode",{parentName:"p"},"Photo")," model\nand a ",(0,o.kt)("inlineCode",{parentName:"p"},"Movie")," model. It is likely that users can create,\nread, update, or delete these resources."),(0,o.kt)("p",null,'Because of this common use case, Athenna resource routing\nassigns the typical creation, read, update, and delete\n("CRUD") routes to a controller with a single line of code.\nTo get started, we can use the ',(0,o.kt)("inlineCode",{parentName:"p"},"make:controller")," command's\n",(0,o.kt)("inlineCode",{parentName:"p"},"--resource")," option to quickly create a controller to handle\nthese actions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"./node artisan make:controller PhotoController --resource\n")),(0,o.kt)("p",null,"This command will generate a controller at\n",(0,o.kt)("inlineCode",{parentName:"p"},"app/Http/Controllers/PhotoController"),". The controller will\ncontain a method for each of the available resource\noperations. Next, you may register a resource route that\npoints to the controller:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.resource('photos', 'PhotoController')\n")),(0,o.kt)("p",null,"This single route declaration creates multiple routes to\nhandle a variety of actions on the resource. The generated\ncontroller will already have methods stubbed for each of\nthese actions. Remember, you can always get a quick\noverview of your application's routes by running the\n",(0,o.kt)("inlineCode",{parentName:"p"},"route:list")," command."),(0,o.kt)("h3",{id:"partial-resource-routes"},"Partial resource routes"),(0,o.kt)("p",null,"When declaring a resource route, you may specify a subset\nof actions the controller should handle instead of the\nfull set of default actions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.resource('photos', 'PhotoController').only(['index', 'show'])\n\nRoute.resource('photos', 'PhotoController').except(['store', 'update', 'destroy'])\n")),(0,o.kt)("h3",{id:"nested-resources"},"Nested resources"),(0,o.kt)("p",null,'Sometimes you may need to define routes to a nested\nresource. For example, a photo resource may have multiple\ncomments that may be attached to the photo. To nest the\nresource controllers, you may use "dot" notation in your\nroute declaration:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.resource('photos.comments', 'PhotoCommentController')\n")),(0,o.kt)("p",null,"This route will register a nested resource that may be\naccessed with URLs like the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"/photos/:photoId/comments/:commentId\n")),(0,o.kt)("h2",{id:"dependency-injection-and-controllers"},"Dependency injection and controllers"),(0,o.kt)("p",null,"The Athenna ",(0,o.kt)("a",{parentName:"p",href:"/docs/architecture-concepts/container"},(0,o.kt)("inlineCode",{parentName:"a"},"service container")),"\nis used to resolve all Athenna controllers. As a result,\nyou are able to use any dependencies your controller may\nneed using ",(0,o.kt)("inlineCode",{parentName:"p"},"@Inject()")," annotation or in its constructor.\nThe declared dependencies will automatically be resolved\nand injected into the controller instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Inject } from '@athenna/ioc'\nimport { Context, Controller } from '@athenna/http'\nimport { UserService } from '#app/Services/UserService'\nimport { ProfileService } from '#app/Services/ProfileService'\n\n@Controller()\nexport class UserController {\n  private userService: UserService\n\n  @Inject() \ud83d\udc48\n  private profileService: ProfileService\n\n  public constructor(userService) { \ud83d\udc48\n    this.userService = userService\n  }\n\n  public async show({ response, params }: Context) {\n    //\n  }\n}\n")))}d.isMDXComponent=!0}}]);