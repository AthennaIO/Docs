"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[794],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return h}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),h=o,m=p["".concat(i,".").concat(h)]||p[h]||d[h]||a;return r?n.createElement(m,l(l({ref:t},u),{},{components:r})):n.createElement(m,l({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},9845:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),l=["components"],s={sidebar_position:3,id:"controllers",title:"Controllers",hide_title:!0,hide_table_of_contents:!0,tags:["Getting Started","Architecture Concepts","The Basics"]},i=void 0,c={unversionedId:"the-basics/http/controllers",id:"the-basics/http/controllers",title:"Controllers",description:"\ud83c\udfe0",source:"@site/docs/the-basics/http/controllers.mdx",sourceDirName:"the-basics/http",slug:"/the-basics/http/controllers",permalink:"/docs/the-basics/http/controllers",editUrl:"https://github.com/AthennaIO/Docs/docs/the-basics/http/controllers.mdx",tags:[{label:"Getting Started",permalink:"/docs/tags/getting-started"},{label:"Architecture Concepts",permalink:"/docs/tags/architecture-concepts"},{label:"The Basics",permalink:"/docs/tags/the-basics"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"controllers",title:"Controllers",hide_title:!0,hide_table_of_contents:!0,tags:["Getting Started","Architecture Concepts","The Basics"]},sidebar:"tutorialSidebar",previous:{title:"Middlewares",permalink:"/docs/the-basics/http/middlewares"},next:{title:"Request Context",permalink:"/docs/the-basics/http/context"}},u=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Writing controllers",id:"id-writing-controllers",children:[],level:2},{value:"Resource controllers",id:"id-resource-controllers",children:[{value:"Partial resource routes",id:"id-partial-resource-routes",children:[],level:3},{value:"Nested resources",id:"id-nested-resources",children:[],level:3}],level:2},{value:"Dependency injection and Controllers",id:"id-dependency-injection-and-controllers",children:[],level:2}],d={toc:u};function p(e){var t=e.components,r=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("nav",{"aria-label":"breadcrumbs"},(0,a.kt)("ul",{class:"breadcrumbs"},(0,a.kt)("li",{class:"breadcrumbs__item"},(0,a.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,a.kt)("li",{class:"breadcrumbs__item"},(0,a.kt)("a",{class:"breadcrumbs__link"},"The Basics")),(0,a.kt)("li",{class:"breadcrumbs__item"},(0,a.kt)("a",{class:"breadcrumbs__link"},"Http")),(0,a.kt)("li",{class:"breadcrumbs__item"},(0,a.kt)("a",{class:"breadcrumbs__link",href:"/docs/the-basics/http/controllers"},"Controllers")))),(0,a.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,a.kt)("h1",{id:"controllers"},"Controllers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"introduction"},(0,a.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"writing-controllers"},(0,a.kt)("a",{parentName:"h4",href:"#id-writing-controllers"},"Writing controllers"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"resource-controllers"},(0,a.kt)("a",{parentName:"h4",href:"#id-resource-controllers"},"Resource controllers")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"partial-resource-routes"},(0,a.kt)("a",{parentName:"h4",href:"#id-partial-resource-routes"},"Partial resource routes"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"nested-resources"},(0,a.kt)("a",{parentName:"h4",href:"#id-nested-resources"},"Nested resources"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"dependency-injection-and-controllers"},(0,a.kt)("a",{parentName:"h4",href:"#id-dependency-injection-and-controllers"},"Dependency injection and Controllers")))),(0,a.kt)("h2",{id:"id-introduction"},"Introduction"),(0,a.kt)("p",null,'Instead of defining all of your request handling logic as closures in your route files, you may wish to organize this\nbehavior using "controller" classes. Controllers can group related request handling logic into a single class. For\nexample, a ',(0,a.kt)("inlineCode",{parentName:"p"},"UserController")," class might handle all incoming requests related to users, including showing, creating,\nupdating, and deleting users. By default, controllers are stored in the ",(0,a.kt)("inlineCode",{parentName:"p"},"app/Http/Controllers")," directory."),(0,a.kt)("h2",{id:"id-writing-controllers"},"Writing controllers"),(0,a.kt)("p",null,"Let's take a look at an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"export class UserController {\n  /**\n   * Use the constructor to resolve any dependency of the Ioc container.\n   */\n  constructor() {}\n\n  /**\n   * Show the user.\n   *\n   * @params {import('@athenna/http').ContextContract} ctx\n   */\n  show({ response, params }) {\n    return response.send(`User_${params.id}`)\n  }\n}\n")),(0,a.kt)("p",null,"You can define a route to this controller method like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.controller('UserController').get('/user/:id', 'show');\n\n// or\n\nRoute.get('/user/:id', 'UserController.show');\n")),(0,a.kt)("p",null,"When an incoming request matches the specified route URL, the ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," method on the ",(0,a.kt)("inlineCode",{parentName:"p"},"UserController"),"class will be invoked\nand the route parameters will be passed to the method."),(0,a.kt)("h2",{id:"id-resource-controllers"},"Resource controllers"),(0,a.kt)("p",null,'If you think of each model in your application as a "resource", it is typical to perform the same sets of actions\nagainst each resource in your application. For example, imagine your application contains a ',(0,a.kt)("inlineCode",{parentName:"p"},"Photo")," model and a ",(0,a.kt)("inlineCode",{parentName:"p"},"Movie"),"\nmodel. It is likely that users can create, read, update, or delete these resources."),(0,a.kt)("p",null,'Because of this common use case, Athenna resource routing assigns the typical creation, read, update, and delete ("CRUD")\nroutes to a controller with a single line of code. To get started, we can use the ',(0,a.kt)("inlineCode",{parentName:"p"},"make:controller")," command's ",(0,a.kt)("inlineCode",{parentName:"p"},"--resource"),"\noption to quickly create a controller to handle these actions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan make:controller PhotoController --resource\n")),(0,a.kt)("p",null,"This command will generate a controller at ",(0,a.kt)("inlineCode",{parentName:"p"},"app/Http/Controllers/PhotoController"),". The controller will contain a method\nfor each of the available resource operations. Next, you may register a resource route that points to the controller:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.resource('photos', 'PhotoController')\n")),(0,a.kt)("p",null,"This single route declaration creates multiple routes to handle a variety of actions on the resource. The generated\ncontroller will already have methods stubbed for each of these actions. Remember, you can always get a quick overview\nof your application's routes by running the ",(0,a.kt)("inlineCode",{parentName:"p"},"route:list")," command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan route:list\n")),(0,a.kt)("h3",{id:"id-partial-resource-routes"},"Partial resource routes"),(0,a.kt)("p",null,"When declaring a resource route, you may specify a subset of actions the controller should handle instead of the full\nset of default actions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.resource('photos', 'PhotoController').only(['index', 'show'])\n\nRoute.resource('photos', 'PhotoController').except(['store', 'update', 'destroy'])\n")),(0,a.kt)("h3",{id:"id-nested-resources"},"Nested resources"),(0,a.kt)("p",null,'Sometimes you may need to define routes to a nested resource. For example, a photo resource may have multiple comments\nthat may be attached to the photo. To nest the resource controllers, you may use "dot" notation in your route declaration:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"Route.resource('photos.comments', 'PhotoCommentController')\n")),(0,a.kt)("p",null,"This route will register a nested resource that may be accessed with URLs like the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"/photos/:photoId/comments/:commentId\n")),(0,a.kt)("h2",{id:"id-dependency-injection-and-controllers"},"Dependency injection and Controllers"),(0,a.kt)("p",null,"The Athenna ",(0,a.kt)("a",{parentName:"p",href:"/docs/architecture-concepts/container"},(0,a.kt)("inlineCode",{parentName:"a"},"service container"))," is used to resolve all Athenna controllers.\nAs a result, you are able to use any dependencies your controller may need in its constructor. The declared dependencies\nwill automatically be resolved and injected into the controller instance:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"export class UserController {\n  /** @type {import('#app/Services/UserService').UserService} */\n  #userService\n\n  /**\n   * Use the constructor to resolve any dependency of the Ioc container.\n   */\n  constructor(userService) {\n    this.#userService = userService\n  }\n\n  /**\n   * Show the user.\n   *\n   * @params {import('@athenna/http').ContextContract} ctx\n   */\n  async show({ response, params }) {\n    const body = await this.#userService.findOne(params.id)\n\n    return response.send(body)\n  }\n}\n")))}p.isMDXComponent=!0}}]);