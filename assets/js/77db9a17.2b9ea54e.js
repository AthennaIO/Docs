"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[3077],{3741:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=t(4848),i=t(8453);const r={title:"REPL",sidebar_position:1,description:"See how to create a REPL session with Athenna Framework ecosystem."},s="REPL",a={id:"digging-deeper/repl",title:"REPL",description:"See how to create a REPL session with Athenna Framework ecosystem.",source:"@site/docs/digging-deeper/repl.mdx",sourceDirName:"digging-deeper",slug:"/digging-deeper/repl",permalink:"/docs/digging-deeper/repl",draft:!1,unlisted:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/digging-deeper/repl.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"REPL",sidebar_position:1,description:"See how to create a REPL session with Athenna Framework ecosystem."},sidebar:"tutorialSidebar",previous:{title:"Deployment",permalink:"/docs/the-basics/deployment"},next:{title:"Graceful Shutdown",permalink:"/docs/digging-deeper/graceful-shutdown"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Booting REPL",id:"booting-repl",level:2},{value:"Importing modules in REPL session",id:"importing-modules-in-repl-session",level:2},{value:"Extending REPL Context",id:"extending-repl-context",level:2},{value:"Custom REPL commands",id:"custom-repl-commands",level:2},{value:"Pre-importing modules",id:"pre-importing-modules",level:2},{value:"Pre-importing module",id:"pre-importing-module",level:3},{value:"Pre-importing modules names as keys",id:"pre-importing-modules-names-as-keys",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"repl",children:"REPL"}),"\n",(0,o.jsx)(n.p,{children:"See how to create a REPL session with Athenna Framework ecosystem."}),"\n",(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(n.p,{children:["From ",(0,o.jsx)(n.a,{href:"https://www.digitalocean.com/community/tutorials/what-is-repl",children:"Digital ocean article"}),":\nA Read-Eval-Print Loop, or REPL, is a computer environment\nwhere user inputs are read and evaluated, and then the results\nare returned to the user. REPLs provide an interactive\nenvironment to explore tools available in specific environments\nor programming languages. Some examples include the Node.js\nconsole, IPython, the Bash shell, and the developer console\nfound in most web browsers."]}),"\n",(0,o.jsxs)(n.p,{children:["Athenna can easily integrate with\n",(0,o.jsx)(n.a,{href:"https://nodejs.org/api/repl.html#repl",children:(0,o.jsx)(n.code,{children:"node:repl"})})," package\nto run your entire infrastructure in parallel with the package."]}),"\n",(0,o.jsx)(n.h2,{id:"booting-repl",children:"Booting REPL"}),"\n",(0,o.jsx)(n.p,{children:"REPL allows you to interact with your entire Athenna\napplication on the command line, including your models,\njobs, events, and more. To enter the REPL environment,\nrun the Artisan command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"node artisan repl\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["When running this command, Athenna will use the\n",(0,o.jsx)(n.code,{children:"Path.bootstrap('repl.ts')"})," file to execute your session."]})}),"\n",(0,o.jsx)(n.h2,{id:"importing-modules-in-repl-session",children:"Importing modules in REPL session"}),"\n",(0,o.jsx)(n.p,{children:"To import modules inside REPL you need to use dynamic imports:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"{ Log } = await import('@athenna/logger') // Destructuring import\nhelpers = await import('#app/helpers/index') // Default import\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"caution",children:(0,o.jsxs)(n.p,{children:["If you don't use ",(0,o.jsx)(n.code,{children:"var/let/const"})," in front of your importation,\nthe variable will be set globally in your REPL session."]})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["You can check the global context of your REPL session\nrunning ",(0,o.jsx)(n.code,{children:".ls"}),". You can type ",(0,o.jsx)(n.code,{children:".help"})," to check all REPL\ncommands available."]})}),"\n",(0,o.jsx)(n.h2,{id:"extending-repl-context",children:"Extending REPL Context"}),"\n",(0,o.jsxs)(n.p,{children:["When running your REPL session, it could be painful to\nkeep declaring the same variables over and over again. To\navoid that you can use the ",(0,o.jsx)(n.code,{children:"repl.setIntContext()"})," method,\nand it will be available in all your REPL sessions:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:"title=\"Path.bootstrap('repl.ts')\"",children:"import { Ignite } from '@athenna/core'\n\nconst ignite = await new Ignite().load(import.meta.url, { bootLogs: false })\n\nconst repl = await ignite.repl()\n\nrepl.setInContext('helloWorld', 'Hello World!')\nrepl.setInContext('appService', ioc.safeUse('App/Services/AppService'))\n"})}),"\n",(0,o.jsx)(n.h2,{id:"custom-repl-commands",children:"Custom REPL commands"}),"\n",(0,o.jsxs)(n.p,{children:["You can create custom REPL commands like ",(0,o.jsx)(n.code,{children:".ls"})," and ",(0,o.jsx)(n.code,{children:".clean"}),"\nto make your life easier when running your REPL session:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:"title=\"Path.bootstrap('repl.ts')\"",children:"import { Ignite } from '@athenna/core'\n\nconst ignite = await new Ignite().load(import.meta.url, { bootLogs: false })\n\nconst repl = await ignite.repl()\n\nrepl\n    .command('greet')\n    .help('Greet someone')\n    .action(function action(name: string) {\n        this.clearBufferedCommand()\n        console.log(`Hello ${name}!`)\n        this.displayPrompt()\n    })\n    .register()\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now the ",(0,o.jsx)(n.code,{children:".greet"})," command will always be available in your\nREPL sessions:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:".greet Antoine\n> Hello Antoine!\n"})}),"\n",(0,o.jsx)(n.h2,{id:"pre-importing-modules",children:"Pre-importing modules"}),"\n",(0,o.jsx)(n.h3,{id:"pre-importing-module",children:"Pre-importing module"}),"\n",(0,o.jsxs)(n.p,{children:["Like declaring variables in the REPL context, it could be painful\nto import modules in your everytime in your REPL sessions. To avoid\nit you can use the ",(0,o.jsx)(n.code,{children:"repl.import()"})," method:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Ignite } from '@athenna/core'\n\nconst ignite = await new Ignite().load(import.meta.url, { bootLogs: false })\n\nconst repl = await ignite.repl()\n\nawait repl.import('common', '@athenna/common')\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now you are able to use the ",(0,o.jsx)(n.code,{children:"common"})," variable in your REPL sessions:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"common.Path.pwd()\n"})}),"\n",(0,o.jsx)(n.h3,{id:"pre-importing-modules-names-as-keys",children:"Pre-importing modules names as keys"}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes a module exports a variety of classes, functions, etc.\nLike ",(0,o.jsx)(n.code,{children:"@athenna/common"}),", that exports a variety of helpers, and would\nbe easier if we could directly use the helper name instead\nof the ",(0,o.jsx)(n.code,{children:"common"})," variable as we have created in the example above.\nWith ",(0,o.jsx)(n.code,{children:"repl.importAll()"})," you can import the module names as keys to\nthe REPL context:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Ignite } from '@athenna/core'\n\nconst ignite = await new Ignite().load(import.meta.url, { bootLogs: false })\n\nconst repl = await ignite.repl()\n\nawait repl.importAll('@athenna/common')\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now you are able to use the ",(0,o.jsx)(n.code,{children:"Path"})," helper directly in your REPL sessions:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"Path.pwd()\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["By default, your ",(0,o.jsx)(n.code,{children:"Path.bootstrap('repl.ts')"})," file already\nimports all the ",(0,o.jsx)(n.code,{children:"@athenna/common"})," helpers to your REPL session \ud83e\udd29."]})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(6540);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);