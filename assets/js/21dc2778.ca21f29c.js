"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[6295],{8478:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var t=a(4848),r=a(8453),s=a(7049);const i={title:"Migrations",sidebar_position:3,description:"See how to create and run database migrations in Athenna Framework."},o="Database: Migrations",c={id:"database/migrations",title:"Migrations",description:"See how to create and run database migrations in Athenna Framework.",source:"@site/docs/database/migrations.mdx",sourceDirName:"database",slug:"/database/migrations",permalink:"/docs/database/migrations",draft:!1,unlisted:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/database/migrations.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Migrations",sidebar_position:3,description:"See how to create and run database migrations in Athenna Framework."},sidebar:"tutorialSidebar",previous:{title:"Query Builder",permalink:"/docs/database/query-builder"},next:{title:"Seeding",permalink:"/docs/database/seeding"}},d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Generating migrations",id:"generating-migrations",level:2},{value:"Migration structure",id:"migration-structure",level:2},{value:"Setting the migration connection",id:"setting-the-migration-connection",level:3},{value:"Running migrations",id:"running-migrations",level:2},{value:"Reverting",id:"reverting",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"database-migrations",children:"Database: Migrations"})}),"\n",(0,t.jsx)(n.p,{children:"See how to create and run database migrations in Athenna Framework."}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"Migrations are like version control for your database, allowing your\nteam to define and share the application's database schema\ndefinition. If you have ever had to tell a teammate to manually add a\ncolumn to their local database schema after pulling in your changes\nfrom source control, you've faced the problem that database migrations\nsolve."}),"\n",(0,t.jsx)(n.h2,{id:"generating-migrations",children:"Generating migrations"}),"\n",(0,t.jsxs)(n.p,{children:["You may use the ",(0,t.jsx)(n.code,{children:"make:migration"})," Artisan command to generate a database migration. The new migration will be placed in your\n",(0,t.jsx)(s.A,{father:"migrations"}),"  directory. Each migration filename contains a\ntimestamp that allows Athenna to determine the order of\nthe migrations:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"node artisan make:migration FlightsMigration \n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Migrations templates may be customized using the\n",(0,t.jsx)(n.a,{href:"https://athenna.io/docs/the-basics/cli/commands#registering-custom-templates",children:(0,t.jsx)(n.strong,{children:"template customization command"})}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"migration-structure",children:"Migration structure"}),"\n",(0,t.jsxs)(n.p,{children:["A migration class contains two methods: ",(0,t.jsx)(n.code,{children:"up()"})," and ",(0,t.jsx)(n.code,{children:"down()"}),". The ",(0,t.jsx)(n.code,{children:"up()"}),"\nmethod is used to add new tables, columns, or indexes to your\ndatabase, while the ",(0,t.jsx)(n.code,{children:"down()"})," method should reverse the operations\nperformed by the ",(0,t.jsx)(n.code,{children:"up()"})," method."]}),"\n",(0,t.jsxs)(n.p,{children:["Within both of these methods, you may use the ",(0,t.jsx)(n.a,{href:"https://knexjs.org/guide/schema-builder.html",children:(0,t.jsx)(n.code,{children:"knex schema builder"})})," to\nexpressively create and modify tables. For example, the following migration creates a ",(0,t.jsx)(n.code,{children:"flights"})," table:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { BaseMigration, type DatabaseImpl } from '@athenna/database'\n\nexport class FlightsMigration extends BaseMigration {\n  public tableName = 'flights'\n\n  public async up(db: DatabaseImpl) {\n    return db.createTable(this.tableName, (table) => {\n      table.increments('id')\n      table.string('name')\n      table.string('airline')\n      table.timestamps(true, true, true)\n    })\n  }\n\n  public async down({ schema }: DatabaseImpl) {\n    return db.dropTableIfExists(this.tableName)\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"setting-the-migration-connection",children:"Setting the migration connection"}),"\n",(0,t.jsxs)(n.p,{children:["If your migration will be interacting with a database connection\nother than your application's default database connection,\nyou should set the static getter ",(0,t.jsx)(n.code,{children:"connection"})," in your migration:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { BaseMigration, type DatabaseImpl } from '@athenna/database'\n\nexport class FlightsMigration extends BaseMigration { \n  public static connection() {\n    return 'postgres'\n  }\n\n  public async up(db: DatabaseImpl) {\n    // ...\n  }\n\n  public async down(db: DatabaseImpl) {\n    // ...\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"running-migrations",children:"Running migrations"}),"\n",(0,t.jsxs)(n.p,{children:["To run all of your outstanding migrations, execute the\n",(0,t.jsx)(n.code,{children:"migration:run"})," Artisan command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"node artisan migration:run\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can use the ",(0,t.jsx)(n.code,{children:"--connection"})," option to run migrations\nfor a specific connection:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"node artisan migration:run --connection=postgres\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"postgres"})," is your default connection then all the migrations\nusing the ",(0,t.jsx)(n.code,{children:"default"})," value in the static ",(0,t.jsx)(n.code,{children:"connection()"})," method\nwill run too."]})}),"\n",(0,t.jsx)(n.h2,{id:"reverting",children:"Reverting"}),"\n",(0,t.jsxs)(n.p,{children:["To revert all your migrations, you may use the ",(0,t.jsx)(n.code,{children:"migration:revert"}),"\nArtisan command. This command will revert all your migrations:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"node artisan migration:revert\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can use the ",(0,t.jsx)(n.code,{children:"--connection"})," option to revert migrations for a\nspecific connection:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"node artisan migration:revert --connection=postgres\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"postgres"})," is your default connection than all the migrations\nusing the ",(0,t.jsx)(n.code,{children:"default"})," value in the static ",(0,t.jsx)(n.code,{children:"connection()"})," method\nwill be reverted too."]})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},7049:(e,n,a)=>{a.d(n,{A:()=>s});a(6540);const t={hoverCardContainer:"hoverCardContainer_jqUQ",hoverCardLink:"hoverCardLink_oDZU",hoverCard:"hoverCard_qTDS"};var r=a(4848);function s(e){let n=e.father;switch(e.father){case"storage":n="src/storage";break;case"logs":n="src/storage/logs";break;case"views":n="src/resources/views";break;case"locales":n="src/resources/locales";break;case"static":n="src/resources/static";break;case"config":n="src/config";break;case"database":n="src/database";break;case"seeders":n="src/database/seeders";break;case"migrations":n="src/database/migrations";break;case"console":n="src/console";break;case"commands":n="src/console/commands";break;case"cron":n="src/cron";break;case"schedulers":n="src/cron/schedulers";break;case"models":n="src/models";break;case"services":n="src/services";break;case"repositories":n="src/repositories";break;case"http":n="src/http";break;case"controllers":n="src/http/controllers";break;case"middlewares":n="src/http/middlewares";break;case"interceptors":n="src/http/interceptors";break;case"terminators":n="src/http/terminators";break;case"stubs":n="tests/stubs";break;case"fixtures":n="tests/fixtures";break;case"providers":n="src/providers";break;case"facades":n="src/facades"}return(0,r.jsxs)("div",{className:t.hoverCardContainer,children:[(0,r.jsx)("a",{className:t.hoverCardLink,href:`/docs/the-basics/helpers#path${e.father}`,children:(0,r.jsxs)("code",{children:["Path.",e.father,"(",e.child?`'${e.child}'`:"",")"]})}),(0,r.jsx)("div",{className:t.hoverCard,children:(0,r.jsxs)("p",{style:{margin:0},children:["./",n,e.child?`/${e.child}`:""]})})]})}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(6540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);