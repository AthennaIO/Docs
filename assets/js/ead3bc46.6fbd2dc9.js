"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[9192],{3905:(e,n,t)=>{t.d(n,{Zo:()=>g,kt:()=>h});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},g=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),c=p(t),d=o,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return t?a.createElement(h,i(i({ref:n},g),{},{components:t})):a.createElement(h,i({ref:n},g))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3058:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const r={title:"Logging",sidebar_position:1,description:"Understand how you can use the Athenna logging API.",tags:["The Basics","Logging"]},i="Logging",l={unversionedId:"the-basics/logging",id:"the-basics/logging",title:"Logging",description:"Understand how you can use the Athenna logging API.",source:"@site/docs/the-basics/logging.mdx",sourceDirName:"the-basics",slug:"/the-basics/logging",permalink:"/docs/the-basics/logging",draft:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/the-basics/logging.mdx",tags:[{label:"The Basics",permalink:"/docs/tags/the-basics"},{label:"Logging",permalink:"/docs/tags/logging"}],version:"current",sidebarPosition:1,frontMatter:{title:"Logging",sidebar_position:1,description:"Understand how you can use the Athenna logging API.",tags:["The Basics","Logging"]},sidebar:"tutorialSidebar",previous:{title:"The Basics",permalink:"/docs/the-basics"},next:{title:"Views",permalink:"/docs/the-basics/views"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Available channel drivers",id:"available-channel-drivers",level:2},{value:"Channel prerequisites",id:"channel-prerequisites",level:3},{value:"Configuring the Slack channel",id:"configuring-the-slack-channel",level:4},{value:"Configuring the Discord channel",id:"configuring-the-discord-channel",level:4},{value:"Configuring the Telegram channel",id:"configuring-the-telegram-channel",level:4},{value:"Implementing your own driver",id:"implementing-your-own-driver",level:3},{value:"Writing log messages",id:"writing-log-messages",level:2},{value:"Writing to specific channels",id:"writing-to-specific-channels",level:3},{value:"Building log stacks",id:"building-log-stacks",level:3},{value:"Log levels",id:"id-log-levels",level:4},{value:"Writing styled log messages",id:"writing-styled-log-messages",level:3},{value:"Runtime configurations",id:"runtime-configurations",level:3},{value:"Available channel formatters",id:"available-channel-formatters",level:2},{value:"Writing using specific formatter",id:"writing-using-specific-formatter",level:3},{value:"Implementing your own formatter",id:"implementing-your-own-formatter",level:3}],g={toc:p},c="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"logging"},"Logging"),(0,o.kt)("p",null,"Understand how you can use the Athenna logging API."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"To help you learn more about what's happening within your\napplication, Athenna provides robust logging services that\nallow you to log messages to file, console, buckets and even\nto Slack to notify your entire team."),(0,o.kt)("p",null,'Athenna logging is based on "channels". Each channel represents\na specific way of writing log information. For example,\nthe ',(0,o.kt)("inlineCode",{parentName:"p"},"application")," channel writes log of your application when\nbootstrapping, while the ",(0,o.kt)("inlineCode",{parentName:"p"},"request")," channel writes log of\nthe http requests that your application receives."),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"All the configuration options for your application's logging\nbehavior are housed in the ",(0,o.kt)("inlineCode",{parentName:"p"},"config/logging.ts")," configuration\nfile. This file allows you to configure your application's\nlog channels, so be sure to review each of the available\nchannels and their options. We'll review a few common options\nbelow."),(0,o.kt)("h2",{id:"available-channel-drivers"},"Available channel drivers"),(0,o.kt)("p",null,'Each log channel is powered by a "driver". The driver determines\nhow and where the log message is actually transported. The\nfollowing log channel drivers are available in every Athenna\napplication. An entry for most of these drivers is already\npresent in your application\'s ',(0,o.kt)("inlineCode",{parentName:"p"},"config/logging.ts")," configuration\nfile, so be sure to review this file to become familiar with\nits contents:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Driver name"),(0,o.kt)("th",{parentName:"tr",align:"right"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"stack")),(0,o.kt)("td",{parentName:"tr",align:"right"},'A wrapper to facilitate creating "multi-channel" channels')),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"console")),(0,o.kt)("td",{parentName:"tr",align:"right"},"Transports the log directly to the terminal with ",(0,o.kt)("inlineCode",{parentName:"td"},"stdout/stderr"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"file")),(0,o.kt)("td",{parentName:"tr",align:"right"},"Transports the log to a file")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"null")),(0,o.kt)("td",{parentName:"tr",align:"right"},"Discards all log messages")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"slack")),(0,o.kt)("td",{parentName:"tr",align:"right"},"Transports the log message to a Slack channel")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"discord")),(0,o.kt)("td",{parentName:"tr",align:"right"},"Transports the log message to a Discord channel")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"telegram")),(0,o.kt)("td",{parentName:"tr",align:"right"},"Transports the log message to a Telegram chat")))),(0,o.kt)("h3",{id:"channel-prerequisites"},"Channel prerequisites"),(0,o.kt)("p",null,"Almost all channels doesn't need any additional configuration to\nwork. But some of than need a couple of changes in\n",(0,o.kt)("inlineCode",{parentName:"p"},"config/logging.ts")," file to be able to use. They are ",(0,o.kt)("inlineCode",{parentName:"p"},"slack"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"discord")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"telegram"),"."),(0,o.kt)("h4",{id:"configuring-the-slack-channel"},"Configuring the Slack channel"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"slack")," channel only requires the ",(0,o.kt)("inlineCode",{parentName:"p"},"url")," property inside\noptions. This URL should match a URL for an ",(0,o.kt)("a",{parentName:"p",href:"https://api.slack.com/messaging/webhooks"},(0,o.kt)("inlineCode",{parentName:"a"},"incoming webhook")),"\nthat you have configured for your Slack team."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"slack: {\n  driver: 'slack',\n  level: 'fatal',\n  url: 'your-slack-webhook-url', \ud83d\udc48\n\n  formatter: 'message',\n  formatterConfig: {}\n}\n")),(0,o.kt)("h4",{id:"configuring-the-discord-channel"},"Configuring the Discord channel"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"discord")," channel requires the ",(0,o.kt)("inlineCode",{parentName:"p"},"url")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"username"),"\nproperties inside options. The URL should match a URL for an\n",(0,o.kt)("a",{parentName:"p",href:"https://www.digitalocean.com/community/tutorials/how-to-use-discord-webhooks-to-get-notifications-for-your-website-status-on-ubuntu-18-04"},(0,o.kt)("inlineCode",{parentName:"a"},"incoming webhook")),"\nthat you have configured for your Discord server. And the\nusername is just the name of the bot that will deliver the\nmessage."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"discord: {\n  driver: 'discord',\n  level: 'fatal',\n  username: 'Athenna', \ud83d\udc48\n  url: 'your-discord-webhook-url', \ud83d\udc48\n\n  formatter: 'message',\n  formatterConfig: {}\n}\n")),(0,o.kt)("h4",{id:"configuring-the-telegram-channel"},"Configuring the Telegram channel"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"telegram")," channel requires the ",(0,o.kt)("inlineCode",{parentName:"p"},"token")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"chatId"),"\nproperties inside options. The token should match a\n",(0,o.kt)("a",{parentName:"p",href:"https://core.telegram.org/bots"},(0,o.kt)("inlineCode",{parentName:"a"},"Telegram bot token")),"\nthat you have created talking with ",(0,o.kt)("inlineCode",{parentName:"p"},"Bot Father"),". And the\nchatId is just the id of the chat that the bot will deliver\nthe message."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"telegram: {\n  driver: 'telegram',\n  level: 'fatal',\n  chatId: 0, \ud83d\udc48\n  parseMode: 'HTML',\n  token: 'your-telegram-bot-token', \ud83d\udc48\n\n  formatter: 'message',\n  formatterConfig: {}\n}\n")),(0,o.kt)("h3",{id:"implementing-your-own-driver"},"Implementing your own driver"),(0,o.kt)("p",null,"You can implement your own ",(0,o.kt)("inlineCode",{parentName:"p"},"Log")," driver using the\n",(0,o.kt)("inlineCode",{parentName:"p"},"DriverFactory")," class, but your class needs to implement\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"transport")," method and extends ",(0,o.kt)("inlineCode",{parentName:"p"},"Driver")," class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Driver } from '@athenna/logger'\n\nexport class ConsoleLogDriver extends Driver {\n  public transport(level: string, message: any) {\n   /**\n    * Verify if this log could be transported based on the level.\n    */\n    if (!this.couldBeTransported(level)) {\n      return\n    }\n\n    let formatted = this.format(level, message)\n\n    if (this.driverConfig.addBar) {\n        formatted = formatted.concat('- BAR')\n    }\n\n    console.log(formatted)\n  }\n}\n")),(0,o.kt)("p",null,"Now we just need to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"DriverFactory")," to register our new driver and set a name for him:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { DriverFactory } from '@athenna/logger'\n\nDriverFactory.createDriver('consoleLog', ConsoleLogDriver)\n")),(0,o.kt)("p",null,"Finally, we can start using our new driver in channels of ",(0,o.kt)("inlineCode",{parentName:"p"},"config/logging.ts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"channels: {\n    consoleLogChannel: {\n        driver: 'consoleLog',\n        addBar: true,\n\n        formatter: 'simple'\n    }\n}\n")),(0,o.kt)("h2",{id:"writing-log-messages"},"Writing log messages"),(0,o.kt)("p",null,"You may write information to the logs using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Log"),"\n",(0,o.kt)("a",{parentName:"p",href:"/docs/architecture-concepts/facades"},(0,o.kt)("inlineCode",{parentName:"a"},"facade")),". The logger\nprovides the seven logging levels:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Log } from '@athenna/logger'\n\nconst message = 'Hello Athenna!'\n\nLog.trace(message)\nLog.debug(message)\nLog.info(message)\nLog.success(message)\nLog.warn(message)\nLog.error(message)\nLog.fatal(message)\n")),(0,o.kt)("p",null,"You may call any of these methods to log a message for the\ncorresponding level. By default, the message will be written\nto the default log channel as configured by your\n",(0,o.kt)("inlineCode",{parentName:"p"},"config/logging.ts")," configuration file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { WelcomeService } from '#app/services/WelcomeService'\n\nexport class WelcomeController {\n  @Inject()\n  private welcomeService: WelcomeService\n\n  public async show({ request, response }) {\n    const data = await this.welcomeService.findOne()\n\n    Log.info(`Showing the welcome message for ip: ${request.ip}`)\n\n    return response.status(200).send(data)\n  }\n}\n")),(0,o.kt)("h3",{id:"writing-to-specific-channels"},"Writing to specific channels"),(0,o.kt)("p",null,"Sometimes you may wish to log a message to a channel other\nthan your application's default channel. You may use the\n",(0,o.kt)("inlineCode",{parentName:"p"},"channel")," method on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Log")," facade to retrieve and log to\nany channel defined in your configuration file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Log.channel('slack').info('Hello from Athenna!')\n")),(0,o.kt)("h3",{id:"building-log-stacks"},"Building log stacks"),(0,o.kt)("p",null,"As mentioned previously, the ",(0,o.kt)("inlineCode",{parentName:"p"},"stack")," driver allows you to\ncombine multiple channels into a single log channel for\nconvenience.\nTo illustrate how to use log stacks, let's take a look at an\nexample configuration that you might see in a production\napplication:"),(0,o.kt)("p",null,"Take note of the ",(0,o.kt)("inlineCode",{parentName:"p"},"level")," configuration option present in\n",(0,o.kt)("inlineCode",{parentName:"p"},"slack")," channel of your ",(0,o.kt)("inlineCode",{parentName:"p"},"config/logging.ts")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"channels: {\n    stack: {\n      driver: 'stack',\n      channels: ['application', 'slack']\n    },\n\n    application: {\n      driver: 'console',\n      level: 'trace',\n\n      formatter: 'simple'\n    },\n\n    slack: {\n      driver: 'slack',\n      level: 'error',\n      url: 'your-slack-webhook-url',\n\n      formatter: 'message'\n    }\n}\n")),(0,o.kt)("p",null,"Let's dissect this configuration. First, notice our ",(0,o.kt)("inlineCode",{parentName:"p"},"stack"),"\nchannel aggregates two other channels via its channel option:\n",(0,o.kt)("inlineCode",{parentName:"p"},"application")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"slack"),'. So, when logging messages, both of\nthese channels will have the opportunity to log the message.\nHowever, as we will see below, whether these channels\nactually log the message may be determined by the message\'s\nseverity / "level".'),(0,o.kt)("h4",{id:"id-log-levels"},"Log levels"),(0,o.kt)("p",null,"Take note of the ",(0,o.kt)("inlineCode",{parentName:"p"},"level")," configuration option present on the\n",(0,o.kt)("inlineCode",{parentName:"p"},"application")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"slack"),' channel configurations in the\nexample above.\nThis option determines the minimum "level" a message must be\nin order to be logged by the channel. In descending order of\nseverity, these log levels are: ',(0,o.kt)("strong",{parentName:"p"},"fatal, error, warn, success,\ninfo, debug")," and ",(0,o.kt)("strong",{parentName:"p"},"trace"),"."),(0,o.kt)("p",null,"So, imagine we log a message using the ",(0,o.kt)("inlineCode",{parentName:"p"},"debug")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Log.debug('An informational message.')\n")),(0,o.kt)("p",null,"Given our configuration, the ",(0,o.kt)("inlineCode",{parentName:"p"},"application")," channel will write\nthe message to the system log; however, since the error\nmessage is\nnot ",(0,o.kt)("inlineCode",{parentName:"p"},"error")," or above, it will not be sent to Slack. However,\nif we log an ",(0,o.kt)("inlineCode",{parentName:"p"},"fatal")," message, it will be sent to both the\nsystem\nlog and Slack since the ",(0,o.kt)("inlineCode",{parentName:"p"},"fatal")," level is above our minimum\nlevel threshold for both channels:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Log.fatal('The application is down!')\n")),(0,o.kt)("h3",{id:"writing-styled-log-messages"},"Writing styled log messages"),(0,o.kt)("p",null,"When using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Log")," facade you have the power to add style to\nyour log messages:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Log.info('({yellow, bold} Hello) ({green, italic} World)!')\n")),(0,o.kt)("p",null,"Athenna uses ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/chalk"},"chalk")," API\nunder the hood to parse the methods inside the brackets\n(",(0,o.kt)("inlineCode",{parentName:"p"},"({...chalkMethods} yourLogString)"),"), the example above could\nalso be done using ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/chalk"},"chalk"),"\ndirectly:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import chalk from 'chalk'\n\nLog.info(`${chalk.yellow.bold('Hello')} ${chalk.green.italic('World')}!`)\n")),(0,o.kt)("h3",{id:"runtime-configurations"},"Runtime configurations"),(0,o.kt)("p",null,"It is also possible to set runtime configurations when using\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"Log")," facade. This way you will never be total\ndependent from ",(0,o.kt)("inlineCode",{parentName:"p"},"config/logging.ts")," configuration file. To\naccomplish this, you may pass a configuration object to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"config")," method of Log facade and then call the ",(0,o.kt)("inlineCode",{parentName:"p"},"channel"),"\nmethod again to set up the configurations for the specified\ndriver:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const config = { url: 'other-slack-webhook-url' }\n\n// GOOD!! Configuration is now set for drivers.\nLog.config(config).channel('slack').info('Hello from Athenna!')\n\n// BAD!! Configuration is not going to be set for drivers.\nLog.config(config).info('Hello from Athenna!')\n")),(0,o.kt)("h2",{id:"available-channel-formatters"},"Available channel formatters"),(0,o.kt)("p",null,'Each log channel is powered by a "formatter". The formatter\ndetermines how the log message is actually formatted.\nThe following log channel formatters are available in every\nAthenna application. An entry for most of these formatters is\nalready present in your application\'s ',(0,o.kt)("inlineCode",{parentName:"p"},"config/logging.ts"),"\nconfiguration file, so be sure to review this file to become\nfamiliar with its contents:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Formatter name"),(0,o.kt)("th",{parentName:"tr",align:"right"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"cli")),(0,o.kt)("td",{parentName:"tr",align:"right"},"Simple very useful when building CLI's")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"json")),(0,o.kt)("td",{parentName:"tr",align:"right"},"Format the entire data provided by the log message to a JSON string")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"simple")),(0,o.kt)("td",{parentName:"tr",align:"right"},"Format the log message to show the level, date, message and the MS")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"request")),(0,o.kt)("td",{parentName:"tr",align:"right"},"Focus in formatting the log message with common fields that shows up in http requests")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"message")),(0,o.kt)("td",{parentName:"tr",align:"right"},"Format the log message with an emoji of it respective level, useful for using with drivers like Discord")))),(0,o.kt)("h3",{id:"writing-using-specific-formatter"},"Writing using specific formatter"),(0,o.kt)("p",null,"It is also possible to set ",(0,o.kt)("inlineCode",{parentName:"p"},"formatter")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"formatterConfig"),"\nin runtime configurations when using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Log")," facade:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import chalk from 'chalk'\n\nconst config = {\n    formatter: 'simple',\n    formatterConfig: { chalk: chalk.green }\n}\n\nLog.config(config).channel('slack').info('Hello from Athenna!')\n")),(0,o.kt)("h3",{id:"implementing-your-own-formatter"},"Implementing your own formatter"),(0,o.kt)("p",null,"You can implement your own ",(0,o.kt)("inlineCode",{parentName:"p"},"Log")," formatter using the\n",(0,o.kt)("inlineCode",{parentName:"p"},"FormatterFactory")," class, but your class needs to implement\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"format")," method and extends ",(0,o.kt)("inlineCode",{parentName:"p"},"Formatter")," class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Formatter } from '@athenna/logger'\n\nexport class ConsoleLogFormatter extends Formatter {\n  public format(message: string): string {\n    const level = this.simpleLevel()\n\n    let messageFormatted = this.clean(\n      `${level} - ${this.timestamp()} - (${this.pid()}) ${this.applyColors(\n        message,\n      )}`,\n    )\n\n    if (this.configs.addFoo) {\n        messageFormatted = messageFormatted.concat('- FOO')\n    }\n\n    return messageFormatted\n  }\n}\n")),(0,o.kt)("p",null,"Now we just need to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"FormatterFactory")," to register\nour new formatter and set a name for him:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FormatterFactory } from '@athenna/logger'\n\nFormatterFactory.createFormatter('consoleLog', ConsoleLogFormatter)\n")),(0,o.kt)("p",null,"Finally, we can start using our new formatter in channels\nof ",(0,o.kt)("inlineCode",{parentName:"p"},"config/logging.ts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"channels: {\n    consoleLogChannel: {\n        driver: 'consoleLog',\n        addBar: true,\n\n        formatter: 'consoleLog',\n        formatterConfig: {\n            addFoo: true\n        }\n    }\n}\n")))}m.isMDXComponent=!0}}]);