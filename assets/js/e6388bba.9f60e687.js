"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[794],{8191:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=t(4848),i=t(8453);const o={title:"Extending Models",sidebar_position:4,description:"See how to extend models implementations in Athenna Framework."},a="ORM: Extending Models",r={id:"orm/extending-models",title:"Extending Models",description:"See how to extend models implementations in Athenna Framework.",source:"@site/docs/orm/extending-models.mdx",sourceDirName:"orm",slug:"/orm/extending-models",permalink:"/docs/orm/extending-models",draft:!1,unlisted:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/orm/extending-models.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Extending Models",sidebar_position:4,description:"See how to extend models implementations in Athenna Framework."},sidebar:"tutorialSidebar",previous:{title:"Relationships",permalink:"/docs/orm/relationships"},next:{title:"Annotations",permalink:"/docs/orm/annotations"}},d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Writing static methods",id:"writing-static-methods",level:2},{value:"Writing instance methods",id:"writing-instance-methods",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"orm-extending-models",children:"ORM: Extending Models"})}),"\n",(0,s.jsx)(n.p,{children:"See how to extend models implementations in Athenna Framework."}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.p,{children:["All the Athenna models extends the\n",(0,s.jsx)(n.a,{href:"https://github.com/AthennaIO/Database/blob/develop/src/models/BaseModel.ts",children:(0,s.jsx)(n.code,{children:"BaseModel"})}),"\nclass of the ",(0,s.jsx)(n.code,{children:"@athenna/database"})," package. This class\nprovides everything that a model needs to communicate with database\nin the best way possible. But sometimes you may need to write your\nown methods depending on your business logic and to save some time.\nYou will see on this page how you can easily create your own static\nand instance methods for your models."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Also, we recommend you to take a look at the implementation of the\n",(0,s.jsx)(n.a,{href:"https://github.com/AthennaIO/Database/blob/develop/src/models/BaseModel.ts",children:(0,s.jsx)(n.code,{children:"BaseModel"})}),"\nclass, this way you could have more knowledge about all the methods\navailable for your in the ",(0,s.jsx)(n.code,{children:"this"})," property when implementing your own methods."]})}),"\n",(0,s.jsx)(n.h2,{id:"writing-static-methods",children:"Writing static methods"}),"\n",(0,s.jsxs)(n.p,{children:["Let's start by defining a new static method in our\n",(0,s.jsx)(n.code,{children:"User"})," model that will retrieve a user and also load\nrelationships:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { BaseModel } from '@athenna/database'\n\nexport class User extends BaseModel {\n  public static async findWith(relation: string, where: Partial<InstanceType<User>> = {}): Promise<User> {\n      const query = this.query().with(relationName)\n\n      // Verify if the where object is not\n      // empty to apply it in the query.\n      if (Object.keys(where).length) {\n          query.where(where)\n      }\n\n      return this.query().with(relationName).find()\n  }\n\n  /*...*/\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now we can start finding our user with his relations with a little less code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const user = await User.findWith('posts', { id: 1 })\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let's implement another method that will get all the users that were\ncreated in the last 15 minutes ordering then by name:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { BaseModel } from '@athenna/database'\n\nexport class User extends BaseModel {\n  public static async getRecentlyCreatedUsers(): Promise<User[]> {\n      const nowDate = new Date()\n      const nowDateLessFifteenMinutes = new Date(nowDate - 15 * 60000)\n\n      return this.query()\n        .whereBetween('createdAt', [nowDate, nowDateLessFifteenMinutes])\n        .findMany()\n  }\n\n  /*...*/\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Calling our new static method:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const recentlyUsers = await User.getRecentlyCreatedUsers()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"writing-instance-methods",children:"Writing instance methods"}),"\n",(0,s.jsx)(n.p,{children:"You can also implement your own instance methods for your\nmodels. Let's implement a new instance method that will\nconfirm the user email:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { BaseModel } from '@athenna/database'\n\nexport class User extends BaseModel {\n   public async confirmEmailNow() {\n     this.emailVerifiedAt = new Date()\n\n     await this.save()\n   }\n\n  /*...*/\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now we can easily confirm the user email with one\nmethod call:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const user = await User.find()\n\nawait user.confirmEmailNow()\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now let's implement a method that will load the user\nposts if they are not loaded and also get the oldest\npost of the user:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { type Post } from '#src/models/Post'\nimport { BaseModel } from '@athenna/database'\n\nexport class User extends BaseModel {\n   public async getOldestPost(): Promise<Post> {\n     if (!this.posts) {\n         await this.load('posts', query => query.oldest())\n     }\n\n     return this.posts[0]\n   }\n\n  /*...*/\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Using our new method:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const user = await User.find()\nconst oldestPost = await user.getOldestPost()\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Always be carefully to not break the single responsibility principle\nof ",(0,s.jsx)(n.a,{href:"https://medium.com/backticks-tildes/the-s-o-l-i-d-principles-in-pictures-b34ce2f1e898",children:(0,s.jsx)(n.code,{children:"SOLID"})}),"\nwhen implementing your own model methods. But you are free to do whatever\nyou want with Athenna \ud83d\ude0e\ud83e\udd19. All of these methods implementations will always\ndepend on your business logic and creativity."]})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(6540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);