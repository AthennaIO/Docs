"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[8223],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,g=u["".concat(l,".").concat(m)]||u[m]||c[m]||s;return n?a.createElement(g,r(r({ref:t},d),{},{components:n})):a.createElement(g,r({ref:t},d))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,r[1]=i;for(var p=2;p<s;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5349:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const s={title:"CLI Testing",sidebar_position:3,description:"See how to create tests for CLI applications in Athenna."},r="CLI Testing",i={unversionedId:"testing/cli-tests",id:"testing/cli-tests",title:"CLI Testing",description:"See how to create tests for CLI applications in Athenna.",source:"@site/docs/testing/cli-tests.mdx",sourceDirName:"testing",slug:"/testing/cli-tests",permalink:"/docs/testing/cli-tests",draft:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/testing/cli-tests.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"CLI Testing",sidebar_position:3,description:"See how to create tests for CLI applications in Athenna."},sidebar:"tutorialSidebar",previous:{title:"REST API Testing",permalink:"/docs/testing/rest-api-testing"},next:{title:"Mocking",permalink:"/docs/testing/mocking"}},l={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Registering <code>command</code> plugin",id:"registering-command-plugin",level:2},{value:"Running commands",id:"running-commands",level:2},{value:"Changing Artisan file path",id:"changing-artisan-file-path",level:2},{value:"Changing the default Artisan file path",id:"changing-the-default-artisan-file-path",level:3},{value:"Changing Artisan file path per command",id:"changing-artisan-file-path-per-command",level:3},{value:"Debugging outputs",id:"debugging-outputs",level:2},{value:"Output assertions",id:"output-assertions",level:2},{value:"<code>assertExitCode()</code>",id:"assertexitcode",level:4},{value:"<code>assertSucceeded()</code>",id:"assertsucceeded",level:4},{value:"<code>assertFailed()</code>",id:"assertfailed",level:4},{value:"<code>assertLogged()</code>",id:"assertlogged",level:4},{value:"<code>assertLogMatches()</code>",id:"assertlogmatches",level:4}],d={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cli-testing"},"CLI Testing"),(0,o.kt)("p",null,"See how to create tests for CLI applications in Athenna."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Athenna provides a very fluent API for running CLI\ncommands of your application and examining the output.\nFor example, take a look at the e2e test defined below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Test, type Context } from '@athenna/test'\n\nexport default class ExampleTest {\n  @Test()\n  public async 'test successful output'({ command }: Context) {\n    const output = await command.run('app')\n\n    output.assertSucceeded()\n  }\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"command.run()")," method will run a child process using the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Path.bootstrap('artisan.ts')")," file to execute the ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," command\nand get the ",(0,o.kt)("inlineCode",{parentName:"p"},"stdout"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"stderr")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"exitCode")," outputs,\nwhile the ",(0,o.kt)("inlineCode",{parentName:"p"},"assertSucceeded()")," method asserts that the returned\noutput should have a successful exit code (",(0,o.kt)("inlineCode",{parentName:"p"},"0"),"). In addition\nto this simple assertion, Athenna also contains a variety of\nassertions for inspecting the output."),(0,o.kt)("h2",{id:"registering-command-plugin"},"Registering ",(0,o.kt)("inlineCode",{parentName:"h2"},"command")," plugin"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"command")," property in your test context will only be\navailable if you register the command plugin within the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Runner")," class. By default, your Athenna application already\ncomes with the command plugin registered. But we are\ngoing to cover how to register it manually if needed."),(0,o.kt)("p",null,"Just call the ",(0,o.kt)("inlineCode",{parentName:"p"},"Runner.addPlugin()")," static method to set up\nthe request plugin imported from ",(0,o.kt)("inlineCode",{parentName:"p"},"@athenna/artisan/testing/plugins"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=\"Path.bootstrap('test.ts')\"",title:"\"Path.bootstrap('test.ts')\""},"import { request } from '@athenna/http/testing/plugins'\nimport { command } from '@athenna/artisan/testing/plugins'\nimport { Runner, assert, specReporter } from '@athenna/test'\n\nawait Runner.setTsEnv()\n  .addPlugin(assert())\n  .addPlugin(request())\n  .addPlugin(command()) \ud83d\udc48\n  .addReporter(specReporter())\n  .addPath('tests/e2e/**/*.ts')\n  .addPath('tests/unit/**/*.ts')\n  .setCliArgs(process.argv.slice(2))\n  .setGlobalTimeout(5000)\n  .run()\n")),(0,o.kt)("h2",{id:"running-commands"},"Running commands"),(0,o.kt)("p",null,"To run a command to your application, you may invoke the\n",(0,o.kt)("inlineCode",{parentName:"p"},"command.run()")," method within your test."),(0,o.kt)("p",null,"This method will return a ",(0,o.kt)("inlineCode",{parentName:"p"},"TestOutput")," instance, which\nprovides a\n",(0,o.kt)("a",{parentName:"p",href:"/docs/testing/cli-tests#output-assertions"},"variety of helpful assertions"),"\nthat allow you to inspect your application's CLI output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Test, type Context } from '@athenna/test'\n\nexport default class ExampleTest {\n  @Test()\n  public async testBasicCommand({ command }: Context) {\n    const output = await command.run('greet')\n\n    output.assertExitCode(0)\n  }\n}\n")),(0,o.kt)("h2",{id:"changing-artisan-file-path"},"Changing Artisan file path"),(0,o.kt)("h3",{id:"changing-the-default-artisan-file-path"},"Changing the default Artisan file path"),(0,o.kt)("p",null,"As mentioned previously, the ",(0,o.kt)("inlineCode",{parentName:"p"},"command.run()")," method invokes\na child process using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.bootstrap('artisan.ts')")," file.\nBut for some reason, you may want to change which file should be\nused to test your commands. To do so, you can call the\n",(0,o.kt)("inlineCode",{parentName:"p"},"TestCommand.setArtisanPath()")," static method before running\nyour tests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=\"Path.bootstrap('test.ts')\"",title:"\"Path.bootstrap('test.ts')\""},"import { request } from '@athenna/http/testing/plugins'\nimport { command, TestCommand } from '@athenna/artisan/testing/plugins'\nimport { Runner, assert, specReporter } from '@athenna/test'\n\nTestCommand.setArtisanPath(Path.fixtures('artisan.ts')) \ud83d\udc48\n\nawait Runner.setTsEnv()\n  .addPlugin(assert())\n  .addPlugin(request())\n  .addPlugin(command())\n  .addReporter(specReporter())\n  .addPath('tests/e2e/**/*.ts')\n  .addPath('tests/unit/**/*.ts')\n  .setCliArgs(process.argv.slice(2))\n  .setGlobalTimeout(5000)\n  .run()\n")),(0,o.kt)("h3",{id:"changing-artisan-file-path-per-command"},"Changing Artisan file path per command"),(0,o.kt)("p",null,"When running your tests, you may want to create a different behavior\nfor a specific command, like mocking the prompts to not block your test\nexecution or adding some different value for an ",(0,o.kt)("inlineCode",{parentName:"p"},"Env")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Config"),"."),(0,o.kt)("p",null,"Since the ",(0,o.kt)("inlineCode",{parentName:"p"},"command.run()")," method invokes a child process, you can't do\nthis kind of customization in your tests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Config } from '@athenna/config'\nimport { Test, type Context } from '@athenna/test'\n\nexport default class ExampleTest {\n  @Test()\n  public async testConfigCommand({ command }: Context) {\n    Config.set('app.name', 'MyAppName')\n\n    const output = await command.run('greet')\n\n    output.assertLogged('Hello from MyAppName!') \u274c\n  }\n}\n")),(0,o.kt)("p",null,"To solve this problem, you can use a different ",(0,o.kt)("inlineCode",{parentName:"p"},"artisan")," file\nfor each ",(0,o.kt)("inlineCode",{parentName:"p"},"command.run()")," call. Let's first create a new ",(0,o.kt)("inlineCode",{parentName:"p"},"artisan"),"\nfile and save it in our ",(0,o.kt)("inlineCode",{parentName:"p"},"fixtures")," path:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=\"Path.fixtures('consoles/artisan-set-app-name.ts')\"",title:"\"Path.fixtures('consoles/artisan-set-app-name.ts')\""},"import { Ignite } from '@athenna/core'\nimport { Config } from '@athenna/config'\n\nconst ignite = await new Ignite().load(import.meta.url, { bootLogs: false })\n\nConfig.set('app.name', 'MyAppName')\n\nawait ignite.console(process.argv, { displayName: 'Artisan' })\n")),(0,o.kt)("p",null,"Now, we can use this new ",(0,o.kt)("inlineCode",{parentName:"p"},"artisan")," file to run our command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\nimport { Test, type Context } from '@athenna/test'\n\nexport default class ExampleTest {\n  @Test()\n  public async testConfigCommand({ command }: Context) {\n    const output = await command.run('greet', {\n      path: Path.fixtures('consoles/artisan-set-app-name.ts') \ud83d\udc48\n    })\n\n    output.assertLogged('Hello from MyAppName!') \u2705\n  }\n}\n")),(0,o.kt)("h2",{id:"debugging-outputs"},"Debugging outputs"),(0,o.kt)("p",null,"After executing a test command to your application,\nthe output returned will contain the ",(0,o.kt)("inlineCode",{parentName:"p"},"output")," property\ninside with all the ",(0,o.kt)("inlineCode",{parentName:"p"},"output")," data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Test, type Context } from '@athenna/test'\n\nexport default class ExampleTest {\n  @Test()\n  public async testBasicCommand({ command }: Context) {\n    const output = await command.run('basic')\n\n    console.log(output.output.stdout)\n    console.log(output.output.stderr)\n    console.log(output.output.exitCode)\n\n    output.assertExitCode(0)\n  }\n}\n")),(0,o.kt)("h2",{id:"output-assertions"},"Output assertions"),(0,o.kt)("p",null,"Athenna's ",(0,o.kt)("inlineCode",{parentName:"p"},"TestOutput")," class provides a variety of custom\nassertion methods that you may utilize when testing your\napplication. These assertions may be accessed on the\noutput that is returned by the ",(0,o.kt)("inlineCode",{parentName:"p"},"command.run()")," test method:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/testing/cli-tests#assertexitcode"},(0,o.kt)("inlineCode",{parentName:"a"},"assertExitCode()"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/testing/cli-tests#assertsucceeded"},(0,o.kt)("inlineCode",{parentName:"a"},"assertSucceeded()"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/testing/cli-tests#assertfailed"},(0,o.kt)("inlineCode",{parentName:"a"},"assertFailed()"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/testing/cli-tests#assertlogged"},(0,o.kt)("inlineCode",{parentName:"a"},"assertLogged()"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/testing/cli-tests#assertlogmatches"},(0,o.kt)("inlineCode",{parentName:"a"},"assertLogMatches()")))),(0,o.kt)("h4",{id:"assertexitcode"},(0,o.kt)("inlineCode",{parentName:"h4"},"assertExitCode()")),(0,o.kt)("p",null,"Assert the exit code of the output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"output.assertExitCode(0)\noutput.assertIsNotExitCode(1)\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," exit code means a successful exit of the command,\nanything different from ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," means an error.")),(0,o.kt)("h4",{id:"assertsucceeded"},(0,o.kt)("inlineCode",{parentName:"h4"},"assertSucceeded()")),(0,o.kt)("p",null,"Assert the command exits with ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," exit code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"output.assertSucceeded()\n")),(0,o.kt)("h4",{id:"assertfailed"},(0,o.kt)("inlineCode",{parentName:"h4"},"assertFailed()")),(0,o.kt)("p",null,"Assert the command exits with anything different\nfrom ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," exit code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"output.assertFailed()\n")),(0,o.kt)("h4",{id:"assertlogged"},(0,o.kt)("inlineCode",{parentName:"h4"},"assertLogged()")),(0,o.kt)("p",null,"Assert the command has logged the expected message:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"output.assertLogged('Hello World!')\noutput.assertNotLogged('Hello World!')\n")),(0,o.kt)("p",null,"This method validates that the log message will be\nprinted in ",(0,o.kt)("inlineCode",{parentName:"p"},"stdout")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"stderr"),". To force the stream type\nwhere this log should appear, you can set it as second\nargument:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"output.assertLogged('Hello World!', 'stdout') // or stderr\noutput.assertNotLogged('Hello World!', 'stdout') // or stderr\n")),(0,o.kt)("h4",{id:"assertlogmatches"},(0,o.kt)("inlineCode",{parentName:"h4"},"assertLogMatches()")),(0,o.kt)("p",null,"Assert the command has logged a message that matches\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"},(0,o.kt)("inlineCode",{parentName:"a"},"RegExp")),"\nprovided:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"output.assertLogMatches(/Hello World/)\noutput.assertLogNotMatches(/Hello World/)\n")),(0,o.kt)("p",null,"This method validates that the regex will match in ",(0,o.kt)("inlineCode",{parentName:"p"},"stdout"),"\nor ",(0,o.kt)("inlineCode",{parentName:"p"},"stderr"),". To force the stream type\nwhere this log should match, you can set it as second\nargument:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"output.assertLogMatches(/Hello World/, 'stdout') // or stderr\noutput.assertLogNotMatches(/Hello World/, 'stdout') // or stderr\n")))}c.isMDXComponent=!0}}]);