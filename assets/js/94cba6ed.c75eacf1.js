"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[2419],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),h=o,u=d["".concat(s,".").concat(h)]||d[h]||m[h]||r;return n?a.createElement(u,l(l({ref:t},c),{},{components:n})):a.createElement(u,l({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4932:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={title:"Helpers",sidebar_position:3,description:"Understand how to use all the Athenna Helpers from @athenna/common and other packages.",tags:["The Basics","Helpers"]},l="Helpers",i={unversionedId:"the-basics/helpers",id:"the-basics/helpers",title:"Helpers",description:"Understand how to use all the Athenna Helpers from @athenna/common and other packages.",source:"@site/docs/the-basics/helpers.mdx",sourceDirName:"the-basics",slug:"/the-basics/helpers",permalink:"/docs/the-basics/helpers",draft:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/the-basics/helpers.mdx",tags:[{label:"The Basics",permalink:"/docs/tags/the-basics"},{label:"Helpers",permalink:"/docs/tags/helpers"}],version:"current",sidebarPosition:3,frontMatter:{title:"Helpers",sidebar_position:3,description:"Understand how to use all the Athenna Helpers from @athenna/common and other packages.",tags:["The Basics","Helpers"]},sidebar:"tutorialSidebar",previous:{title:"Views",permalink:"/docs/the-basics/views"},next:{title:"Compilation",permalink:"/docs/the-basics/compilation"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Available helpers",id:"available-helpers",level:2},{value:"Clean",id:"clean",level:3},{value:"<code>Clean::cleanArray()</code>",id:"cleancleanarray",level:4},{value:"<code>Clean::cleanObject()</code>",id:"cleancleanobject",level:4},{value:"Color",id:"color",level:3},{value:"<code>Color::apply()</code>",id:"colorapply",level:4},{value:"<code>Color::remove()</code>",id:"colorremove",level:4},{value:"<code>Color::httpMethod()</code>",id:"colorhttpmethod",level:4},{value:"Exception",id:"exception",level:3},{value:"<code>Exception.toJSON()</code>",id:"exceptiontojson",level:4},{value:"<code>Exception.prettify()</code>",id:"exceptionprettify",level:4},{value:"Exec",id:"exec",level:3},{value:"<code>Exec::sleep()</code>",id:"execsleep",level:4},{value:"<code>Exec::concurrently()</code>",id:"execconcurrently",level:4},{value:"<code>Exec::command()</code>",id:"execcommand",level:4},{value:"<code>Exec::download()</code>",id:"execdownload",level:4},{value:"<code>Exec::pagination()</code>",id:"execpagination",level:4},{value:"FakeApi",id:"fakeapi",level:3},{value:"<code>FakeApi::start()</code>",id:"fakeapistart",level:4},{value:"<code>FakeApi::stop()</code>",id:"fakeapistop",level:4},{value:"<code>FakeApi::isRunning()</code>",id:"fakeapiisrunning",level:4},{value:"<code>FakeApi::listRoutes()</code>",id:"fakeapilistroutes",level:4},{value:"<code>FakeApi::registerFile()</code>",id:"fakeapiregisterfile",level:4},{value:"<code>FakeApi::registerFolder()</code>",id:"fakeapiregisterfolder",level:4},{value:"<code>FakeApi::build()</code>",id:"fakeapibuild",level:4},{value:"File",id:"file",level:3},{value:"<code>File.load()</code> &amp; <code>File.loadSync()</code>",id:"fileload--fileloadsync",level:4},{value:"<code>File.copy()</code> &amp; <code>File.copySync()</code>",id:"filecopy--filecopysync",level:4},{value:"<code>File.move()</code> &amp; <code>File.moveSync()</code>",id:"filemove--filemovesync",level:4},{value:"<code>File.remove()</code> &amp; <code>File.removeSync()</code>",id:"fileremove--fileremovesync",level:4},{value:"<code>File.setContent()</code> &amp; <code>File.setContentSync()</code>",id:"filesetcontent--filesetcontentsync",level:4},{value:"<code>File.getContent()</code> &amp; <code>File.getContentSync()</code>",id:"filegetcontent--filegetcontentsync",level:4},{value:"<code>File.getContentAsString()</code> &amp; <code>File.getContentAsStringSync()</code>",id:"filegetcontentasstring--filegetcontentasstringsync",level:4},{value:"<code>File.getContentAsJson()</code> &amp; <code>File.getContentAsJsonSync()</code>",id:"filegetcontentasjson--filegetcontentasjsonsync",level:4},{value:"<code>File.getContentAsBuilder()</code> &amp; <code>File.getContentAsBuilderSync()</code>",id:"filegetcontentasbuilder--filegetcontentasbuildersync",level:4},{value:"<code>File.append()</code> &amp; <code>File.appendSync()</code>",id:"fileappend--fileappendsync",level:4},{value:"<code>File.prepend()</code> &amp; <code>File.prependSync()</code>",id:"fileprepend--fileprependsync",level:4},{value:"<code>File.createReadStream()</code>",id:"filecreatereadstream",level:4},{value:"<code>File.createWriteStream()</code>",id:"filecreatewritestream",level:4},{value:"<code>File.toJSON()</code>",id:"filetojson",level:4},{value:"<code>File.import()</code>",id:"fileimport",level:4},{value:"<code>File.safeImport()</code>",id:"filesafeimport",level:4},{value:"<code>File::safeRemove()</code>",id:"filesaferemove",level:4},{value:"<code>File::exists()</code> &amp; <code>File::existsSync()</code>",id:"fileexists--fileexistssync",level:4},{value:"<code>File::isFile()</code> &amp; <code>File::isFileSync()</code>",id:"fileisfile--fileisfilesync",level:4},{value:"<code>File::createFileOfSize()</code>",id:"filecreatefileofsize",level:4},{value:"Folder",id:"folder",level:3},{value:"<code>Folder.load()</code> &amp; <code>Folder.loadSync()</code>",id:"folderload--folderloadsync",level:4},{value:"<code>Folder.copy()</code> &amp; <code>Folder.copySync()</code>",id:"foldercopy--foldercopysync",level:4},{value:"<code>Folder.move()</code> &amp; <code>Folder.moveSync()</code>",id:"foldermove--foldermovesync",level:4},{value:"<code>Folder.remove()</code> &amp; <code>Folder.removeSync()</code>",id:"folderremove--folderremovesync",level:4},{value:"<code>Folder.toJSON()</code>",id:"foldertojson",level:4},{value:"<code>Folder.getFilesByPattern()</code>",id:"foldergetfilesbypattern",level:4},{value:"<code>Folder.getFoldersByPattern()</code>",id:"foldergetfoldersbypattern",level:4},{value:"<code>Folder::safeRemove()</code>",id:"foldersaferemove",level:4},{value:"<code>Folder::exists()</code> &amp; <code>Folder::existsSync()</code>",id:"folderexists--folderexistssync",level:4},{value:"<code>Folder::isFolder()</code> &amp; <code>Folder::isFolderSync()</code>",id:"folderisfolder--folderisfoldersync",level:4},{value:"<code>Folder::size()</code> &amp; <code>Folder::sizeSync()</code>",id:"foldersize--foldersizesync",level:4},{value:"HttpClient",id:"httpclient",level:3},{value:"Is",id:"is",level:3},{value:"Json",id:"json",level:3},{value:"<code>Json::builder()</code>",id:"jsonbuilder",level:4},{value:"<code>Json::copy()</code>",id:"jsoncopy",level:4},{value:"<code>Json::getJson()</code>",id:"jsongetjson",level:4},{value:"<code>Json::parse()</code>",id:"jsonparse",level:4},{value:"<code>Json::observeChanges()</code>",id:"jsonobservechanges",level:4},{value:"<code>Json::fillable()</code>",id:"jsonfillable",level:4},{value:"<code>Json::get()</code>",id:"jsonget",level:4},{value:"Module",id:"module",level:3},{value:"Number",id:"number",level:3},{value:"<code>Number::getHigher()</code>",id:"numbergethigher",level:4},{value:"<code>Number::getKmRadius()</code>",id:"numbergetkmradius",level:4},{value:"<code>Number::getLower()</code>",id:"numbergetlower",level:4},{value:"<code>Number::extractNumber()</code>",id:"numberextractnumber",level:4},{value:"<code>Number::extractNumbers()</code>",id:"numberextractnumbers",level:4},{value:"<code>Number::argsAverage()</code>",id:"numberargsaverage",level:4},{value:"<code>Number::arrayAverage()</code>",id:"numberarrayaverage",level:4},{value:"<code>Number::randomIntFromInterval()</code>",id:"numberrandomintfrominterval",level:4},{value:"ObjectBuilder",id:"objectbuilder",level:3},{value:"<code>new ObjectBuilder()</code>",id:"new-objectbuilder",level:4},{value:"<code>ObjectBuilder.set()</code>",id:"objectbuilderset",level:4},{value:"<code>ObjectBuilder.delete()</code>",id:"objectbuilderdelete",level:4},{value:"<code>ObjectBuilder.get()</code>",id:"objectbuilderget",level:4},{value:"<code>ObjectBuilder.keys()</code>",id:"objectbuilderkeys",level:4},{value:"<code>ObjectBuilder.values()</code>",id:"objectbuildervalues",level:4},{value:"<code>ObjectBuilder.entries()</code>",id:"objectbuilderentries",level:4},{value:"<code>ObjectBuilder.forEachKey()</code>",id:"objectbuilderforeachkey",level:4},{value:"<code>ObjectBuilder.forEachValue()</code>",id:"objectbuilderforeachvalue",level:4},{value:"<code>ObjectBuilder.forEachEntry()</code>",id:"objectbuilderforeachentry",level:4},{value:"<code>ObjectBuilder.is()</code> &amp; <code>ObjectBuilder.isNot()</code>",id:"objectbuilderis--objectbuilderisnot",level:4},{value:"<code>ObjectBuilder.exists()</code> &amp; <code>ObjectBuilder.notExists()</code>",id:"objectbuilderexists--objectbuildernotexists",level:4},{value:"<code>ObjectBuilder.existsAll()</code> &amp; <code>ObjectBuilder.notExistsAll()</code>",id:"objectbuilderexistsall--objectbuildernotexistsall",level:4},{value:"Options",id:"options",level:3},{value:"<code>Options::create()</code>",id:"optionscreate",level:4},{value:"<code>Options::bind()</code>",id:"optionsbind",level:4},{value:"<code>Options.whenDefined()</code>",id:"optionswhendefined",level:4},{value:"Parser",id:"parser",level:3},{value:"<code>Parser::stringToArray()</code>",id:"parserstringtoarray",level:4},{value:"<code>Parser::arrayToString()</code>",id:"parserarraytostring",level:4},{value:"<code>Parser::stringToNumber()</code>",id:"parserstringtonumber",level:4},{value:"<code>Parser::jsonToFormData()</code>",id:"parserjsontoformdata",level:4},{value:"<code>Parser::formDataToJson()</code>",id:"parserformdatatojson",level:4},{value:"<code>Parser::linkToHref()</code>",id:"parserlinktohref",level:4},{value:"<code>Parser::sizeToByte()</code>",id:"parsersizetobyte",level:4},{value:"<code>Parser::byteToSize()</code>",id:"parserbytetosize",level:4},{value:"<code>Parser::timeToMs()</code>",id:"parsertimetoms",level:4},{value:"<code>Parser::msToTime()</code>",id:"parsermstotime",level:4},{value:"<code>Parser::statusCodeToReason()</code>",id:"parserstatuscodetoreason",level:4},{value:"<code>Parser::reasonToStatusCode()</code>",id:"parserreasontostatuscode",level:4},{value:"<code>Parser::dbUrlToConnectionObj()</code>",id:"parserdburltoconnectionobj",level:4},{value:"<code>Parser::connectionObjToDbUrl()</code>",id:"parserconnectionobjtodburl",level:4},{value:"<code>Parser::objectToBuilder()</code>",id:"parserobjecttobuilder",level:4},{value:"<code>Parser::arrayObjectToArrayBuilder()</code>",id:"parserarrayobjecttoarraybuilder",level:4},{value:"Path",id:"path",level:3},{value:"<code>Path::dirs</code>",id:"pathdirs",level:4},{value:"<code>Path::mergeDirs()</code>",id:"pathmergedirs",level:4},{value:"<code>Path::ext()</code>",id:"pathext",level:4},{value:"<code>Path::pwd()</code>",id:"pathpwd",level:4},{value:"<code>Path::src()</code>",id:"pathsrc",level:4},{value:"<code>Path::setSrc()</code>",id:"pathsetsrc",level:4},{value:"<code>Path::bin()</code>",id:"pathbin",level:4},{value:"<code>Path::setBin()</code>",id:"pathsetbin",level:4},{value:"<code>Path::app()</code>",id:"pathapp",level:4},{value:"<code>Path::setApp()</code>",id:"pathsetapp",level:4},{value:"<code>Path::boostrap()</code>",id:"pathboostrap",level:4},{value:"<code>Path::setBootstrap()</code>",id:"pathsetbootstrap",level:4},{value:"<code>Path::config()</code>",id:"pathconfig",level:4},{value:"<code>Path::setConfig()</code>",id:"pathsetconfig",level:4},{value:"<code>Path::database()</code>",id:"pathdatabase",level:4},{value:"<code>Path::setDatabase()</code>",id:"pathsetdatabase",level:4},{value:"<code>Path::lang()</code>",id:"pathlang",level:4},{value:"<code>Path::setLang()</code>",id:"pathsetlang",level:4},{value:"<code>Path::nodeModules()</code>",id:"pathnodemodules",level:4},{value:"<code>Path::setNodeModules()</code>",id:"pathsetnodemodules",level:4},{value:"<code>Path::providers()</code>",id:"pathproviders",level:4},{value:"<code>Path::setProviders()</code>",id:"pathsetproviders",level:4},{value:"<code>Path::facades()</code>",id:"pathfacades",level:4},{value:"<code>Path::setFacades()</code>",id:"pathsetfacades",level:4},{value:"<code>Path::public()</code>",id:"pathpublic",level:4},{value:"<code>Path::setPublic()</code>",id:"pathsetpublic",level:4},{value:"<code>Path::resources()</code>",id:"pathresources",level:4},{value:"<code>Path::setResources()</code>",id:"pathsetresources",level:4},{value:"<code>Path::routes()</code>",id:"pathroutes",level:4},{value:"<code>Path::setRoutes()</code>",id:"pathsetroutes",level:4},{value:"<code>Path::storage()</code>",id:"pathstorage",level:4},{value:"<code>Path::setStorage()</code>",id:"pathsetstorage",level:4},{value:"<code>Path::tests()</code>",id:"pathtests",level:4},{value:"<code>Path::setTests()</code>",id:"pathsettests",level:4},{value:"<code>Path::logs()</code>",id:"pathlogs",level:4},{value:"<code>Path::setLogs()</code>",id:"pathsetlogs",level:4},{value:"<code>Path::views()</code>",id:"pathviews",level:4},{value:"<code>Path::setViews()</code>",id:"pathsetviews",level:4},{value:"<code>Path::static()</code>",id:"pathstatic",level:4},{value:"<code>Path::setStatic()</code>",id:"pathsetstatic",level:4},{value:"<code>Path::assets()</code>",id:"pathassets",level:4},{value:"<code>Path::setAssets()</code>",id:"pathsetassets",level:4},{value:"<code>Path::locales()</code>",id:"pathlocales",level:4},{value:"<code>Path::setLocales()</code>",id:"pathsetlocales",level:4},{value:"<code>Path::stubs()</code>",id:"pathstubs",level:4},{value:"<code>Path::setStubs()</code>",id:"pathsetstubs",level:4},{value:"<code>Path::http()</code>",id:"pathhttp",level:4},{value:"<code>Path::setHttp()</code>",id:"pathsethttp",level:4},{value:"<code>Path::console()</code>",id:"pathconsole",level:4},{value:"<code>Path::setConsole()</code>",id:"pathsetconsole",level:4},{value:"<code>Path::services()</code>",id:"pathservices",level:4},{value:"<code>Path::setServices()</code>",id:"pathsetservices",level:4},{value:"<code>Path::repositories()</code>",id:"pathrepositories",level:4},{value:"<code>Path::setRepositories()</code>",id:"pathsetrepositories",level:4},{value:"<code>Path::commands()</code>",id:"pathcommands",level:4},{value:"<code>Path::setCommands()</code>",id:"pathsetcommands",level:4},{value:"<code>Path::controllers()</code>",id:"pathcontrollers",level:4},{value:"<code>Path::setControllers()</code>",id:"pathsetcontrollers",level:4},{value:"<code>Path::exceptions()</code>",id:"pathexceptions",level:4},{value:"<code>Path::setExceptions()</code>",id:"pathsetexceptions",level:4},{value:"<code>Path::middlewares()</code>",id:"pathmiddlewares",level:4},{value:"<code>Path::setMiddlewares()</code>",id:"pathsetmiddlewares",level:4},{value:"<code>Path::interceptors()</code>",id:"pathinterceptors",level:4},{value:"<code>Path::setInterceptors()</code>",id:"pathsetinterceptors",level:4},{value:"<code>Path::terminators()</code>",id:"pathterminators",level:4},{value:"<code>Path::setTerminators()</code>",id:"pathsetterminators",level:4},{value:"<code>Path::migrations()</code>",id:"pathmigrations",level:4},{value:"<code>Path::setMigrations()</code>",id:"pathsetmigrations",level:4},{value:"<code>Path::seeders()</code>",id:"pathseeders",level:4},{value:"<code>Path::setSeeders()</code>",id:"pathsetseeders",level:4},{value:"<code>Path::nodeModulesBin()</code>",id:"pathnodemodulesbin",level:4},{value:"<code>Path::setNodeModulesBin()</code>",id:"pathsetnodemodulesbin",level:4},{value:"<code>Path::vmTmp()</code>",id:"pathvmtmp",level:4},{value:"<code>Path::vmHome()</code>",id:"pathvmhome",level:4},{value:"<code>Path::this()</code>",id:"paththis",level:4},{value:"Route",id:"route",level:3},{value:"<code>Route::getQueryString()</code>",id:"routegetquerystring",level:4},{value:"<code>Route::removeQueryParams()</code>",id:"routeremovequeryparams",level:4},{value:"<code>Route::getQueryParamsValue()</code>",id:"routegetqueryparamsvalue",level:4},{value:"<code>Route::getQueryParamsName()</code>",id:"routegetqueryparamsname",level:4},{value:"<code>Route::getParamsValue()</code>",id:"routegetparamsvalue",level:4},{value:"<code>Route::getParamsName()</code>",id:"routegetparamsname",level:4},{value:"<code>Route::createMatcher()</code>",id:"routecreatematcher",level:4},{value:"String",id:"string",level:3},{value:"<code>String::generateRandom()</code>",id:"stringgeneraterandom",level:4},{value:"<code>String::toCamelCase()</code>",id:"stringtocamelcase",level:4},{value:"<code>String::toSnakeCase()</code>",id:"stringtosnakecase",level:4},{value:"<code>String::toConstantCase()</code>",id:"stringtoconstantcase",level:4},{value:"<code>String::toPascalCase()</code>",id:"stringtopascalcase",level:4},{value:"<code>String::toSentenceCase()</code>",id:"stringtosentencecase",level:4},{value:"<code>String::toDotCase()</code>",id:"stringtodotcase",level:4},{value:"<code>String::toDashCase()</code>",id:"stringtodashcase",level:4},{value:"<code>String::toNoCase()</code>",id:"stringtonocase",level:4},{value:"<code>String::pluralize()</code>",id:"stringpluralize",level:4},{value:"<code>String::singularize()</code>",id:"stringsingularize",level:4},{value:"<code>String::ordinalize()</code>",id:"stringordinalize",level:4},{value:"<code>String::generateRandomColor()</code>",id:"stringgeneraterandomcolor",level:4},{value:"<code>String::normalizeBase64()</code>",id:"stringnormalizebase64",level:4},{value:"Uuid",id:"uuid",level:3},{value:"<code>Uuid::generate()</code>",id:"uuidgenerate",level:4},{value:"<code>Uuid::verify()</code>",id:"uuidverify",level:4},{value:"<code>Uuid::getToken()</code>",id:"uuidgettoken",level:4},{value:"<code>Uuid::getPrefix()</code>",id:"uuidgetprefix",level:4},{value:"<code>Uuid::injectPrefix()</code>",id:"uuidinjectprefix",level:4},{value:"<code>Uuid::changePrefix()</code>",id:"uuidchangeprefix",level:4},{value:"<code>Uuid::changeOrGenerate()</code>",id:"uuidchangeorgenerate",level:4}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"helpers"},"Helpers"),(0,o.kt)("p",null,"Understand how to use all the Athenna Helpers from @athenna/common and other packages."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,'Athenna includes a variety of "helpers" classes inside\nthe ',(0,o.kt)("inlineCode",{parentName:"p"},"@athenna/common")," package that comes by default\ninstalled in your application. Many of these classes are\nused by the framework itself; however, you are free to use\nthem in your own applications if you find them convenient."),(0,o.kt)("h2",{id:"available-helpers"},"Available helpers"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#clean"},(0,o.kt)("inlineCode",{parentName:"a"},"Clean"))," - Remove falsy values\nfrom different data structures."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#color"},(0,o.kt)("inlineCode",{parentName:"a"},"Color"))," - The UI Kit of Athenna\ncommand line applications."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#exception"},(0,o.kt)("inlineCode",{parentName:"a"},"Exception"))," - Create errors with\nmore details to handle them easily."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#exec"},(0,o.kt)("inlineCode",{parentName:"a"},"Exec"))," - Simple helpers that executes\nsome operation, like executing a command in a child process."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#fakeapi"},(0,o.kt)("inlineCode",{parentName:"a"},"FakeApi"))," - Create a fake REST API\nusing ",(0,o.kt)("inlineCode",{parentName:"li"},"json")," files to map the routes and their returns (similiar to ",(0,o.kt)("a",{parentName:"li",href:"https://wiremock.org/"},"WireMock"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#file"},(0,o.kt)("inlineCode",{parentName:"a"},"File"))," - Create, copy, move,\ndelete and get information about files."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#folder"},(0,o.kt)("inlineCode",{parentName:"a"},"Folder"))," - Create, copy, move,\ndelete and get information about folders."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#httpclient"},(0,o.kt)("inlineCode",{parentName:"a"},"HttpClient"))," - Make HTTP requests for\nother servers with a human-friendly and powerful API."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#is"},(0,o.kt)("inlineCode",{parentName:"a"},"Is"))," - Validate if your data ",(0,o.kt)("strong",{parentName:"li"},"is"),"\nequals to some type or pattern."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#json"},(0,o.kt)("inlineCode",{parentName:"a"},"Json"))," - Simple helpers to manipulate JSON."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#module"},(0,o.kt)("inlineCode",{parentName:"a"},"Module"))," - Simple helpers to manipulate\nNode.js modules."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#number"},(0,o.kt)("inlineCode",{parentName:"a"},"Number"))," - Simple helpers to manipulate\nnumbers."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#object-builder"},(0,o.kt)("inlineCode",{parentName:"a"},"ObjectBuilder"))," - Build objects removing\n",(0,o.kt)("inlineCode",{parentName:"li"},"undefined")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"null")," values and without memory reference."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#options"},(0,o.kt)("inlineCode",{parentName:"a"},"Options"))," - Simple helpers to develop\nAPI's (functions and methods) with good options and configurations for\ndevelopers."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#parser"},(0,o.kt)("inlineCode",{parentName:"a"},"Parser"))," - Parse data from X to Y and Y to X."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#path"},(0,o.kt)("inlineCode",{parentName:"a"},"Path"))," - Get the full path to some file or\nfolder starting from your application\n",(0,o.kt)("a",{parentName:"li",href:"https://www.computerhope.com/jargon/p/pwd.htm"},"PWD"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#route"},(0,o.kt)("inlineCode",{parentName:"a"},"Route"))," - Simple helpers to manipulate\nroute params, query params and more."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#string"},(0,o.kt)("inlineCode",{parentName:"a"},"String"))," - Simple helpers to manipulate\nstrings."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#uuid"},(0,o.kt)("inlineCode",{parentName:"a"},"Uuid"))," - Create customized UUID v4 and\nvalidate if they are valid.")),(0,o.kt)("h3",{id:"clean"},"Clean"),(0,o.kt)("h4",{id:"cleancleanarray"},(0,o.kt)("inlineCode",{parentName:"h4"},"Clean::cleanArray()")),(0,o.kt)("p",null,"Clean falsy and empty values from an array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Clean } from '@athenna/common'\n\nconst array = [\n  '',\n  1,\n  null,\n  undefined, \n  { joao: 'joao', lenon: null }, \n  {}\n]\n\nconst cleanedArray = Clean.cleanArray(array)\n\nconsole.log(cleanedArray)\n\n/**\n * [\n *  1,\n *  { joao: 'joao', lenon: null }, \n *  {}\n * ]\n */\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"cleanArray()")," method supports two options, ",(0,o.kt)("inlineCode",{parentName:"p"},"removeEmpty")," to remove empty\nvalues like ",(0,o.kt)("inlineCode",{parentName:"p"},"{}")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"[]")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"recursive")," to recursivelly remove data\nfrom objects and arrays:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const cleanedArray = Clean.cleanArray(array, {\n  removeEmpty: true,\n  recursive: true\n})\n\nconsole.log(cleanedArray)\n\n/**\n * [\n *  1, { joao: 'joao' }\n * ]\n */\n")),(0,o.kt)("h4",{id:"cleancleanobject"},(0,o.kt)("inlineCode",{parentName:"h4"},"Clean::cleanObject()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const object = {\n  key: 'value',\n  emptyArray: [],\n  emptyObject: {},\n  object: { joao: 'joao' },\n  nullValue: null,\n  undefinedValue: undefined,\n  arrayWithSubs: [null, 1, { joao: 'joao', lenon: null }, {}],\n}\n\nconst cleanedObject = Clean.cleanObject(object)\n\nconsole.log(cleanedObject) \n/**\n * {\n *  key: 'value',\n *  emptyArray: [],\n *  emptyObject: {},\n *  object: { joao: 'joao' },\n *  arrayWithSubs: [null, 1, { joao: 'joao', lenon: null }, {}],\n * }\n */\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"cleanObject()")," method supports two options, ",(0,o.kt)("inlineCode",{parentName:"p"},"removeEmpty")," to remove empty\nvalues like ",(0,o.kt)("inlineCode",{parentName:"p"},"{}")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"[]")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"recursive")," to recursivelly remove data\nfrom objects and arrays:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const cleanedObject = Clean.cleanObject(object, {\n  removeEmpty: true,\n  recursive: true,\n})\n\nconsole.log(cleanedObject) \n/**\n * {\n *  key: 'value',\n *  object: { joao: 'joao' },\n *  arrayWithSubs: [1, { joao: 'joao' }],\n * }\n */\n")),(0,o.kt)("h3",{id:"color"},"Color"),(0,o.kt)("p",null,"This helper uses ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/chalk"},"chalk"),"\nlibrary under the hood to create unique colors for Athenna\nCLI applications. In this documentation we are going to focus\nonly in helpers that ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Color"))," provides different from ",(0,o.kt)("strong",{parentName:"p"},"chalk"),"."),(0,o.kt)("h4",{id:"colorapply"},(0,o.kt)("inlineCode",{parentName:"h4"},"Color::apply()")),(0,o.kt)("p",null,"Apply the color engine of Athenna to some string. The color\nengine execute ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/chalk"},"chalk"),"\nmethods under the hood. In the example bellow we are executing\n",(0,o.kt)("inlineCode",{parentName:"p"},"yellow()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bold()")," method of\n",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/chalk"},"chalk")," in the word\n",(0,o.kt)("inlineCode",{parentName:"p"},"World"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Color } from '@athenna/common'\n\nconst colorizedString = Color.apply('Hello ({yellow, bold} World)!')\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The color of ",(0,o.kt)("inlineCode",{parentName:"p"},"World")," word will be yellow with bold format.")),(0,o.kt)("h4",{id:"colorremove"},(0,o.kt)("inlineCode",{parentName:"h4"},"Color::remove()")),(0,o.kt)("p",null,"Remove all the formats and colors of your string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Color } from '@athenna/common'\n\nconst noColorString = Color.remove(Color.yellow('Davi Mezencio'))\n")),(0,o.kt)("h4",{id:"colorhttpmethod"},(0,o.kt)("inlineCode",{parentName:"h4"},"Color::httpMethod()")),(0,o.kt)("p",null,"Get an instance of chalk with a determined color for each type\nof http method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Color } from '@athenna/common'\n\nColor.httpMethod('GET').bold('Request Received')\nColor.httpMethod('HEAD').bold('Request Received')\nColor.httpMethod('POST').bold('Request Received')\nColor.httpMethod('PUT').bold('Request Received')\nColor.httpMethod('PATCH').bold('Request Received')\nColor.httpMethod('DELETE').bold('Request Received')\nColor.httpMethod('OPTIONS').bold('Request Received')\n")),(0,o.kt)("h3",{id:"exception"},"Exception"),(0,o.kt)("p",null,"In this documentation section we are going to cover only the\nhelpers of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Exception")," class. You can learn more about\nexceptions when handling errors in your application. Those are\nthe available documentation for error handling by application:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/rest-api-application/error-handling"},"REST API")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/cli-application/error-handling"},"CLI"))),(0,o.kt)("h4",{id:"exceptiontojson"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exception.toJSON()")),(0,o.kt)("p",null,"Get the informations of the exception as JSON:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exception } from '@athenna/common'\n\nconst exception = new Exception({\n  status: 500,\n  name: 'ErrorName',\n  code: 'ERROR_CODE',\n  message: 'Some exception has ocurred.',\n  help: 'Try restarting your computer, should work.'\n})\n\nconst json = exception.toJSON() // { status: 500, name: 'ErrorName', ... }\n")),(0,o.kt)("h4",{id:"exceptionprettify"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exception.prettify()")),(0,o.kt)("p",null,"Transform the exception to a human redable format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exception } from '@athenna/common'\n\nconst exception = new Exception({\n  status: 500,\n  name: 'ErrorName',\n  code: 'ERROR_CODE',\n  message: 'Some exception has ocurred.',\n  help: 'Try restarting your computer, should work.'\n})\n\nLogger.error(await exception.prettify())\n")),(0,o.kt)("h3",{id:"exec"},"Exec"),(0,o.kt)("h4",{id:"execsleep"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exec::sleep()")),(0,o.kt)("p",null,"Put the code to sleep for a determined amount of MS:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\nawait Exec.sleep(3000) // 3 seconds\n")),(0,o.kt)("h4",{id:"execconcurrently"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exec::concurrently()")),(0,o.kt)("p",null,"Execute some callback concurrently for each value of\nthe array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\nconst array = [1, 2, 3]\n\nconst newArray = await Exec.concurrently(array, async (number) => {\n  // Some sync operation just to simulate\n  await Exec.sleep(1000)\n\n  return number++\n})\n")),(0,o.kt)("h4",{id:"execcommand"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exec::command()")),(0,o.kt)("p",null,"Execute some command of your OS in a child process:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\nconst { stdout } = await Exec.command('ls -la')\n")),(0,o.kt)("p",null,"If your command fails, Athenna will throw the\n",(0,o.kt)("inlineCode",{parentName:"p"},"NodeCommandException"),", to avoid this you can set the\n",(0,o.kt)("inlineCode",{parentName:"p"},"ignoreErrors")," option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\nconst { stdout, stderr } = await Exec.command('ls -la', {\n  ignoreErrors: true\n})\n")),(0,o.kt)("h4",{id:"execdownload"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exec::download()")),(0,o.kt)("p",null,"Download some file from some URL and get the ",(0,o.kt)("inlineCode",{parentName:"p"},"File")," instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\n// File helper class instance\nconst file = await Exec.download(Path.storage('file.txt'), 'https://athenna.io/file.txt')\n")),(0,o.kt)("h4",{id:"execpagination"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exec::pagination()")),(0,o.kt)("p",null,"Create a pagination object for your API:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\nconst data = [{...}, {...}]\n\nconst paginateObject = await Exec.pagination(data, data.length, {\n  page: 0,\n  limit: 10,\n  resourceUrl: Config.get('app.url')\n})\n\nconsole.log(paginateObject)\n/**\n * {\n *  data: [{...}, {...}],\n *  meta: {\n *    itemCount: 2,\n *    totalItems: 2,\n *    totalPages: 1,\n *    currentPage: 0,\n *    itemsPerPage: 10,\n *  },\n *  links: {\n *    first: 'http://localhost:3000?limit=10',\n *    previous: 'http://localhost:3000?page=0&limit=10',\n *    next: 'http://localhost:3000?page=1&limit=10',\n *    last: 'http://localhost:3000?page=0&limit=10',\n *  } \n * }\n */\n")),(0,o.kt)("h3",{id:"fakeapi"},"FakeApi"),(0,o.kt)("h4",{id:"fakeapistart"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::start()")),(0,o.kt)("p",null,"Start the fake server on port ",(0,o.kt)("inlineCode",{parentName:"p"},"8989")," and loading the path\n",(0,o.kt)("inlineCode",{parentName:"p"},"Path.resources('fake-api')"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nawait FakeApi.start()\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can change the server port and the path to read the\n",(0,o.kt)("inlineCode",{parentName:"p"},"json")," files:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nawait FakeApi.start(8989, Path.resources('path'))\n"))),(0,o.kt)("h4",{id:"fakeapistop"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::stop()")),(0,o.kt)("p",null,"Stop the fake api server and call ",(0,o.kt)("inlineCode",{parentName:"p"},"FakeApi::recreate()"),"\nmethod to create a new server instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nawait FakeApi.stop()\n")),(0,o.kt)("h4",{id:"fakeapiisrunning"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::isRunning()")),(0,o.kt)("p",null,"Verify if the fake api server is running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nif (FakeApi.isRunning()) {\n  // do something...\n}\n")),(0,o.kt)("h4",{id:"fakeapilistroutes"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::listRoutes()")),(0,o.kt)("p",null,"List all the routes registered in the fake api server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nconst routes = FakeApi.listRoutes()\n\nconsole.log(routes)\n")),(0,o.kt)("h4",{id:"fakeapiregisterfile"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::registerFile()")),(0,o.kt)("p",null,"Register a route using a ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," file in the fake api:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nFakeApi.registerFile(Path.resources('fake-api/users.json'))\n")),(0,o.kt)("p",null,"Content of ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.resources('fake-api/users.json')")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "path": "/users",\n  "method": "GET",\n  "statusCode": 200, \ud83d\udc48 // The response status code\n  "body": [ \ud83d\udc48 // The response body\n    {\n      "id": 1,\n      "name": "Jo\xe3o Lenon",\n    },\n    {\n      "id": 2,\n      "name": "Thais Gabriela",\n    }\n  ],\n  "headers": { \ud83d\udc48 // The response header\n    "Content-Type": "application/json"\n  }\n}\n')),(0,o.kt)("h4",{id:"fakeapiregisterfolder"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::registerFolder()")),(0,o.kt)("p",null,"Recursively register all the ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," files of some folder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nawait FakeApi.registerFolder(Path.resources('fake-api'))\n")),(0,o.kt)("h4",{id:"fakeapibuild"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::build()")),(0,o.kt)("p",null,"Use this method to programatically build the routes u\nsing the builder pattern:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\nimport type { RouteOptions } from 'fastify'\n\nconst options: RouteOptions = {}\nconst fakeApiBuilder = FakeApi.build()\n\nconst users = [\n  {\n    id: 1,\n    name: 'Jo\xe3o Lenon',\n  },\n  {\n    id: 2,\n    name: 'Thais Gabriela',\n  }\n]\n\nfakeApiBuilder\n  .path('/users')\n  .method('GET')\n  .statusCode(200)\n  .body(users)\n  .header({ 'Content-Type': 'application/json' })\n  .register(options)\n")),(0,o.kt)("h3",{id:"file"},"File"),(0,o.kt)("h4",{id:"fileload--fileloadsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.load()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.loadSync()")),(0,o.kt)("p",null,"Creates the file is does not exist and also load the file information:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst existent = new File(Path.storage('existent.txt'))\nconst nonExistent = new File('./nonExistent.txt', 'File content')\n\n// Load the file info and content.\nawait existent.load({ withContent: true })  \ud83d\udc48\n\n// Create and load the file info without the \n// content (be careful when loading big files).\nnonExistent.loadSync() \ud83d\udc48\n")),(0,o.kt)("p",null,"After loading process, the file will contain new informations:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"createdAt - The date when the file was created."),(0,o.kt)("li",{parentName:"ul"},"accessedAt - The date when the file was last accessed."),(0,o.kt)("li",{parentName:"ul"},"modifiedAt - The date when the file was last modified."),(0,o.kt)("li",{parentName:"ul"},"fileSize - The size of the file in MB."),(0,o.kt)("li",{parentName:"ul"},"content - The content of the file as ",(0,o.kt)("inlineCode",{parentName:"li"},"Buffer")," if ",(0,o.kt)("inlineCode",{parentName:"li"},"withContent")," was ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,o.kt)("h4",{id:"filecopy--filecopysync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.copy()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.copySync()")),(0,o.kt)("p",null,"Create a copy of the file in other location or with other name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst copiedFile = file.copySync('./copy-of-file.txt')\nconst copiedFile = await file.copy(Path.storage('copy-of-file.txt'))\n")),(0,o.kt)("p",null,"To copy the file and load the content of the copy set the ",(0,o.kt)("inlineCode",{parentName:"p"},"withContent"),"\nas ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst copiedFile = await file.copy(Path.storage('copy-of-file.txt'), {\n  withContent: true \ud83d\udc48\n})\n")),(0,o.kt)("p",null,"When copying the file you can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to create\na file with fake name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst copiedFile = await file.copy(Path.storage('copy-of-file.txt'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,o.kt)("h4",{id:"filemove--filemovesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.move()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.moveSync()")),(0,o.kt)("p",null,"Move the file to other location:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst movedFile = file.moveSync('./move-of-file.txt')               \ud83d\udc48\nconst movedFile = await file.move(Path.storage('move-of-file.txt')) \ud83d\udc48\n")),(0,o.kt)("p",null,"To move the file and load the content of the move set the ",(0,o.kt)("inlineCode",{parentName:"p"},"withContent"),"\nas ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst movedFile = await file.move(Path.storage('move-of-file.txt'), {\n  withContent: true \ud83d\udc48\n})\n")),(0,o.kt)("p",null,"When moving the file you can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to create\na file with fake name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst movedFile = await file.move(Path.storage('file-path.txt'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,o.kt)("h4",{id:"fileremove--fileremovesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.remove()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.removeSync()")),(0,o.kt)("p",null,"Delete a file from the file system:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nfile.removeSync()   \ud83d\udc48\nawait file.remove() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filesetcontent--filesetcontentsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.setContent()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.setContentSync()")),(0,o.kt)("p",null,"Set the content of a file overwriting the existing content:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', 'Hello')\n\nfile.setContentSync('Hello World!')   \ud83d\udc48\nawait file.setContent('Hello World!') \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filegetcontent--filegetcontentsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContent()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentSync()")),(0,o.kt)("p",null,"Get the content of a file as ",(0,o.kt)("inlineCode",{parentName:"p"},"Buffer"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentBuffer = file.getContentSync()   \ud83d\udc48\nconst contentBuffer = await file.getContent() \ud83d\udc48\n")),(0,o.kt)("p",null,"To save the content of the file in the instance set the ",(0,o.kt)("inlineCode",{parentName:"p"},"saveContent")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst content = await file.getContent({ saveContent: true }) \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filegetcontentasstring--filegetcontentasstringsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsString()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsStringSync()")),(0,o.kt)("p",null,"Same behavior of ",(0,o.kt)("inlineCode",{parentName:"p"},"getContent()"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"getContentSync()"),", but return the content\nas ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentString = file.getContentAsStringSync()   \ud83d\udc48\nconst contentString = await file.getContentAsString() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filegetcontentasjson--filegetcontentasjsonsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsJson()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsJsonSync()")),(0,o.kt)("p",null,"Same behavior of ",(0,o.kt)("inlineCode",{parentName:"p"},"getContent()"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"getContentSync()"),", but return the content as\n",(0,o.kt)("inlineCode",{parentName:"p"},"object")," if the content is a valid JSON string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentJSON = file.getContentAsJsonSync()   \ud83d\udc48\nconst contentJSON = await file.getContentAsJson() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filegetcontentasbuilder--filegetcontentasbuildersync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsBuilder()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsBuilderSync()")),(0,o.kt)("p",null,"Same behavior of ",(0,o.kt)("inlineCode",{parentName:"p"},"getContent()"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"getContentSync()"),", but return the content as\nan ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#object-builder"},(0,o.kt)("inlineCode",{parentName:"a"},"ObjectBuilder"))," instance if the\ncontent is a valid JSON string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentObjectBuilder = file.getContentAsBuilderSync()   \ud83d\udc48\nconst contentObjectBuilder = await file.getContentAsBuilder() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"fileappend--fileappendsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.append()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.appendSync()")),(0,o.kt)("p",null,"Add content to the end of the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', 'Hello')\n\nfile.appendSync(' World') \ud83d\udc48\nawait file.append('!\\n')  \ud83d\udc48\n")),(0,o.kt)("h4",{id:"fileprepend--fileprependsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.prepend()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.prependSync()")),(0,o.kt)("p",null,"Add content to the top of the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', 'World')\n\nfile.prependSync('ello ') \ud83d\udc48\nawait file.prepend('H')   \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filecreatereadstream"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.createReadStream()")),(0,o.kt)("p",null,"Create a ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/stream.html#readable-streams"},"readable stream"),"\ninstance of the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const stream = file.createReadStream()\n")),(0,o.kt)("h4",{id:"filecreatewritestream"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.createWriteStream()")),(0,o.kt)("p",null,"Create a ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/stream.html#writable-streams"},"writable stream"),"\ninstance of the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const stream = file.createWriteStream()\n")),(0,o.kt)("h4",{id:"filetojson"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.toJSON()")),(0,o.kt)("p",null,"Get the informations of the file as JSON:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const infos = file.toJSON() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"fileimport"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.import()")),(0,o.kt)("p",null,"Import the file path if is a valid module:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.js', \"console.log('hello')\")\n\nconst module = await file.import() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filesafeimport"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.safeImport()")),(0,o.kt)("p",null,"Same as ",(0,o.kt)("inlineCode",{parentName:"p"},"import()")," method, but if the file is not a valid module the exception\nwill be ignored:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', \"console.log('hello')\")\n\nconst module = await file.safeImport() \ud83d\udc48\n")),(0,o.kt)("p",null,"Importing files that got any errors like syntax errors will also not throw:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.js', \"console.log('hello\")\n\nconst module = await file.safeImport() \ud83d\udc48 // Nothing happens\n")),(0,o.kt)("h4",{id:"filesaferemove"},(0,o.kt)("inlineCode",{parentName:"h4"},"File::safeRemove()")),(0,o.kt)("p",null,"Call for a delete operation without worrying about exceptions because the file\ndoes not exist:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nawait File.safeRemove(Path.storage('file.txt'))      \ud83d\udc48\nawait File.safeRemove(Path.storage('not-found.txt')) \ud83d\udc48 // Will not throw\n")),(0,o.kt)("h4",{id:"fileexists--fileexistssync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File::exists()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File::existsSync()")),(0,o.kt)("p",null,"Verify if a file exists or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (File.existsSync('package.json')) {\n  // do something\n}\n\nif (await File.exists('package.json')) {\n  // do something\n}\n")),(0,o.kt)("h4",{id:"fileisfile--fileisfilesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File::isFile()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File::isFileSync()")),(0,o.kt)("p",null,"Verify if a file is a valid file or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (File.isFileSync('package.json')) {\n  // do something\n}\n\nif (await File.isFile('package.json')) {\n  // do something\n}\n")),(0,o.kt)("h4",{id:"filecreatefileofsize"},(0,o.kt)("inlineCode",{parentName:"h4"},"File::createFileOfSize()")),(0,o.kt)("p",null,"Create a fake file with determined size for testing purposes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const file = await File.createFileOfSize('fake.js', 1024 * 1024 * 100) \ud83d\udc48\n")),(0,o.kt)("h3",{id:"folder"},"Folder"),(0,o.kt)("h4",{id:"folderload--folderloadsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.load()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.loadSync()")),(0,o.kt)("p",null,"Creates the folder if it does not exist and also load the folder information:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst existent = new Folder(Path.storage('existent'))\nconst nonExistent = new Folder('./nonExistent')\n\n// Load the folder info with sub folders and with file contents.\nawait existent.load({ withSub: true, withContent: true })  \ud83d\udc48\n\n// Create and load the folder info without the \n// content (be careful when loading big files).\nnonExistent.loadSync() \ud83d\udc48\n")),(0,o.kt)("p",null,"After loading process, the folder will contain new informations:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"createdAt - The date when the folder was created."),(0,o.kt)("li",{parentName:"ul"},"accessedAt - The date when the folder was last accessed."),(0,o.kt)("li",{parentName:"ul"},"modifiedAt - The date when the folder was last modified."),(0,o.kt)("li",{parentName:"ul"},"folderSize - The size of the folder in MB.")),(0,o.kt)("h4",{id:"foldercopy--foldercopysync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.copy()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.copySync()")),(0,o.kt)("p",null,"Create a copy of the folder in other location or with other name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst copiedFolder = folder.copySync('./copy-of-folder')\nconst copiedFolder = await folder.copy(Path.storage('copy-of-folder'))\n")),(0,o.kt)("p",null,"To copy the folder and load the sub folders and the content of the\ncopy set the ",(0,o.kt)("inlineCode",{parentName:"p"},"withSub")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"withContent")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst copiedFolder = await folder.copy(Path.storage('copy-of-folder'), {\n  withSub: true,    \ud83d\udc48\n  withContent: true \ud83d\udc48\n})\n")),(0,o.kt)("p",null,"When copying the folder you can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to copy the\nfiles with fake names:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst copiedFolder = await folder.copy(Path.storage('copy-of-file'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,o.kt)("h4",{id:"foldermove--foldermovesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.move()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.moveSync()")),(0,o.kt)("p",null,"Move the folder to other location:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst movedFolder = folder.moveSync('./move-of-folder')               \ud83d\udc48\nconst movedFolder = await folder.move(Path.storage('move-of-folder')) \ud83d\udc48\n")),(0,o.kt)("p",null,"To move the folder and load the sub folders and the content of the\nmove set the ",(0,o.kt)("inlineCode",{parentName:"p"},"withSub")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"withContent")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst movedFolder = await folder.move(Path.storage('move-of-folder'), {\n  withSub: true,    \ud83d\udc48\n  withContent: true \ud83d\udc48\n})\n")),(0,o.kt)("p",null,"When moving the folder you can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to move the\nfiles with fake names:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst movedFolder = await folder.move(Path.storage('file-path'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,o.kt)("h4",{id:"folderremove--folderremovesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.remove()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.removeSync()")),(0,o.kt)("p",null,"Delete a folder from the folder system:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nfolder.removeSync()   \ud83d\udc48\nawait folder.remove() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"foldertojson"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.toJSON()")),(0,o.kt)("p",null,"Get the informations of the folder as JSON:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const infos = folder.toJSON() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"foldergetfilesbypattern"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.getFilesByPattern()")),(0,o.kt)("p",null,"Get all the files of a folder using a glob pattern:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const files = folder.getFilesByPattern('**/*.js') \ud83d\udc48\n")),(0,o.kt)("h4",{id:"foldergetfoldersbypattern"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.getFoldersByPattern()")),(0,o.kt)("p",null,"Get all the folders of a folder using a glob pattern:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const folders = folder.getFoldersByPattern('**/*') \ud83d\udc48\n")),(0,o.kt)("h4",{id:"foldersaferemove"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::safeRemove()")),(0,o.kt)("p",null,"Call for a delete operation without worrying about exceptions because the folder\ndoes not exist:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nawait Folder.safeRemove(Path.storage('folder'))    \ud83d\udc48\nawait Folder.safeRemove(Path.storage('not-found')) \ud83d\udc48 // Will not throw\n")),(0,o.kt)("h4",{id:"folderexists--folderexistssync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::exists()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::existsSync()")),(0,o.kt)("p",null,"Verify if a folder exists or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (Folder.existsSync('app')) {\n  // do something\n}\n\nif (await Folder.exists('app')) {\n  // do something\n}\n")),(0,o.kt)("h4",{id:"folderisfolder--folderisfoldersync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::isFolder()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::isFolderSync()")),(0,o.kt)("p",null,"Verify if a folder is a valid folder or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (Folder.isFolderSync('app')) {\n  // do something\n}\n\nif (await Folder.isFolder('app')) {\n  // do something\n}\n")),(0,o.kt)("h4",{id:"foldersize--foldersizesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::size()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::sizeSync()")),(0,o.kt)("p",null,"Get the size of the folder in MB:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (Folder.sizeSync('app') === 100) {\n  // do something\n}\n\nif (await Folder.size('app')  === 100) {\n  // do something\n}\n")),(0,o.kt)("h3",{id:"httpclient"},"HttpClient"),(0,o.kt)("p",null,"Coming soon"),(0,o.kt)("h3",{id:"is"},"Is"),(0,o.kt)("p",null,"Coming soon"),(0,o.kt)("h3",{id:"json"},"Json"),(0,o.kt)("h4",{id:"jsonbuilder"},(0,o.kt)("inlineCode",{parentName:"h4"},"Json::builder()")),(0,o.kt)("p",null,"Create a new instance of ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#object-builder"},"ObjectBuilder"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Json } from '@athenna/common'\n\nconst builder = Json.builder({ referencedValues: false })\n")),(0,o.kt)("h4",{id:"jsoncopy"},(0,o.kt)("inlineCode",{parentName:"h4"},"Json::copy()")),(0,o.kt)("p",null,"Deep copy any object without memory reference:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Json } from '@athenna/common'\n\nconst object = { name: 'Jo\xe3o Lenon' }\nconst copiedObject = Json.copy(object)\n\nobject.name = 'Victor Tesoura'\n\nconsole.log(object.name === copiedObject.name) // false\n")),(0,o.kt)("h4",{id:"jsongetjson"},(0,o.kt)("inlineCode",{parentName:"h4"},"Json::getJson()")),(0,o.kt)("p",null,"Find all JSON values inside a string and return it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Json } from \'@athenna/common\'\n\nconst string = \'Hello { "name": "Jo\xe3o Lenon" }\'\nconst arrayOfFoundJson = Json.getJson(string)\n// [\'{"name":"Jo\xe3o Lenon"}\']\n')),(0,o.kt)("h4",{id:"jsonparse"},(0,o.kt)("inlineCode",{parentName:"h4"},"Json::parse()")),(0,o.kt)("p",null,"Safe parse a JSON string. If the JSON is not valid,\nreturns ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Json } from '@athenna/common'\n\nconst string = 'Hello { \"name\": \"Lenon\" }'\nconst json = Json.parse(string) // null\n\nconsole.log('{ \"name\": \"Lenon\" }') // { name: 'Lenon' }\n")),(0,o.kt)("h4",{id:"jsonobservechanges"},(0,o.kt)("inlineCode",{parentName:"h4"},"Json::observeChanges()")),(0,o.kt)("p",null,"Observe any change done inside an object and execute some closure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Json } from '@athenna/common'\n\nconst object = { name: 'Lenon' }\n\nJson.observeChanges(object, (value) => {\n  console.log('Object changed!', value)\n})\n\nobject.name = 'Jo\xe3o Lenon'\n")),(0,o.kt)("h4",{id:"jsonfillable"},(0,o.kt)("inlineCode",{parentName:"h4"},"Json::fillable()")),(0,o.kt)("p",null,"Remove all keys from data that is not inside the array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Json } from '@athenna/common'\n\nconst data = {\n  name: 'Jo\xe3o Lenon',\n  age: 22,\n  role: 'admin',\n  deletedAt: new Date()\n}\n\nconst parsedData = Json.fillable(data, ['name', 'age'])\n// { name: 'Jo\xe3o Lenon', age: 22 }\n")),(0,o.kt)("h4",{id:"jsonget"},(0,o.kt)("inlineCode",{parentName:"h4"},"Json::get()")),(0,o.kt)("p",null,"Get the object properties using dot notation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Json } from '@athenna/common'\n\nconst object = {\n  name: 'Jo\xe3o Lenon',\n  age: 22,\n  role: 'admin',\n  deletedAt: new Date(),\n  configs: {\n    theme: 'dark',\n    language: 'en'\n  }\n}\n\nJson.get(object, 'name') // Jo\xe3o Lenon\nJson.get(object, 'configs.theme') // dark\n")),(0,o.kt)("h3",{id:"module"},"Module"),(0,o.kt)("p",null,"Coming soon"),(0,o.kt)("h3",{id:"number"},"Number"),(0,o.kt)("h4",{id:"numbergethigher"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::getHigher()")),(0,o.kt)("p",null,"Get the higher number of an array of numbers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst higher = Number.getHigher([1, 2, 3, 4, 5]) // 5\n")),(0,o.kt)("h4",{id:"numbergetkmradius"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::getKmRadius()")),(0,o.kt)("p",null,"Get km radius between two coordinates:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst centerCord = { \n  latitude: -25503207, \n  longitude: -545390592 \n}\n\nconst pointCord = { \n  latitude: -254957901, \n  longitude: -545671577 \n}\n\nconst radius = Number.getKmRadius(centerCord, pointCord)\n// 5338.683217695541\n")),(0,o.kt)("h4",{id:"numbergetlower"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::getLower()")),(0,o.kt)("p",null,"Get the lower number of an array of numbers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst lower = Number.getLower([1, 2, 3, 4, 5]) // 1\n")),(0,o.kt)("h4",{id:"numberextractnumber"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::extractNumber()")),(0,o.kt)("p",null,"Extract all numbers inside a string and return as\na unique number:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst string = 'Hello 123 World 456'\nconst number = Number.extractNumber(string) // 123456\n")),(0,o.kt)("h4",{id:"numberextractnumbers"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::extractNumbers()")),(0,o.kt)("p",null,"Extract all numbers inside a string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst string = 'Hello 123 World 456'\nconst numbers = Number.extractNumbers(string) // ['123', '456']\n")),(0,o.kt)("h4",{id:"numberargsaverage"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::argsAverage()")),(0,o.kt)("p",null,"Get the average of all numbers in function arguments:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst average = Number.argsAverage(1, 2, 3, 4, 5) // 3\n")),(0,o.kt)("h4",{id:"numberarrayaverage"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::arrayAverage()")),(0,o.kt)("p",null,"Get the average of all numbers in an array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst average = Number.argsAverage([1, 2, 3, 4, 5]) // 3\n")),(0,o.kt)("h4",{id:"numberrandomintfrominterval"},(0,o.kt)("inlineCode",{parentName:"h4"},"Number::randomIntFromInterval()")),(0,o.kt)("p",null,"Generate a random integer number between two numbers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Number } from '@athenna/common'\n\nconst random = Number.randomIntFromInterval(1, 10) // 5\n")),(0,o.kt)("h3",{id:"objectbuilder"},"ObjectBuilder"),(0,o.kt)("h4",{id:"new-objectbuilder"},(0,o.kt)("inlineCode",{parentName:"h4"},"new ObjectBuilder()")),(0,o.kt)("p",null,"Create a new instance of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder({ \n  // Dont create memory referenced values.\n  referencedValues: false,\n  // Dont ignore null values when calling `set()` method.\n  ignoreNull: false,\n  // Ignore undefined values when calling `set()` method.\n  ignoreUndefined: true,\n  // Default value to set if value is undefined on calling `set()` method.\n  defaultValue: 'Hello World' \n})\n\nconst key = 'name'\nconst value = 'Jo\xe3o Lenon'\nconst defaultValue = 'User Name'\n\nbuilder.set(key, value, defaultValue)\nconsole.log(builder.get(key)) // Jo\xe3o Lenon\n\nbuilder.set(key, undefined)\nconsole.log(builder.get(key)) // Hello World\n")),(0,o.kt)("h4",{id:"objectbuilderset"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.set()")),(0,o.kt)("p",null,"Set a value to the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Jo\xe3o Lenon', age: 22, options: { role: 'admin' } })\n\nconsole.log(builder.get())\n// { name: 'Jo\xe3o Lenon', age: 22, options: { role: 'admin' } }\n")),(0,o.kt)("p",null,"Set a value to the object builder using dot notation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\nconst defaultValue = null\n\nbuilder.set('name', 'Jo\xe3o Lenon', defaultValue)\nbuilder.set('age', 22, defaultValue)\nbuilder.set('deletedAt', undefined, defaultValue)\nbuilder.set('options.role', 'admin', defaultValue)\n\nconsole.log(builder.get())\n// { name: 'Jo\xe3o Lenon', age: 22, deletedAt: null, options: { role: 'admin' } }\n")),(0,o.kt)("h4",{id:"objectbuilderdelete"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.delete()")),(0,o.kt)("p",null,"Delete a value from the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\nbuilder.delete('name')\n")),(0,o.kt)("h4",{id:"objectbuilderget"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.get()")),(0,o.kt)("p",null,"Get the value of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon', options: { role: 'admin' } })\n\nconsole.log(builder.get('name')) // Lenon\nconsole.log(builder.get('options.role')) // admin\n")),(0,o.kt)("h4",{id:"objectbuilderkeys"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.keys()")),(0,o.kt)("p",null,"Get all the keys of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nconsole.log(builder.keys()) // ['name']\n")),(0,o.kt)("h4",{id:"objectbuildervalues"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.values()")),(0,o.kt)("p",null,"Get all the values of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nconsole.log(builder.values()) // ['Lenon']\n")),(0,o.kt)("h4",{id:"objectbuilderentries"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.entries()")),(0,o.kt)("p",null,"Get all the entries of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nconsole.log(builder.entries()) // [['name', 'Lenon']]\n")),(0,o.kt)("h4",{id:"objectbuilderforeachkey"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.forEachKey()")),(0,o.kt)("p",null,"Iterate over all the keys of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nbuilder.forEachKey((key) => {\n  console.log(key) // name\n})\n")),(0,o.kt)("h4",{id:"objectbuilderforeachvalue"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.forEachValue()")),(0,o.kt)("p",null,"Iterate over all the values of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nbuilder.forEachValue((value) => {\n  console.log(value) // Lenon\n})\n")),(0,o.kt)("h4",{id:"objectbuilderforeachentry"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.forEachEntry()")),(0,o.kt)("p",null,"Iterate over all the entries of the object builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nbuilder.forEachEntry(([key, value]) => {\n  console.log(key, value) // name Lenon\n})\n")),(0,o.kt)("h4",{id:"objectbuilderis--objectbuilderisnot"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.is()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.isNot()")),(0,o.kt)("p",null,"Verify if the object key path is or not the same value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nbuilder.is('name', 'Lenon') // true\nbuilder.isNot('name', 'Lenon') // false\n")),(0,o.kt)("h4",{id:"objectbuilderexists--objectbuildernotexists"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.exists()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.notExists()")),(0,o.kt)("p",null,"Verify if the object key path exists or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon' })\n\nbuilder.exists('name') // true\nbuilder.notExists('name') // false\n")),(0,o.kt)("h4",{id:"objectbuilderexistsall--objectbuildernotexistsall"},(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.existsAll()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"ObjectBuilder.notExistsAll()")),(0,o.kt)("p",null,"Verify if all the object key paths exists or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectBuilder } from '@athenna/common'\n\nconst builder = new ObjectBuilder()\n\nbuilder.set({ name: 'Lenon', age: 22 })\n\nbuilder.existsAll(['name', 'age']) // true\nbuilder.notExistsAll('name', 'age') // false\n")),(0,o.kt)("h3",{id:"options"},"Options"),(0,o.kt)("h4",{id:"optionscreate"},(0,o.kt)("inlineCode",{parentName:"h4"},"Options::create()")),(0,o.kt)("p",null,"Creates an option object with default values:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Options } from '@athenna/common'\n\ntype Options = {\n  opts1?: boolean\n  opts2?: string\n}\n\nfunction doSomething(options: Options = {}) {\n  options = Options.create(options, {\n    opts1: true,\n    opts2: 'Hello World'\n  }) // { opts1: false, opts2: 'Hello World' }\n}\n\ndoSomething({ opts1: false })\n")),(0,o.kt)("h4",{id:"optionsbind"},(0,o.kt)("inlineCode",{parentName:"h4"},"Options::bind()")),(0,o.kt)("p",null,"Return a closure of the object with the same object\ninstance binded on it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Options } from '@athenna/common'\n\nclass Person {\n  constructor(public name: string) {}\n\n  greet() {\n    console.log(`Hello ${this.name}`)\n  }\n}\n\nconst closure = Options.bind(new Person('Jo\xe3o'), 'greet')\n\nclosure() // Hello Jo\xe3o\n")),(0,o.kt)("h4",{id:"optionswhendefined"},(0,o.kt)("inlineCode",{parentName:"h4"},"Options.whenDefined()")),(0,o.kt)("p",null,"Execute some closure only when something is defined:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Is, Options } from '@athenna/common'\n\nOptions.whenDefined('Helloo', (statement) => {\n  console.log(statement) // Helloo\n})\n")),(0,o.kt)("h3",{id:"parser"},"Parser"),(0,o.kt)("h4",{id:"parserstringtoarray"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::stringToArray()")),(0,o.kt)("p",null,"Parse a string to an array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst string = 'hello-world-!'\nconst separator = '-'\n\nconst array = Parser.stringToArray(string, separator)\n// ['hello', 'world', '!']\n")),(0,o.kt)("h4",{id:"parserarraytostring"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::arrayToString()")),(0,o.kt)("p",null,"Parse an array of strings to a string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst array = ['hello', 'world', '!']\nconst string = Parser.arrayToString(array, { separator: '-' })\n// 'hello-world-!'\n")),(0,o.kt)("h4",{id:"parserstringtonumber"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::stringToNumber()")),(0,o.kt)("p",null,"Parse a string to a integer or float number:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst integer = Parser.stringToNumber('12345')\n// 12345\n\nconst float = Parser.stringToNumber('100.000,000000')\n// 100000000000\n")),(0,o.kt)("p",null,"You can also set that the string is a coordinate to force\nparsing to a float:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst isCoordinate = true\nconst float = Parser.stringToNumber('15,23456', isCoordinate)\n")),(0,o.kt)("h4",{id:"parserjsontoformdata"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::jsonToFormData()")),(0,o.kt)("p",null,"Parse an object to form data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst formData = Parser.jsonToFormData({\n  name: 'Jo\xe3o Lenon',\n  age: 22,\n})\n// &name=Jo\xe3o%20Lenon&age=22\n")),(0,o.kt)("h4",{id:"parserformdatatojson"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::formDataToJson()")),(0,o.kt)("p",null,"Parse form data to an object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst json = Parser.formDataToJson('&name=Jo\xe3o%20Lenon&age=22')\n// { name: 'Jo\xe3o Lenon', age: '22' }\n")),(0,o.kt)("h4",{id:"parserlinktohref"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::linkToHref()")),(0,o.kt)("p",null,"Parse all links inside the string to HTML link with ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," tag:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst string = 'Visit my website https://athenna.io'\nconst html = Parser.linkToHref(string)\n// Visit my website <a href=\"https://athenna.io\">https://athenna.io</a>\n")),(0,o.kt)("h4",{id:"parsersizetobyte"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::sizeToByte()")),(0,o.kt)("p",null,"Parse a number to byte format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst size = Parser.sizeToByte(1024)\n// 1.00 KB\n")),(0,o.kt)("h4",{id:"parserbytetosize"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::byteToSize()")),(0,o.kt)("p",null,"Parse a byte to number format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst size = Parser.byteToSize('1.00 KB')\n// 1024\n")),(0,o.kt)("h4",{id:"parsertimetoms"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::timeToMs()")),(0,o.kt)("p",null,"Parse a time to milliseconds:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst ms = Parser.timeToMs('1s')\n// 1000\n")),(0,o.kt)("h4",{id:"parsermstotime"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::msToTime()")),(0,o.kt)("p",null,"Parse milliseconds to time:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst ms = Parser.msToTime(1000)\n// 1s\n")),(0,o.kt)("h4",{id:"parserstatuscodetoreason"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::statusCodeToReason()")),(0,o.kt)("p",null,"Parse a status code to a reason string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst reason = Parser.statusCodeToReason(200)\n// OK\n")),(0,o.kt)("h4",{id:"parserreasontostatuscode"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::reasonToStatusCode()")),(0,o.kt)("p",null,"Parse reason to a status code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst statusCode = Parser.reasonToStatusCode('OK')\n// 200\n")),(0,o.kt)("h4",{id:"parserdburltoconnectionobj"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::dbUrlToConnectionObj()")),(0,o.kt)("p",null,"Parses a database url to a connection object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst url = 'mysql://user:pass@localhost:3306/database?hello=true'\nconst connection = Parser.dbUrlToConnectionObj(url)\n// { \n//    protocol: 'mysql', \n//    user: 'user', \n//    password: 'pass', \n//    host: 'localhost', \n//    port: 3306, \n//    database: 'database', \n//    options: { hello: 'true' } \n// }\n")),(0,o.kt)("h4",{id:"parserconnectionobjtodburl"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::connectionObjToDbUrl()")),(0,o.kt)("p",null,"Parses a connection object to a database url:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst connectionObj = { \n   protocol: 'mysql', \n   user: 'user', \n   password: 'pass', \n   host: 'localhost', \n   port: 3306, \n   database: 'database', \n   options: { hello: 'true' } \n}\n\nconst url = Parser.connectionObjToDbUrl(connectionObj)\n// mysql://user:pass@localhost:3306/database?hello=true\n")),(0,o.kt)("h4",{id:"parserobjecttobuilder"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::objectToBuilder()")),(0,o.kt)("p",null,"Parse an object to an ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#object-builder"},(0,o.kt)("inlineCode",{parentName:"a"},"ObjectBuilder"))," instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst object = { name: 'Jo\xe3o Lenon', age: 22 }\nconst builder = Parser.objectToBuilder(object)\n")),(0,o.kt)("h4",{id:"parserarrayobjecttoarraybuilder"},(0,o.kt)("inlineCode",{parentName:"h4"},"Parser::arrayObjectToArrayBuilder()")),(0,o.kt)("p",null,"Parse an array of objects to an array of ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#object-builder"},(0,o.kt)("inlineCode",{parentName:"a"},"ObjectBuilder"))," instances:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Parser } from '@athenna/common'\n\nconst array = [{ name: 'Jo\xe3o Lenon', age: 22 }]\nconst builders = Parser.arrayObjectToArrayBuilder(array)\n")),(0,o.kt)("h3",{id:"path"},"Path"),(0,o.kt)("h4",{id:"pathdirs"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::dirs")),(0,o.kt)("p",null,"An object with all base directories that ",(0,o.kt)("inlineCode",{parentName:"p"},"Path")," uses to create\nfull paths:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.dirs.services) // app/services\nconsole.log(Path.dirs.controllers) // app/http/controllers\nconsole.log(Path.dirs.bootstrap) // bootstrap\n")),(0,o.kt)("h4",{id:"pathmergedirs"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::mergeDirs()")),(0,o.kt)("p",null,"Merge the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs")," object with a new object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.mergeDirs({\n  services: 'app/internal/services',\n  controllers: 'app/internal/http/controllers',\n  bootstrap: 'bin',\n})\n")),(0,o.kt)("h4",{id:"pathext"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::ext()")),(0,o.kt)("p",null,"Return the default extension that the application is using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nprocess.env.IS_TS = 'true'\n\nconsole.log(Path.ext()) // ts\n\nprocess.env.IS_TS = 'false'\n\nconsole.log(Path.ext()) // js\n")),(0,o.kt)("h4",{id:"pathpwd"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::pwd()")),(0,o.kt)("p",null,"Return the root path where the project is running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.pwd()) // /home/user/athenna-project\n")),(0,o.kt)("h4",{id:"pathsrc"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::src()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.src"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.src()) // /home/user/athenna-project/src\n")),(0,o.kt)("h4",{id:"pathsetsrc"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setSrc()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.src")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setSrc('src/app')\n")),(0,o.kt)("h4",{id:"pathbin"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::bin()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.bin"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.bin()) // /home/user/athenna-project/bin\n")),(0,o.kt)("h4",{id:"pathsetbin"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setBin()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.bin")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setBin('bin/app')\n")),(0,o.kt)("h4",{id:"pathapp"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::app()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.app"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.app()) // /home/user/athenna-project/app\n")),(0,o.kt)("h4",{id:"pathsetapp"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setApp()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.app")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setApp('app/app')\n")),(0,o.kt)("h4",{id:"pathboostrap"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::boostrap()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.boostrap"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.boostrap()) // /home/user/athenna-project/boostrap\n")),(0,o.kt)("h4",{id:"pathsetbootstrap"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setBootstrap()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.bootstrap")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setBootstrap('bootstrap/app')\n")),(0,o.kt)("h4",{id:"pathconfig"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::config()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.config"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.config()) // /home/user/athenna-project/config\n")),(0,o.kt)("h4",{id:"pathsetconfig"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setConfig()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.config")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setConfig('config/app')\n")),(0,o.kt)("h4",{id:"pathdatabase"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::database()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.database"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.database()) // /home/user/athenna-project/database\n")),(0,o.kt)("h4",{id:"pathsetdatabase"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setDatabase()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.database")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setDatabase('database/app')\n")),(0,o.kt)("h4",{id:"pathlang"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::lang()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.lang"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.lang()) // /home/user/athenna-project/lang\n")),(0,o.kt)("h4",{id:"pathsetlang"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setLang()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.lang")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setLang('lang/app')\n")),(0,o.kt)("h4",{id:"pathnodemodules"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::nodeModules()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.nodeModules"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.nodeModules()) // /home/user/athenna-project/nodeModules\n")),(0,o.kt)("h4",{id:"pathsetnodemodules"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setNodeModules()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.nodeModules")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setNodeModules('node_modules/app')\n")),(0,o.kt)("h4",{id:"pathproviders"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::providers()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.providers"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.providers()) // /home/user/athenna-project/providers\n")),(0,o.kt)("h4",{id:"pathsetproviders"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setProviders()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.providers")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setProviders('providers/app')\n")),(0,o.kt)("h4",{id:"pathfacades"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::facades()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.facades"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.facades()) // /home/user/athenna-project/providers/facades\n")),(0,o.kt)("h4",{id:"pathsetfacades"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setFacades()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.facades")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setFacades('pfacades/app')\n")),(0,o.kt)("h4",{id:"pathpublic"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::public()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.public"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.public()) // /home/user/athenna-project/public\n")),(0,o.kt)("h4",{id:"pathsetpublic"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setPublic()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.public")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setPublic('public/app')\n")),(0,o.kt)("h4",{id:"pathresources"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::resources()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.resources"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.resources()) // /home/user/athenna-project/resources\n")),(0,o.kt)("h4",{id:"pathsetresources"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setResources()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.resources")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setResources('resources/app')\n")),(0,o.kt)("h4",{id:"pathroutes"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::routes()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.routes"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.routes()) // /home/user/athenna-project/routes\n")),(0,o.kt)("h4",{id:"pathsetroutes"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setRoutes()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.routes")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setRoutes('routes/app')\n")),(0,o.kt)("h4",{id:"pathstorage"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::storage()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.storage"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.storage()) // /home/user/athenna-project/storage\n")),(0,o.kt)("h4",{id:"pathsetstorage"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setStorage()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.storage")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setStorage('storage/app')\n")),(0,o.kt)("h4",{id:"pathtests"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::tests()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.tests"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.tests()) // /home/user/athenna-project/tests\n")),(0,o.kt)("h4",{id:"pathsettests"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setTests()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.tests")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setTests('tests/app')\n")),(0,o.kt)("h4",{id:"pathlogs"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::logs()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.logs"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.logs()) // /home/user/athenna-project/storage/logs\n")),(0,o.kt)("h4",{id:"pathsetlogs"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setLogs()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.logs")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setLogs('logs/app')\n")),(0,o.kt)("h4",{id:"pathviews"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::views()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.views"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.views()) // /home/user/athenna-project/resources/views\n")),(0,o.kt)("h4",{id:"pathsetviews"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setViews()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.views")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setViews('views/app')\n")),(0,o.kt)("h4",{id:"pathstatic"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::static()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.static"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.static()) // /home/user/athenna-project/public/static\n")),(0,o.kt)("h4",{id:"pathsetstatic"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setStatic()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.static")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setStatic('static/app')\n")),(0,o.kt)("h4",{id:"pathassets"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::assets()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.assets"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.assets()) // /home/user/athenna-project/public/assets\n")),(0,o.kt)("h4",{id:"pathsetassets"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setAssets()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.assets")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setAssets('assets/app')\n")),(0,o.kt)("h4",{id:"pathlocales"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::locales()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.locales"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.locales()) // /home/user/athenna-project/resources/locales\n")),(0,o.kt)("h4",{id:"pathsetlocales"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setLocales()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.locales")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setLocales('locales/app')\n")),(0,o.kt)("h4",{id:"pathstubs"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::stubs()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.stubs"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.stubs()) // /home/user/athenna-project/tests/stubs\n")),(0,o.kt)("h4",{id:"pathsetstubs"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setStubs()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.stubs")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setStubs('stubs/app')\n")),(0,o.kt)("h4",{id:"pathhttp"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::http()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.http"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.http()) // /home/user/athenna-project/app/http\n")),(0,o.kt)("h4",{id:"pathsethttp"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setHttp()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.http")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setHttp('http/app')\n")),(0,o.kt)("h4",{id:"pathconsole"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::console()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.console"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.console()) // /home/user/athenna-project/app/console\n")),(0,o.kt)("h4",{id:"pathsetconsole"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setConsole()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.console")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setConsole('console/app')\n")),(0,o.kt)("h4",{id:"pathservices"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::services()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.services"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.services()) // /home/user/athenna-project/app/services\n")),(0,o.kt)("h4",{id:"pathsetservices"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setServices()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.services")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setServices('services/app')\n")),(0,o.kt)("h4",{id:"pathrepositories"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::repositories()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.repositories"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.repositories()) // /home/user/athenna-project/app/repositories\n")),(0,o.kt)("h4",{id:"pathsetrepositories"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setRepositories()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.repositories")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setRepositories('repositories/app')\n")),(0,o.kt)("h4",{id:"pathcommands"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::commands()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.commands"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.commands()) // /home/user/athenna-project/app/console/commands\n")),(0,o.kt)("h4",{id:"pathsetcommands"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setCommands()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.commands")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setCommands('commands/app')\n")),(0,o.kt)("h4",{id:"pathcontrollers"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::controllers()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.controllers"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.controllers()) // /home/user/athenna-project/app/http/controllers\n")),(0,o.kt)("h4",{id:"pathsetcontrollers"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setControllers()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.controllers")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setControllers('controllers/app')\n")),(0,o.kt)("h4",{id:"pathexceptions"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::exceptions()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.exceptions"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.exceptions()) // /home/user/athenna-project/app/exceptions\n")),(0,o.kt)("h4",{id:"pathsetexceptions"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setExceptions()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.exceptions")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setExceptions('exceptions/app')\n")),(0,o.kt)("h4",{id:"pathmiddlewares"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::middlewares()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.middlewares"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.middlewares()) // /home/user/athenna-project/app/http/middlewares\n")),(0,o.kt)("h4",{id:"pathsetmiddlewares"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setMiddlewares()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.middlewares")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setMiddlewares('middlewares/app')\n")),(0,o.kt)("h4",{id:"pathinterceptors"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::interceptors()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.interceptors"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.interceptors()) // /home/user/athenna-project/app/http/interceptors\n")),(0,o.kt)("h4",{id:"pathsetinterceptors"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setInterceptors()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.interceptors")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setInterceptors('interceptors/app')\n")),(0,o.kt)("h4",{id:"pathterminators"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::terminators()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.terminators"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.terminators()) // /home/user/athenna-project/app/http/terminators\n")),(0,o.kt)("h4",{id:"pathsetterminators"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setTerminators()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.terminators")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setTerminators('terminators/app')\n")),(0,o.kt)("h4",{id:"pathmigrations"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::migrations()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.migrations"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.migrations()) // /home/user/athenna-project/database/migrations\n")),(0,o.kt)("h4",{id:"pathsetmigrations"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setMigrations()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.migrations")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setMigrations('migrations/app')\n")),(0,o.kt)("h4",{id:"pathseeders"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::seeders()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.seeders"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.seeders()) // /home/user/athenna-project/database/seeders\n")),(0,o.kt)("h4",{id:"pathsetseeders"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setSeeders()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.seeders")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setSeeders('seeders/app')\n")),(0,o.kt)("h4",{id:"pathnodemodulesbin"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::nodeModulesBin()")),(0,o.kt)("p",null,"Merge the project root path with ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.nodeModulesBin"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.nodeModulesBin()) // /home/user/athenna-project/node_modules/.bin\n")),(0,o.kt)("h4",{id:"pathsetnodemodulesbin"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::setNodeModulesBin()")),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.dirs.nodeModulesBin")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nPath.setNodeModulesBin('node_modules/.bin/app')\n")),(0,o.kt)("h4",{id:"pathvmtmp"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::vmTmp()")),(0,o.kt)("p",null,"Return the tmp path of your vm."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.vmTmp()) // /tmp\n")),(0,o.kt)("h4",{id:"pathvmhome"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::vmHome()")),(0,o.kt)("p",null,"Return the home path of your vm."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Path } from '@athenna/common'\n\nconsole.log(Path.vmHome()) // /home/user\n")),(0,o.kt)("h4",{id:"paththis"},(0,o.kt)("inlineCode",{parentName:"h4"},"Path::this()")),(0,o.kt)("p",null,"Return the execution path of where this method is being called:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/home/user/athenna-project/app/logPath.ts"',title:'"/home/user/athenna-project/app/logPath.ts"'},"import { Path } from '@athenna/common'\n\nexport function logPath() {\n  console.log(Path.this())\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/home/user/athenna-project/bootstrap/index.ts"',title:'"/home/user/athenna-project/bootstrap/index.ts"'},"import { logPath } from '#app/logPath'\n\nlogPath() // /home/user/athenna-project/app\n")),(0,o.kt)("h3",{id:"route"},"Route"),(0,o.kt)("h4",{id:"routegetquerystring"},(0,o.kt)("inlineCode",{parentName:"h4"},"Route::getQueryString()")),(0,o.kt)("p",null,"Get the query string in form data format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route } from '@athenna/common'\n\nconst url = 'http://localhost:3000/user?name=Jo\xe3o%20Lenon&age=21'\nconst queryString = Route.getQueryString(url) // name=Jo\xe3o%20Lenon&age=21\n")),(0,o.kt)("h4",{id:"routeremovequeryparams"},(0,o.kt)("inlineCode",{parentName:"h4"},"Route::removeQueryParams()")),(0,o.kt)("p",null,"Remove the query params from the url:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route } from '@athenna/common'\n\nconst url = 'http://localhost:3000/user?name=Jo\xe3o%20Lenon&age=21'\nconst urlWithoutQueryParams = Route.removeQueryParams(url)\n// http://localhost:3000/user\n")),(0,o.kt)("h4",{id:"routegetqueryparamsvalue"},(0,o.kt)("inlineCode",{parentName:"h4"},"Route::getQueryParamsValue()")),(0,o.kt)("p",null,"Get object with ",(0,o.kt)("strong",{parentName:"p"},"?&queryParams")," values from route:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route } from '@athenna/common'\n\nconst url = 'http://localhost:3000/user?name=Jo\xe3o%20Lenon&age=21'\nconst queryParams = Route.getQueryParamsValue(url)\n// { name: 'Jo\xe3o Lenon', age: '21' }\n")),(0,o.kt)("h4",{id:"routegetqueryparamsname"},(0,o.kt)("inlineCode",{parentName:"h4"},"Route::getQueryParamsName()")),(0,o.kt)("p",null,"Get an array with ",(0,o.kt)("strong",{parentName:"p"},"?&queryParams")," names from route:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route } from '@athenna/common'\n\nconst url = 'http://localhost:3000/user?name=Jo\xe3o%20Lenon&age=21'\nconst queryParams = Route.getQueryParamsName(url)\n// ['name', 'age']\n")),(0,o.kt)("h4",{id:"routegetparamsvalue"},(0,o.kt)("inlineCode",{parentName:"h4"},"Route::getParamsValue()")),(0,o.kt)("p",null,"Get object with ",(0,o.kt)("strong",{parentName:"p"},"/:params")," values from route:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route } from '@athenna/common'\n\nconst urlWithParams = 'http://localhost:3000/user/:id'\nconst urlWithValues = 'http://localhost:3000/user/1'\n\nconst params = Route.getParamsValue(urlWithParams, urlWithValues)\n// { id: '1' }\n")),(0,o.kt)("h4",{id:"routegetparamsname"},(0,o.kt)("inlineCode",{parentName:"h4"},"Route::getParamsName()")),(0,o.kt)("p",null,"Get an array with ",(0,o.kt)("strong",{parentName:"p"},"/:params")," names from route:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route } from '@athenna/common'\n\nconst url = 'http://localhost:3000/user/:id'\n\nconst params = Route.getParamsName(url)\n// ['id']\n")),(0,o.kt)("h4",{id:"routecreatematcher"},(0,o.kt)("inlineCode",{parentName:"h4"},"Route::createMatcher()")),(0,o.kt)("p",null,"Create a RegExp matcher for a route:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route } from '@athenna/common'\n\nconst urlParams = 'http://localhost:3000/user/:id'\nconst urlValues = 'http://localhost:3000/user/1'\nconst regexp = Route.createMatcher(url)\n\nif (regexp.test(urlValues)) {\n  // routes matches, do something...\n}\n")),(0,o.kt)("h3",{id:"string"},"String"),(0,o.kt)("h4",{id:"stringgeneraterandom"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::generateRandom()")),(0,o.kt)("p",null,"Generate a random string with a determined length:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.generateRandom(10)\n")),(0,o.kt)("h4",{id:"stringtocamelcase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toCamelCase()")),(0,o.kt)("p",null,"Transforms the string to ",(0,o.kt)("strong",{parentName:"p"},"camelCase"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toCamelCase('Hello World')\n// helloWorld\n")),(0,o.kt)("h4",{id:"stringtosnakecase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toSnakeCase()")),(0,o.kt)("p",null,"Transforms the string to ",(0,o.kt)("strong",{parentName:"p"},"snake_case"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toSnakeCase('helloWorld')\n// hello_world\n")),(0,o.kt)("h4",{id:"stringtoconstantcase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toConstantCase()")),(0,o.kt)("p",null,"Transforms the string to ",(0,o.kt)("strong",{parentName:"p"},"CONSTANT_CASE"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toConstantCase('hello_world')\n// HELLO_WORLD\n")),(0,o.kt)("h4",{id:"stringtopascalcase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toPascalCase()")),(0,o.kt)("p",null,"Transforms the string to ",(0,o.kt)("strong",{parentName:"p"},"PascalCase"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toPascalCase('HELLO_WORLD')\n// HelloWorld\n")),(0,o.kt)("h4",{id:"stringtosentencecase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toSentenceCase()")),(0,o.kt)("p",null,"Transforms the string to ",(0,o.kt)("strong",{parentName:"p"},"Sentence Case"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toSentenceCase('HelloWorld')\n// Hello World\n")),(0,o.kt)("h4",{id:"stringtodotcase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toDotCase()")),(0,o.kt)("p",null,"Transforms the string to ",(0,o.kt)("strong",{parentName:"p"},"dot.case"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toDotCase('Hello World')\n// hello.world\n")),(0,o.kt)("h4",{id:"stringtodashcase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toDashCase()")),(0,o.kt)("p",null,"Transforms the string to ",(0,o.kt)("strong",{parentName:"p"},"dash-case"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toDashCase('hello.world')\n// hello-world\n")),(0,o.kt)("h4",{id:"stringtonocase"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::toNoCase()")),(0,o.kt)("p",null,"Removes all sorted cases from string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.toNoCase('Hello-World')\n// hello world\n")),(0,o.kt)("h4",{id:"stringpluralize"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::pluralize()")),(0,o.kt)("p",null,"Transforms the string to plural form:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.pluralize('cat') // cats\n")),(0,o.kt)("h4",{id:"stringsingularize"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::singularize()")),(0,o.kt)("p",null,"Transforms the string to singular form:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.singularize('cats') // cat\n")),(0,o.kt)("h4",{id:"stringordinalize"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::ordinalize()")),(0,o.kt)("p",null,"Transforms a number to your ordinal format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst string = String.ordinalize('10') // 10th\n")),(0,o.kt)("h4",{id:"stringgeneraterandomcolor"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::generateRandomColor()")),(0,o.kt)("p",null,"Generate a random color in hexadecimal format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst color = String.generateRandomColor()\n// #a0eebc\n")),(0,o.kt)("h4",{id:"stringnormalizebase64"},(0,o.kt)("inlineCode",{parentName:"h4"},"String::normalizeBase64()")),(0,o.kt)("p",null,"Normalizes the string in base64 format removing\nspecial characters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { String } from '@athenna/common'\n\nconst base64 = String.normalizeBase64('+++///===')\n// '---___'\n")),(0,o.kt)("h3",{id:"uuid"},"Uuid"),(0,o.kt)("h4",{id:"uuidgenerate"},(0,o.kt)("inlineCode",{parentName:"h4"},"Uuid::generate()")),(0,o.kt)("p",null,"Generate a UUID v4:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Uuid } from '@athenna/common'\n\nconst uuid = Uuid.generate()\n// a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n")),(0,o.kt)("p",null,"You can also generate an UUID with a prefixed string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const prefixedUuid = Uuid.generate('adm')\n// adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n")),(0,o.kt)("h4",{id:"uuidverify"},(0,o.kt)("inlineCode",{parentName:"h4"},"Uuid::verify()")),(0,o.kt)("p",null,"Verify if a string is a valid UUID v4:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Uuid } from '@athenna/common'\n\nif (Uuid.verify('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11')) {\n  // do something\n}\n")),(0,o.kt)("p",null,"You can also verify if a string is a valid UUID and if\nthe prefix matches:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const prefixedUuid = 'adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'\n\n// Verify if the string is a valid UUID and the prefix \n// is equals to adm\nif (Uuid.verify(prefixedUuid, { prefix: 'adm' })) {\n  // do something\n}\n")),(0,o.kt)("p",null,"By default, the ",(0,o.kt)("inlineCode",{parentName:"p"},"verify()")," method will ignore the prefix to verify\nif the string is a valid UUID, to avoid this set the ",(0,o.kt)("inlineCode",{parentName:"p"},"ignorePrefix"),"\noption as ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const prefixedUuid = 'adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'\n\nif (Uuid.verify(prefixedUuid, { ignorePrefix: false })) {\n  // will never enter here with the example above, \n  // only with plain UUID's.\n}\n")),(0,o.kt)("h4",{id:"uuidgettoken"},(0,o.kt)("inlineCode",{parentName:"h4"},"Uuid::getToken()")),(0,o.kt)("p",null,"Get the UUID token without the prefix:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Uuid } from '@athenna/common'\n\nconst prefixedUuid = 'adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'\nconst uuid = Uuid.getToken(prefixedUuid)\n// a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n")),(0,o.kt)("h4",{id:"uuidgetprefix"},(0,o.kt)("inlineCode",{parentName:"h4"},"Uuid::getPrefix()")),(0,o.kt)("p",null,"Get the prefix without the UUID token:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Uuid } from '@athenna/common'\n\nconst prefixedUuid = 'adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'\nconst prefix = Uuid.getPrefix(prefixedUuid) // adm\n")),(0,o.kt)("h4",{id:"uuidinjectprefix"},(0,o.kt)("inlineCode",{parentName:"h4"},"Uuid::injectPrefix()")),(0,o.kt)("p",null,"Inject a prefix in the UUID token, if the UUID token is not\nvalid, this method will throw:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Uuid } from '@athenna/common'\n\nconst uuid = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'\nconst prefixedUuid = Uuid.injectPrefix(uuid, 'adm')\n// adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n")),(0,o.kt)("h4",{id:"uuidchangeprefix"},(0,o.kt)("inlineCode",{parentName:"h4"},"Uuid::changePrefix()")),(0,o.kt)("p",null,"Change the prefix of an UUID token, if the UUID token is not\nvalid, this function will throw:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Uuid } from '@athenna/common'\n\nconst uuid = 'adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'\nconst prefixedUuid = Uuid.changePrefix(uuid, 'mng')\n// mng::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n")),(0,o.kt)("h4",{id:"uuidchangeorgenerate"},(0,o.kt)("inlineCode",{parentName:"h4"},"Uuid::changeOrGenerate()")),(0,o.kt)("p",null,"Change the prefix of an UUID token, or generate the token\nif the UUID token is ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Uuid } from '@athenna/common'\n\nconst uuid = undefined\nconst prefixedUuid = Uuid.changeOrGenerate('adm', uuid)\n// adm::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n\nconst changedPrefixUuid = Uuid.changeOrGenerate('mng', prefixedUuid)\n// mng::a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n")))}m.isMDXComponent=!0}}]);