"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[5839],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),s=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return i.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return t?i.createElement(g,o(o({ref:n},u),{},{components:t})):i.createElement(g,o({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8128:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var i=t(7462),r=t(3366),a=(t(7294),t(3905)),o=["components"],l={sidebar_position:3,id:"running",title:"Running",hide_title:!0,hide_table_of_contents:!0,tags:["Getting Started","Architecture Concepts","The Basics"]},c=void 0,s={unversionedId:"the-basics/cli/running",id:"the-basics/cli/running",title:"Running",description:"\ud83c\udfe0",source:"@site/docs/the-basics/cli/running.mdx",sourceDirName:"the-basics/cli",slug:"/the-basics/cli/running",permalink:"/docs/the-basics/cli/running",editUrl:"https://github.com/AthennaIO/Docs/docs/the-basics/cli/running.mdx",tags:[{label:"Getting Started",permalink:"/docs/tags/getting-started"},{label:"Architecture Concepts",permalink:"/docs/tags/architecture-concepts"},{label:"The Basics",permalink:"/docs/tags/the-basics"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"running",title:"Running",hide_title:!0,hide_table_of_contents:!0,tags:["Getting Started","Architecture Concepts","The Basics"]},sidebar:"tutorialSidebar",previous:{title:"Commands",permalink:"/docs/the-basics/cli/commands"},next:{title:"Logging",permalink:"/docs/the-basics/logging"}},u=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Registering your CLI command",id:"id-registering-your-cli-command",children:[],level:2},{value:"Entrypoint file",id:"id-entrypoint-file",children:[],level:2},{value:"Linking the package.json",id:"id-linking-the-packageJson",children:[],level:2}],p={toc:u};function d(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("nav",{"aria-label":"breadcrumbs"},(0,a.kt)("ul",{class:"breadcrumbs"},(0,a.kt)("li",{class:"breadcrumbs__item"},(0,a.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,a.kt)("li",{class:"breadcrumbs__item"},(0,a.kt)("a",{class:"breadcrumbs__link"},"The Basics")),(0,a.kt)("li",{class:"breadcrumbs__item"},(0,a.kt)("a",{class:"breadcrumbs__link"},"Cli")),(0,a.kt)("li",{class:"breadcrumbs__item"},(0,a.kt)("a",{class:"breadcrumbs__link",href:"/docs/the-basics/cli/running"},"Running")))),(0,a.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,a.kt)("h1",{id:"running"},"Running"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"introduction"},(0,a.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"registering-your-cli-command"},(0,a.kt)("a",{parentName:"h4",href:"#id-registering-your-cli-command"},"Registering your CLI command")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"entrypoint-file"},(0,a.kt)("a",{parentName:"h4",href:"#id-entrypoint-file"},"Entrypoint file"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"linking-the-packagejson"},(0,a.kt)("a",{parentName:"h4",href:"#id-linking-the-packageJson"},"Linking the package.json")))))),(0,a.kt)("h2",{id:"id-introduction"},"Introduction"),(0,a.kt)("p",null,"The CLI application of Athenna can run in three ways. Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"node artisan"),", the npm scripts inside package.json file\nor linking the package.json using ",(0,a.kt)("inlineCode",{parentName:"p"},"npm link"),", this way you can execute your CLI anywhere from your terminal. As node artisan\nand npm scripts comes by default in your application, we are going to focus in ",(0,a.kt)("inlineCode",{parentName:"p"},"npm link")," in this documentation."),(0,a.kt)("h2",{id:"id-registering-your-cli-command"},"Registering your CLI command"),(0,a.kt)("p",null,"To register your CLI command name you can simply add the ",(0,a.kt)("inlineCode",{parentName:"p"},"bin")," object inside your package.json file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'"bin": {\n  "yourCliCommand": "./bootstrap/main.js"\n}\n')),(0,a.kt)("h2",{id:"id-entrypoint-file"},"Entrypoint file"),(0,a.kt)("p",null,"In our example we defined the ",(0,a.kt)("inlineCode",{parentName:"p"},"./bootstrap/main.js")," file as the entrypoint file of our CLI. By default, this file\ncomes with the ",(0,a.kt)("inlineCode",{parentName:"p"},"#!/usr/bin/env node")," in the top of the file. Without this line the ",(0,a.kt)("inlineCode",{parentName:"p"},"npm link")," command will not work.\nSo just in case you want to define a different entrypoint file, remember that ",(0,a.kt)("inlineCode",{parentName:"p"},"#!/usr/bin/env node")," should be on the top\nof this file."),(0,a.kt)("h2",{id:"id-linking-the-packageJson"},"Linking the package.json"),(0,a.kt)("p",null,"Now you just need to run the following command in your project root:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npm link\n")),(0,a.kt)("p",null,"And now the ",(0,a.kt)("inlineCode",{parentName:"p"},"yourCliCommand")," will exist in your actual Node.js version:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"yourCliCommand --help\n")))}d.isMDXComponent=!0}}]);