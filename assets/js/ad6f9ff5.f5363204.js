"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[5689],{6829:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>t,metadata:()=>a,toc:()=>h});var s=o(5893),i=o(1151);const t={title:"Relationships",sidebar_position:3,description:"See how to create relations between models in Athenna Framework."},r="ORM: Relationships",a={id:"orm/relationships",title:"Relationships",description:"See how to create relations between models in Athenna Framework.",source:"@site/docs/orm/relationships.mdx",sourceDirName:"orm",slug:"/orm/relationships",permalink:"/docs/orm/relationships",draft:!1,unlisted:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/orm/relationships.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Relationships",sidebar_position:3,description:"See how to create relations between models in Athenna Framework."},sidebar:"tutorialSidebar",previous:{title:"Query Builder",permalink:"/docs/orm/query-builder"},next:{title:"Extending Models",permalink:"/docs/orm/extending-models"}},l={},h=[{value:"Defining relationships",id:"defining-relationships",level:2},{value:"One To One",id:"one-to-one",level:2},{value:"Defining the inverse of the relationship",id:"defining-the-inverse-of-the-relationship",level:3},{value:"One To Many",id:"one-to-many",level:2},{value:"Many To Many",id:"many-to-many",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"orm-relationships",children:"ORM: Relationships"}),"\n",(0,s.jsx)(n.p,{children:"See how to create relations between models in Athenna Framework."}),"\n",(0,s.jsx)(n.h2,{id:"defining-relationships",children:"Defining relationships"}),"\n",(0,s.jsx)(n.p,{children:"Database tables are often related to one another. For example, a\nblog post may have many comments or an order could be related to\nthe user who placed it. Athenna makes managing and working with\nthese relationships easy, and supports a variety of common\nrelationships that are defined as properties on your model classes\nusing annotations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import {\n  Column,\n  HasOne,\n  HasMany,\n  BaseModel,\n  BelongsTo,\n  BelongsToMany,\n  type Relation,\n} from '@athenna/database'\n\nimport { Course } from '#app/models/Course'\nimport { Profile } from '#app/models/Profile'\nimport { Comment } from '#app/models/Comment'\nimport { Customer } from '#app/models/Customer'\nimport { UsersCourses } from '#app/models/UsersCourses'\n\nexport class User extends BaseModel {\n  @Column()\n  public id: number \n\n  @HasOne(() => Profile)\n  public profile: Relation<Profile> \n\n  @HasMany(() => Comment)\n  public comments: Relation<Comment[]> \n\n  @BelongsTo(() => Customer)\n  public customer: Relation<Customer> \n\n  @BelongsToMany(() => Course, () => UsersCourses) \n  public courses: Relation<Course[]> \n}\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)(n.p,{children:"Check the full documentation of relationships annotations:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/orm/annotations#has-one",children:(0,s.jsx)(n.code,{children:"@HasOne()"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/orm/annotations#has-many",children:(0,s.jsx)(n.code,{children:"@HasMany()"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/orm/annotations#belongs-to",children:(0,s.jsx)(n.code,{children:"@BelongsTo()"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/orm/annotations#belongs-to-many",children:(0,s.jsx)(n.code,{children:"@BelongsToMany()"})})}),"\n"]})]}),"\n",(0,s.jsx)(n.p,{children:"On this documentation you will see how to setup the following\nrelationships using the above annotations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/orm/relationships#one-to-one",children:"One To One"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/orm/relationships#one-to-many",children:"One To Many"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/orm/relationships#many-to-many",children:"Many To Many"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"one-to-one",children:"One To One"}),"\n",(0,s.jsxs)(n.p,{children:["A one-to-one relationship is a very basic type of database relationship.\nFor example, a ",(0,s.jsx)(n.code,{children:"User"})," model might be associated with one ",(0,s.jsx)(n.code,{children:"Phone"})," model.\nTo define this relationship, we will place a ",(0,s.jsx)(n.code,{children:"phone"})," property on the ",(0,s.jsx)(n.code,{children:"User"}),"\nmodel and annotate it with the ",(0,s.jsx)(n.code,{children:"@HasOne()"})," annotation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Phone } from '#app/models/Phone'\nimport { Column, BaseModel, HasOne, type Relation } from '@athenna/database'\n\nexport class User extends BaseModel {\n  @Column()\n  public id: number\n\n  @HasOne(() => Phone)\n  public phone: Relation<Phone> \n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The first argument passed to the ",(0,s.jsx)(n.code,{children:"@HasOne()"})," annotation is closure\nthat return the related model class. Once the relationship is defined,\nwe may retrieve the related record using the ",(0,s.jsx)(n.code,{children:"wieth()"})," method of the\nmodel query builder:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const { phone } = await User.query()\n  .with('phone')\n  .find()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Athenna determines the foreign key of the relationship based on the\nparent model name. In this case, the ",(0,s.jsx)(n.code,{children:"Phone"})," model is automatically\nassumed to have a ",(0,s.jsx)(n.code,{children:"userId"})," foreign key. If you wish to override this\nconvention, you may pass a second argument to the ",(0,s.jsx)(n.code,{children:"@HasOne()"})," annotation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@HasOne(() => Phone, { foreignKey: 'foreignKey' })\npublic phone: Relation<Phone> \n"})}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, Athenna assumes that the foreign key should have a\nvalue matching the primary key column of the parent. In other words,\nAthenna will look for the value of the user's id column in the ",(0,s.jsx)(n.code,{children:"userId"}),"\ncolumn of the ",(0,s.jsx)(n.code,{children:"Phone"})," record. If you would like the relationship to\nuse a primary key value other than ",(0,s.jsx)(n.code,{children:"id"}),", you may pass a ",(0,s.jsx)(n.code,{children:"primaryKey"}),"\nproperty to the options in the second argument:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@HasOne(() => Phone, {\n  primaryKey: 'primaryKey',\n  foreignKey: 'foreignKey'\n})\npublic phone: Relation<Phone> \n"})}),"\n",(0,s.jsx)(n.h3,{id:"defining-the-inverse-of-the-relationship",children:"Defining the inverse of the relationship"}),"\n",(0,s.jsxs)(n.p,{children:["So, we can access the ",(0,s.jsx)(n.code,{children:"Phone"})," model from our ",(0,s.jsx)(n.code,{children:"User"})," model.\nNext, let's define a relationship on the ",(0,s.jsx)(n.code,{children:"Phone"})," model that\nwill let us access the user that owns the phone. We can define\nthe inverse of a ",(0,s.jsx)(n.code,{children:"@HasOne()"})," relationship using the ",(0,s.jsx)(n.code,{children:"@BelongsTo()"}),"\nannotation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { User } from '#app/models/User'\nimport { Column, BelongsTo, BaseModel, type Relation } from '@athenna/database'\n\nexport class Phone extends BaseModel {\n  @Column()\n  public id: number\n\n  @BelongsTo(() => User)\n  public user: Relation<User> \n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When invoking the ",(0,s.jsx)(n.code,{children:"with('user')"})," method, Athenna will attempt to find\na ",(0,s.jsx)(n.code,{children:"User"})," model that has an id which matches the ",(0,s.jsx)(n.code,{children:"userId"})," column on the\n",(0,s.jsx)(n.code,{children:"Phone"})," model."]}),"\n",(0,s.jsxs)(n.p,{children:["Athenna determines the foreign key name by examining the name of the\nrelationship method and suffixing the method name with ",(0,s.jsx)(n.code,{children:"Id"}),". So, in\nthis case, Athenna assumes that the ",(0,s.jsx)(n.code,{children:"Phone"})," model has a ",(0,s.jsx)(n.code,{children:"userId"}),"\ncolumn. However, if the foreign key on the ",(0,s.jsx)(n.code,{children:"Phone"})," model is not ",(0,s.jsx)(n.code,{children:"userId"}),",\nyou may pass a custom key name as the second argument to the ",(0,s.jsx)(n.code,{children:"@BelongsTo()"}),"\nannotation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@BelongsTo(() => User, { foreignKey: 'foreignKey' })\npublic user: Relation<User> \n"})}),"\n",(0,s.jsxs)(n.p,{children:["If the parent model does not use ",(0,s.jsx)(n.code,{children:"id"})," as its primary key, or you wish\nto find the associated model using a different column, you may pass a\nthird argument to the ",(0,s.jsx)(n.code,{children:"@BelongsTo()"})," method specifying the parent\ntable's custom key:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@BelongsTo(() => User, { \n  primaryKey: 'primaryKey',\n  foreignKey: 'foreignKey' \n})\npublic user: Relation<User> \n"})}),"\n",(0,s.jsx)(n.h2,{id:"one-to-many",children:"One To Many"}),"\n",(0,s.jsx)(n.p,{children:"Comming soon..."}),"\n",(0,s.jsx)(n.h2,{id:"many-to-many",children:"Many To Many"}),"\n",(0,s.jsx)(n.p,{children:"Comming soon..."})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>a,a:()=>r});var s=o(7294);const i={},t=s.createContext(i);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);