"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[7454],{2233:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var t=s(5893),a=s(1151);const r={title:"Seeding",sidebar_position:4,description:"See how to create and run database seeders."},d="Database: Seeding",i={id:"database/seeding",title:"Seeding",description:"See how to create and run database seeders.",source:"@site/docs/database/seeding.mdx",sourceDirName:"database",slug:"/database/seeding",permalink:"/docs/database/seeding",draft:!1,unlisted:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/database/seeding.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Seeding",sidebar_position:4,description:"See how to create and run database seeders."},sidebar:"tutorialSidebar",previous:{title:"Migrations",permalink:"/docs/database/migrations"},next:{title:"ORM",permalink:"/docs/orm"}},o={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Writing seeders",id:"writing-seeders",level:2},{value:"Running seeders",id:"running-seeders",level:2},{value:"Setting the seeder connection",id:"setting-the-seeder-connection",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"database-seeding",children:"Database: Seeding"}),"\n",(0,t.jsx)(n.p,{children:"See how to create and run database seeders."}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["Athenna includes the ability to seed your database with data using\nseed classes. All seed classes are stored in the ",(0,t.jsx)(n.code,{children:"Path.seeders()"}),"\ndirectory."]}),"\n",(0,t.jsx)(n.h2,{id:"writing-seeders",children:"Writing seeders"}),"\n",(0,t.jsxs)(n.p,{children:["To generate a seeder, execute the ",(0,t.jsx)(n.code,{children:"make:seeder"})," Artisan command. All\nseeders generated by the framework will be placed in the ",(0,t.jsx)(n.code,{children:"Path.seeders()"}),"\ndirectory:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"node artisan make:seeder UserSeeder\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A seeder class only contains one method by default: ",(0,t.jsx)(n.code,{children:"run()"}),". This method\nis called when the ",(0,t.jsx)(n.code,{children:"db:seed"})," Artisan command is executed. Within the\n",(0,t.jsx)(n.code,{children:"run()"})," method, you may insert data into your database however you wish.\nYou may use the query builder to manually insert data, or you may use\n",(0,t.jsx)(n.a,{href:"/docs/orm/getting-started",children:"the model factories"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { User } from '#app/models/user'\nimport { BaseSeeder, type DatabaseImpl } from '@athenna/database'\n\nexport class UserSeeder extends BaseSeeder { \n  public async run(db: DatabaseImpl) {\n    await db.table('users').createMany([/*.....*/])\n\n    await User.factory().count(20).create()\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"running-seeders",children:"Running seeders"}),"\n",(0,t.jsxs)(n.p,{children:["You may execute the ",(0,t.jsx)(n.code,{children:"db:seed"})," Artisan command to seed your database.\nBy default, the ",(0,t.jsx)(n.code,{children:"db:seed"})," command will run all the seeders\ninside the ",(0,t.jsx)(n.code,{children:"Path.seeders()"})," folder, but you can run only one seeder\nusing the ",(0,t.jsx)(n.code,{children:"--classes"})," argument:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"node artisan db:seed\n\nnode artisan db:seed --classes=UserSeeder\n"})}),"\n",(0,t.jsx)(n.h3,{id:"setting-the-seeder-connection",children:"Setting the seeder connection"}),"\n",(0,t.jsxs)(n.p,{children:["If your seeder will be interacting with a database connection other\nthan your application's default database connection, you should set\nthe static method ",(0,t.jsx)(n.code,{children:"connection()"})," in your seeder:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { BaseSeeder, type DatabaseImpl } from '@athenna/database'\n\nexport class UserSeeder extends BaseSeeder { \n  public static connection() {\n    return 'postgres'\n  }\n\n  public async run(db: DatabaseImpl) {\n    await Database.table('users').createMany([/*.....*/])\n\n    await User.factory().count(20).create()\n  }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>i,a:()=>d});var t=s(7294);const a={},r=t.createContext(a);function d(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);