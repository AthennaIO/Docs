"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[2155],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return n?r.createElement(h,a(a({ref:t},d),{},{components:n})):r.createElement(h,a({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={title:"Node Script File",sidebar_position:2,description:"Understand what is the purpose of the node script file.",tags:["Getting Started","Node Script File"]},a="Node Script File",l={unversionedId:"getting-started/node-script-file",id:"getting-started/node-script-file",title:"Node Script File",description:"Understand what is the purpose of the node script file.",source:"@site/docs/getting-started/node-script-file.mdx",sourceDirName:"getting-started",slug:"/getting-started/node-script-file",permalink:"/docs/getting-started/node-script-file",draft:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/getting-started/node-script-file.mdx",tags:[{label:"Getting Started",permalink:"/docs/tags/getting-started"},{label:"Node Script File",permalink:"/docs/tags/node-script-file"}],version:"current",sidebarPosition:2,frontMatter:{title:"Node Script File",sidebar_position:2,description:"Understand what is the purpose of the node script file.",tags:["Getting Started","Node Script File"]},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/getting-started/installation"},next:{title:"AthennaRC File",permalink:"/docs/getting-started/athennarc-file"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"The <code>--loader</code> flag",id:"the---loader-flag",level:2},{value:"The <code>--experimental-import-meta-resolve</code> flag",id:"the---experimental-import-meta-resolve-flag",level:2},{value:"Running artisan file as argument",id:"running-artisan-file-as-argument",level:2},{value:"The future of node script file",id:"the-future-of-node-script-file",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"node-script-file"},"Node Script File"),(0,i.kt)("p",null,"Understand what is the purpose of the node script file."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"The node script file in your project root is a basic script to\nrun Node.js with predefined CLI arguments; without this script,\nyou would need to pass all the necessary arguments to run the\napplication every time in the terminal."),(0,i.kt)("h2",{id:"the---loader-flag"},"The ",(0,i.kt)("inlineCode",{parentName:"h2"},"--loader")," flag"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"--loader=ts-node/esm")," flag is required to run your Athenna\napplication in development mode with TypeScript. This flag is\nresponsible to set up a Node.js ESM loader that will first compile\nyour modules every time that you ask to import them using the\n",(0,i.kt)("inlineCode",{parentName:"p"},"import")," statement."),(0,i.kt)("p",null,"Let's suppose that you have the following ",(0,i.kt)("inlineCode",{parentName:"p"},"index.ts")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"class Hello {\n  public static world(): string {\n    return 'Hello world!'\n  }\n}\n\nconsole.log(Hello.world())\n")),(0,i.kt)("p",null,"To be able to run this file with Node.js, you can use the\nfollowing command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node --loader=ts-node/esm index.ts\n")),(0,i.kt)("p",null,"Or use the node script file that already has this flag\nset:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./node index.ts\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you wish to use any Node.js CLI flag when running\nsome script, you can add it before your script file name,\nfor example:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./node --watch index.ts\n")),(0,i.kt)("p",{parentName:"admonition"},"Or you could add it to be called every time inside\nthe node script file together with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--loader")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"--experimental-import-meta-resolve")," flags.")),(0,i.kt)("h2",{id:"the---experimental-import-meta-resolve-flag"},"The ",(0,i.kt)("inlineCode",{parentName:"h2"},"--experimental-import-meta-resolve")," flag"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"--experimental-import-meta-resolve")," is required in all\nsituations, development or production. This flag is\nresponsible to provide a module-relative resolution function\nscoped to each module, returning the URL string of the resolved\nmodule. This function accepts a second argument which is the\nparent module from which to resolve from:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const specifier = '#app/services/MyService'\nconst metaUrl = import.meta.url\n\nconst url = await import.meta.resolve(specifier, metaUrl)\n\nconst { MyService } = await import(url)\n")),(0,i.kt)("p",null,"Athenna uses a lot of this functionality to import the modules\nthat you define in your ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting-started/athennarc-file"},(0,i.kt)("inlineCode",{parentName:"a"},".athennarc.json")),"\nfile. If this flag is not present, an exception will be thrown\nwhen bootstrapping your application."),(0,i.kt)("h2",{id:"running-artisan-file-as-argument"},"Running artisan file as argument"),(0,i.kt)("p",null,"If you take a look at the content of the node script file,\nyou will see that we are using ",(0,i.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/sed-command-linux-set-2/"},"sed"),"\ncommand to replace the ",(0,i.kt)("inlineCode",{parentName:"p"},"artisan")," argument with the path to\n",(0,i.kt)("inlineCode",{parentName:"p"},"bootstrap/artisan.ts")," file."),(0,i.kt)("p",null,"This is a tricky implementation that will allow you to call\nyour artisan commands without the need to add the full path\nto artisan:"),(0,i.kt)("h2",{id:"the-future-of-node-script-file"},"The future of node script file"),(0,i.kt)("p",null,"As you may have noticed, this node script is a hell of a\nkludge \ud83e\udd23."),(0,i.kt)("p",null,"But the good news is that in future Node.js versions,\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"--experimental-import-meta-resolve")," flag will not be\nnecessary to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"import.meta.resolve")," function. Also,\nin future Node.js versions, we might have better support\nfor TypeScript the same way ",(0,i.kt)("a",{parentName:"p",href:"https://deno.com/"},"Deno")," and\n",(0,i.kt)("a",{parentName:"p",href:"https://bun.sh/"},"Bun")," does since a big part of the community\nis very committed in making this happen as you can see in\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nodejs/node/issues/43818"},"this GitHub issue"),"."),(0,i.kt)("p",null,"So, in the future, you might be able to remove (if you want)\nthe node script file from your project and simply use ",(0,i.kt)("inlineCode",{parentName:"p"},"node"),"\nto run your application. Also, if you have a good idea on\nhow to implement a better solution to this problem, please\nfeel free to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/AthennaIO/Core/issues/new/choose"},"open an issue at @athenna/core repository"),",\nit will be really cool to discuss a better implementation\nfor this with you \ud83d\ude0e."))}u.isMDXComponent=!0}}]);