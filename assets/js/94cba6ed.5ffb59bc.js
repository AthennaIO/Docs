"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[2419],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,p=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=s(n),h=o,u=c["".concat(p,".").concat(h)]||c[h]||m[h]||l;return n?a.createElement(u,i(i({ref:t},d),{},{components:n})):a.createElement(u,i({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=h;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[c]="string"==typeof e?e:o,i[1]=r;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4932:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const l={title:"Helpers",sidebar_position:3,description:"Understand how to use all the Athenna Helpers from @athenna/common and other packages.",tags:["The Basics","Helpers"]},i="Helpers",r={unversionedId:"the-basics/helpers",id:"the-basics/helpers",title:"Helpers",description:"Understand how to use all the Athenna Helpers from @athenna/common and other packages.",source:"@site/docs/the-basics/helpers.mdx",sourceDirName:"the-basics",slug:"/the-basics/helpers",permalink:"/docs/the-basics/helpers",draft:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/the-basics/helpers.mdx",tags:[{label:"The Basics",permalink:"/docs/tags/the-basics"},{label:"Helpers",permalink:"/docs/tags/helpers"}],version:"current",sidebarPosition:3,frontMatter:{title:"Helpers",sidebar_position:3,description:"Understand how to use all the Athenna Helpers from @athenna/common and other packages.",tags:["The Basics","Helpers"]},sidebar:"tutorialSidebar",previous:{title:"Views",permalink:"/docs/the-basics/views"},next:{title:"Compilation",permalink:"/docs/the-basics/compilation"}},p={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Available helpers",id:"available-helpers",level:2},{value:"<code>Clean</code>",id:"clean",level:3},{value:"<code>Clean::cleanArray()</code>",id:"cleancleanarray",level:4},{value:"<code>Clean::cleanObject()</code>",id:"cleancleanobject",level:4},{value:"<code>Color</code>",id:"color",level:3},{value:"<code>Color::apply()</code>",id:"colorapply",level:4},{value:"<code>Color::remove()</code>",id:"colorremove",level:4},{value:"<code>Color::httpMethod()</code>",id:"colorhttpmethod",level:4},{value:"<code>Exception</code>",id:"exception",level:3},{value:"<code>Exception.toJSON()</code>",id:"exceptiontojson",level:4},{value:"<code>Exception.prettify()</code>",id:"exceptionprettify",level:4},{value:"<code>Exec</code>",id:"exec",level:3},{value:"<code>Exec::sleep()</code>",id:"execsleep",level:4},{value:"<code>Exec::concurrently()</code>",id:"execconcurrently",level:4},{value:"<code>Exec::command()</code>",id:"execcommand",level:4},{value:"<code>Exec::download()</code>",id:"execdownload",level:4},{value:"<code>Exec::pagination()</code>",id:"execpagination",level:4},{value:"<code>FakeApi</code>",id:"fakeapi",level:3},{value:"<code>FakeApi::start()</code>",id:"fakeapistart",level:4},{value:"<code>FakeApi::stop()</code>",id:"fakeapistop",level:4},{value:"<code>FakeApi::isRunning()</code>",id:"fakeapiisrunning",level:4},{value:"<code>FakeApi::listRoutes()</code>",id:"fakeapilistroutes",level:4},{value:"<code>FakeApi::registerFile()</code>",id:"fakeapiregisterfile",level:4},{value:"<code>FakeApi::registerFolder()</code>",id:"fakeapiregisterfolder",level:4},{value:"<code>FakeApi::build()</code>",id:"fakeapibuild",level:4},{value:"<code>File</code>",id:"file",level:3},{value:"<code>File.load()</code> &amp; <code>File.loadSync()</code>",id:"fileload--fileloadsync",level:4},{value:"<code>File.copy()</code> &amp; <code>File.copySync()</code>",id:"filecopy--filecopysync",level:4},{value:"<code>File.move()</code> &amp; <code>File.moveSync()</code>",id:"filemove--filemovesync",level:4},{value:"<code>File.remove()</code> &amp; <code>File.removeSync()</code>",id:"fileremove--fileremovesync",level:4},{value:"<code>File.setContent()</code> &amp; <code>File.setContentSync()</code>",id:"filesetcontent--filesetcontentsync",level:4},{value:"<code>File.getContent()</code> &amp; <code>File.getContentSync()</code>",id:"filegetcontent--filegetcontentsync",level:4},{value:"<code>File.getContentAsString()</code> &amp; <code>File.getContentAsStringSync()</code>",id:"filegetcontentasstring--filegetcontentasstringsync",level:4},{value:"<code>File.getContentAsJson()</code> &amp; <code>File.getContentAsJsonSync()</code>",id:"filegetcontentasjson--filegetcontentasjsonsync",level:4},{value:"<code>File.getContentAsBuilder()</code> &amp; <code>File.getContentAsBuilderSync()</code>",id:"filegetcontentasbuilder--filegetcontentasbuildersync",level:4},{value:"<code>File.append()</code> &amp; <code>File.appendSync()</code>",id:"fileappend--fileappendsync",level:4},{value:"<code>File.prepend()</code> &amp; <code>File.prependSync()</code>",id:"fileprepend--fileprependsync",level:4},{value:"<code>File.createReadStream()</code>",id:"filecreatereadstream",level:4},{value:"<code>File.createWriteStream()</code>",id:"filecreatewritestream",level:4},{value:"<code>File.toJSON()</code>",id:"filetojson",level:4},{value:"<code>File.import()</code>",id:"fileimport",level:4},{value:"<code>File.safeImport()</code>",id:"filesafeimport",level:4},{value:"<code>File::safeRemove()</code>",id:"filesaferemove",level:4},{value:"<code>File::exists()</code> &amp; <code>File::existsSync()</code>",id:"fileexists--fileexistssync",level:4},{value:"<code>File::isFile()</code> &amp; <code>File::isFileSync()</code>",id:"fileisfile--fileisfilesync",level:4},{value:"<code>File::createFileOfSize()</code>",id:"filecreatefileofsize",level:4},{value:"<code>Folder</code>",id:"folder",level:3},{value:"<code>Folder.load()</code> &amp; <code>Folder.loadSync()</code>",id:"folderload--folderloadsync",level:4},{value:"<code>Folder.copy()</code> &amp; <code>Folder.copySync()</code>",id:"foldercopy--foldercopysync",level:4},{value:"<code>Folder.move()</code> &amp; <code>Folder.moveSync()</code>",id:"foldermove--foldermovesync",level:4},{value:"<code>Folder.remove()</code> &amp; <code>Folder.removeSync()</code>",id:"folderremove--folderremovesync",level:4},{value:"<code>Folder.toJSON()</code>",id:"foldertojson",level:4},{value:"<code>Folder.getFilesByPattern()</code>",id:"foldergetfilesbypattern",level:4},{value:"<code>Folder.getFoldersByPattern()</code>",id:"foldergetfoldersbypattern",level:4},{value:"<code>Folder::safeRemove()</code>",id:"foldersaferemove",level:4},{value:"<code>Folder::exists()</code> &amp; <code>Folder::existsSync()</code>",id:"folderexists--folderexistssync",level:4},{value:"<code>Folder::isFolder()</code> &amp; <code>Folder::isFolderSync()</code>",id:"folderisfolder--folderisfoldersync",level:4},{value:"<code>Folder::size()</code> &amp; <code>Folder::sizeSync()</code>",id:"foldersize--foldersizesync",level:4},{value:"<code>HttpClient</code>",id:"httpclient",level:3},{value:"<code>Is</code>",id:"is",level:3},{value:"<code>Json</code>",id:"json",level:3},{value:"<code>Module</code>",id:"module",level:3},{value:"<code>Number</code>",id:"number",level:3},{value:"<code>Options</code>",id:"options",level:3},{value:"<code>Parser</code>",id:"parser",level:3},{value:"<code>Path</code>",id:"path",level:3},{value:"<code>Route</code>",id:"route",level:3},{value:"<code>String</code>",id:"string",level:3},{value:"<code>Uuid</code>",id:"uuid",level:3}],d={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"helpers"},"Helpers"),(0,o.kt)("p",null,"Understand how to use all the Athenna Helpers from @athenna/common and other packages."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,'Athenna includes a variety of "helpers" classes inside\nthe ',(0,o.kt)("inlineCode",{parentName:"p"},"@athenna/common")," package that comes by default\ninstalled in your application. Many of these classes are\nused by the framework itself; however, you are free to use\nthem in your own applications if you find them convenient."),(0,o.kt)("h2",{id:"available-helpers"},"Available helpers"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#clean"},(0,o.kt)("inlineCode",{parentName:"a"},"Clean"))," - Remove falsy values\nfrom different data structures."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#color"},(0,o.kt)("inlineCode",{parentName:"a"},"Color"))," - The UI Kit of Athenna\ncommand line applications."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#exception"},(0,o.kt)("inlineCode",{parentName:"a"},"Exception"))," - Create errors with\nmore details to handle them easily."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#exec"},(0,o.kt)("inlineCode",{parentName:"a"},"Exec"))," - Simple helpers that executes\nsome operation, like executing a command in a child process."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#fakeapi"},(0,o.kt)("inlineCode",{parentName:"a"},"FakeApi"))," - Create a fake REST API\nusing ",(0,o.kt)("inlineCode",{parentName:"li"},"json")," files to map the routes and their returns (similiar to ",(0,o.kt)("a",{parentName:"li",href:"https://wiremock.org/"},"WireMock"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#file"},(0,o.kt)("inlineCode",{parentName:"a"},"File"))," - Create, copy, move,\ndelete and get information about files."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#folder"},(0,o.kt)("inlineCode",{parentName:"a"},"Folder"))," - Create, copy, move,\ndelete and get information about folders."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#httpclient"},(0,o.kt)("inlineCode",{parentName:"a"},"HttpClient"))," - Make HTTP requests for\nother servers with a human-friendly and powerful API."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#is"},(0,o.kt)("inlineCode",{parentName:"a"},"Is"))," - Validate if your data ",(0,o.kt)("strong",{parentName:"li"},"is"),"\nequals to some type or pattern."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#json"},(0,o.kt)("inlineCode",{parentName:"a"},"Json"))," - Simple helpers to manipulate JSON."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#module"},(0,o.kt)("inlineCode",{parentName:"a"},"Module"))," - Simple helpers to manipulate\nNode.js modules."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#number"},(0,o.kt)("inlineCode",{parentName:"a"},"Number"))," - Simple helpers to manipulate\nnumbers."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#options"},(0,o.kt)("inlineCode",{parentName:"a"},"Options"))," - Simple helpers to develop\nAPI's (functions and methods) with good options and configurations for\ndevelopers."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#parser"},(0,o.kt)("inlineCode",{parentName:"a"},"Parser"))," - Parse data from X to Y and Y to X."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#path"},(0,o.kt)("inlineCode",{parentName:"a"},"Path"))," - Get the full path to some file or\nfolder starting from your application\n",(0,o.kt)("a",{parentName:"li",href:"https://www.computerhope.com/jargon/p/pwd.htm"},"PWD"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#route"},(0,o.kt)("inlineCode",{parentName:"a"},"Route"))," - Simple helpers to manipulate\nroute params, query params and more."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#string"},(0,o.kt)("inlineCode",{parentName:"a"},"String"))," - Simple helpers to manipulate\nstrings."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/the-basics/helpers#uuid"},(0,o.kt)("inlineCode",{parentName:"a"},"Uuid"))," - Create customized UUID v4 and\nvalidate if they are valid.")),(0,o.kt)("h3",{id:"clean"},(0,o.kt)("inlineCode",{parentName:"h3"},"Clean")),(0,o.kt)("h4",{id:"cleancleanarray"},(0,o.kt)("inlineCode",{parentName:"h4"},"Clean::cleanArray()")),(0,o.kt)("p",null,"Clean falsy and empty values from an array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Clean } from '@athenna/common'\n\nconst array = [\n  '',\n  1,\n  null,\n  undefined, \n  { joao: 'joao', lenon: null }, \n  {}\n]\n\nconst cleanedArray = Clean.cleanArray(array)\n\nconsole.log(cleanedArray)\n\n/**\n * [\n *  1,\n *  { joao: 'joao', lenon: null }, \n *  {}\n * ]\n */\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"cleanArray()")," method supports two options, ",(0,o.kt)("inlineCode",{parentName:"p"},"removeEmpty")," to remove empty\nvalues like ",(0,o.kt)("inlineCode",{parentName:"p"},"{}")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"[]")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"recursive")," to recursivelly remove data\nfrom objects and arrays:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const cleanedArray = Clean.cleanArray(array, {\n  removeEmpty: true,\n  recursive: true\n})\n\nconsole.log(cleanedArray)\n\n/**\n * [\n *  1, { joao: 'joao' }\n * ]\n */\n")),(0,o.kt)("h4",{id:"cleancleanobject"},(0,o.kt)("inlineCode",{parentName:"h4"},"Clean::cleanObject()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const object = {\n  key: 'value',\n  emptyArray: [],\n  emptyObject: {},\n  object: { joao: 'joao' },\n  nullValue: null,\n  undefinedValue: undefined,\n  arrayWithSubs: [null, 1, { joao: 'joao', lenon: null }, {}],\n}\n\nconst cleanedObject = Clean.cleanObject(object)\n\nconsole.log(cleanedObject) \n/**\n * {\n *  key: 'value',\n *  emptyArray: [],\n *  emptyObject: {},\n *  object: { joao: 'joao' },\n *  arrayWithSubs: [null, 1, { joao: 'joao', lenon: null }, {}],\n * }\n */\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"cleanObject()")," method supports two options, ",(0,o.kt)("inlineCode",{parentName:"p"},"removeEmpty")," to remove empty\nvalues like ",(0,o.kt)("inlineCode",{parentName:"p"},"{}")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"[]")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"recursive")," to recursivelly remove data\nfrom objects and arrays:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const cleanedObject = Clean.cleanObject(object, {\n  removeEmpty: true,\n  recursive: true,\n})\n\nconsole.log(cleanedObject) \n/**\n * {\n *  key: 'value',\n *  object: { joao: 'joao' },\n *  arrayWithSubs: [1, { joao: 'joao' }],\n * }\n */\n")),(0,o.kt)("h3",{id:"color"},(0,o.kt)("inlineCode",{parentName:"h3"},"Color")),(0,o.kt)("p",null,"This helper uses ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/chalk"},"chalk"),"\nlibrary under the hood to create unique colors for Athenna\nCLI applications. In this documentation we are going to focus\nonly in helpers that ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Color"))," provides different from ",(0,o.kt)("strong",{parentName:"p"},"chalk"),"."),(0,o.kt)("h4",{id:"colorapply"},(0,o.kt)("inlineCode",{parentName:"h4"},"Color::apply()")),(0,o.kt)("p",null,"Apply the color engine of Athenna to some string. The color\nengine execute ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/chalk"},"chalk"),"\nmethods under the hood. In the example bellow we are executing\n",(0,o.kt)("inlineCode",{parentName:"p"},"yellow()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bold()")," method of\n",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/chalk"},"chalk")," in the word\n",(0,o.kt)("inlineCode",{parentName:"p"},"World"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Color } from '@athenna/common'\n\nconst colorizedString = Color.apply('Hello ({yellow, bold} World)!')\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The color of ",(0,o.kt)("inlineCode",{parentName:"p"},"World")," word will be yellow with bold format.")),(0,o.kt)("h4",{id:"colorremove"},(0,o.kt)("inlineCode",{parentName:"h4"},"Color::remove()")),(0,o.kt)("p",null,"Remove all the formats and colors of your string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Color } from '@athenna/common'\n\nconst noColorString = Color.remove(Color.yellow('Davi Mezencio'))\n")),(0,o.kt)("h4",{id:"colorhttpmethod"},(0,o.kt)("inlineCode",{parentName:"h4"},"Color::httpMethod()")),(0,o.kt)("p",null,"Get an instance of chalk with a determined color for each type\nof http method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Color } from '@athenna/common'\n\nColor.httpMethod('GET').bold('Request Received')\nColor.httpMethod('HEAD').bold('Request Received')\nColor.httpMethod('POST').bold('Request Received')\nColor.httpMethod('PUT').bold('Request Received')\nColor.httpMethod('PATCH').bold('Request Received')\nColor.httpMethod('DELETE').bold('Request Received')\nColor.httpMethod('OPTIONS').bold('Request Received')\n")),(0,o.kt)("h3",{id:"exception"},(0,o.kt)("inlineCode",{parentName:"h3"},"Exception")),(0,o.kt)("p",null,"In this documentation section we are going to cover only the\nhelpers of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Exception")," class. You can learn more about\nexceptions when handling errors in your application. Those are\nthe available documentation for error handling by application:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/rest-api-application/error-handling"},"REST API")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/cli-application/error-handling"},"CLI"))),(0,o.kt)("h4",{id:"exceptiontojson"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exception.toJSON()")),(0,o.kt)("p",null,"Get the informations of the exception as JSON:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exception } from '@athenna/common'\n\nconst exception = new Exception({\n  status: 500,\n  name: 'ErrorName',\n  code: 'ERROR_CODE',\n  message: 'Some exception has ocurred.',\n  help: 'Try restarting your computer, should work.'\n})\n\nconst json = exception.toJSON() // { status: 500, name: 'ErrorName', ... }\n")),(0,o.kt)("h4",{id:"exceptionprettify"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exception.prettify()")),(0,o.kt)("p",null,"Transform the exception to a human redable format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exception } from '@athenna/common'\n\nconst exception = new Exception({\n  status: 500,\n  name: 'ErrorName',\n  code: 'ERROR_CODE',\n  message: 'Some exception has ocurred.',\n  help: 'Try restarting your computer, should work.'\n})\n\nLogger.error(await exception.prettify())\n")),(0,o.kt)("h3",{id:"exec"},(0,o.kt)("inlineCode",{parentName:"h3"},"Exec")),(0,o.kt)("h4",{id:"execsleep"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exec::sleep()")),(0,o.kt)("p",null,"Put the code to sleep for a determined amount of MS:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\nawait Exec.sleep(3000) // 3 seconds\n")),(0,o.kt)("h4",{id:"execconcurrently"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exec::concurrently()")),(0,o.kt)("p",null,"Execute some callback concurrently for each value of\nthe array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\nconst array = [1, 2, 3]\n\nconst newArray = await Exec.concurrently(array, async (number) => {\n  // Some sync operation just to simulate\n  await Exec.sleep(1000)\n\n  return number++\n})\n")),(0,o.kt)("h4",{id:"execcommand"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exec::command()")),(0,o.kt)("p",null,"Execute some command of your OS in a child process:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\nconst { stdout } = await Exec.command('ls -la')\n")),(0,o.kt)("p",null,"If your command fails, Athenna will throw the\n",(0,o.kt)("inlineCode",{parentName:"p"},"NodeCommandException"),", to avoid this you can set the\n",(0,o.kt)("inlineCode",{parentName:"p"},"ignoreErrors")," option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\nconst { stdout, stderr } = await Exec.command('ls -la', {\n  ignoreErrors: true\n})\n")),(0,o.kt)("h4",{id:"execdownload"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exec::download()")),(0,o.kt)("p",null,"Download some file from some URL and get the ",(0,o.kt)("inlineCode",{parentName:"p"},"File")," instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\n// File helper class instance\nconst file = await Exec.download(Path.storage('file.txt'), 'https://athenna.io/file.txt')\n")),(0,o.kt)("h4",{id:"execpagination"},(0,o.kt)("inlineCode",{parentName:"h4"},"Exec::pagination()")),(0,o.kt)("p",null,"Create a pagination object for your API:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Exec } from '@athenna/common'\n\nconst data = [{...}, {...}]\n\nconst paginateObject = await Exec.pagination(data, data.length, {\n  page: 0,\n  limit: 10,\n  resourceUrl: Config.get('app.url')\n})\n\nconsole.log(paginateObject)\n/**\n * {\n *  data: [{...}, {...}],\n *  meta: {\n *    itemCount: 2,\n *    totalItems: 2,\n *    totalPages: 1,\n *    currentPage: 0,\n *    itemsPerPage: 10,\n *  },\n *  links: {\n *    first: 'http://localhost:3000?limit=10',\n *    previous: 'http://localhost:3000?page=0&limit=10',\n *    next: 'http://localhost:3000?page=1&limit=10',\n *    last: 'http://localhost:3000?page=0&limit=10',\n *  } \n * }\n */\n")),(0,o.kt)("h3",{id:"fakeapi"},(0,o.kt)("inlineCode",{parentName:"h3"},"FakeApi")),(0,o.kt)("h4",{id:"fakeapistart"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::start()")),(0,o.kt)("p",null,"Start the fake server on port ",(0,o.kt)("inlineCode",{parentName:"p"},"8989")," and loading the path\n",(0,o.kt)("inlineCode",{parentName:"p"},"Path.resources('fake-api')"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nawait FakeApi.start()\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can change the server port and the path to read the\n",(0,o.kt)("inlineCode",{parentName:"p"},"json")," files:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nawait FakeApi.start(8989, Path.resources('path'))\n"))),(0,o.kt)("h4",{id:"fakeapistop"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::stop()")),(0,o.kt)("p",null,"Stop the fake api server and call ",(0,o.kt)("inlineCode",{parentName:"p"},"FakeApi::recreate()"),"\nmethod to create a new server instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nawait FakeApi.stop()\n")),(0,o.kt)("h4",{id:"fakeapiisrunning"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::isRunning()")),(0,o.kt)("p",null,"Verify if the fake api server is running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nif (FakeApi.isRunning()) {\n  // do something...\n}\n")),(0,o.kt)("h4",{id:"fakeapilistroutes"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::listRoutes()")),(0,o.kt)("p",null,"List all the routes registered in the fake api server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nconst routes = FakeApi.listRoutes()\n\nconsole.log(routes)\n")),(0,o.kt)("h4",{id:"fakeapiregisterfile"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::registerFile()")),(0,o.kt)("p",null,"Register a route using a ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," file in the fake api:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nFakeApi.registerFile(Path.resources('fake-api/users.json'))\n")),(0,o.kt)("p",null,"Content of ",(0,o.kt)("inlineCode",{parentName:"p"},"Path.resources('fake-api/users.json')")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "path": "/users",\n  "method": "GET",\n  "statusCode": 200, \ud83d\udc48 // The response status code\n  "body": [ \ud83d\udc48 // The response body\n    {\n      "id": 1,\n      "name": "Jo\xe3o Lenon",\n    },\n    {\n      "id": 2,\n      "name": "Thais Gabriela",\n    }\n  ],\n  "headers": { \ud83d\udc48 // The response header\n    "Content-Type": "application/json"\n  }\n}\n')),(0,o.kt)("h4",{id:"fakeapiregisterfolder"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::registerFolder()")),(0,o.kt)("p",null,"Recursively register all the ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," files of some folder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\n\nawait FakeApi.registerFolder(Path.resources('fake-api'))\n")),(0,o.kt)("h4",{id:"fakeapibuild"},(0,o.kt)("inlineCode",{parentName:"h4"},"FakeApi::build()")),(0,o.kt)("p",null,"Use this method to programatically build the routes u\nsing the builder pattern:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FakeApi } from '@athenna/common'\nimport type { RouteOptions } from 'fastify'\n\nconst options: RouteOptions = {}\nconst fakeApiBuilder = FakeApi.build()\n\nconst users = [\n  {\n    id: 1,\n    name: 'Jo\xe3o Lenon',\n  },\n  {\n    id: 2,\n    name: 'Thais Gabriela',\n  }\n]\n\nfakeApiBuilder\n  .path('/users')\n  .method('GET')\n  .statusCode(200)\n  .body(users)\n  .header({ 'Content-Type': 'application/json' })\n  .register(options)\n")),(0,o.kt)("h3",{id:"file"},(0,o.kt)("inlineCode",{parentName:"h3"},"File")),(0,o.kt)("h4",{id:"fileload--fileloadsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.load()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.loadSync()")),(0,o.kt)("p",null,"Creates the file is does not exist and also load the file information:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst existent = new File(Path.storage('existent.txt'))\nconst nonExistent = new File('./nonExistent.txt', 'File content')\n\n// Load the file info and content.\nawait existent.load({ withContent: true })  \ud83d\udc48\n\n// Create and load the file info without the \n// content (be careful when loading big files).\nnonExistent.loadSync() \ud83d\udc48\n")),(0,o.kt)("p",null,"After loading process, the file will contain new informations:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"createdAt - The date when the file was created."),(0,o.kt)("li",{parentName:"ul"},"accessedAt - The date when the file was last accessed."),(0,o.kt)("li",{parentName:"ul"},"modifiedAt - The date when the file was last modified."),(0,o.kt)("li",{parentName:"ul"},"fileSize - The size of the file in MB."),(0,o.kt)("li",{parentName:"ul"},"content - The content of the file as ",(0,o.kt)("inlineCode",{parentName:"li"},"Buffer")," if ",(0,o.kt)("inlineCode",{parentName:"li"},"withContent")," was ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,o.kt)("h4",{id:"filecopy--filecopysync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.copy()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.copySync()")),(0,o.kt)("p",null,"Create a copy of the file in other location or with other name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst copiedFile = file.copySync('./copy-of-file.txt')\nconst copiedFile = await file.copy(Path.storage('copy-of-file.txt'))\n")),(0,o.kt)("p",null,"To copy the file and load the content of the copy set the ",(0,o.kt)("inlineCode",{parentName:"p"},"withContent"),"\nas ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst copiedFile = await file.copy(Path.storage('copy-of-file.txt'), {\n  withContent: true \ud83d\udc48\n})\n")),(0,o.kt)("p",null,"When copying the file you can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to create\na file with fake name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst copiedFile = await file.copy(Path.storage('copy-of-file.txt'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,o.kt)("h4",{id:"filemove--filemovesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.move()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.moveSync()")),(0,o.kt)("p",null,"Move the file to other location:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst movedFile = file.moveSync('./move-of-file.txt')               \ud83d\udc48\nconst movedFile = await file.move(Path.storage('move-of-file.txt')) \ud83d\udc48\n")),(0,o.kt)("p",null,"To move the file and load the content of the move set the ",(0,o.kt)("inlineCode",{parentName:"p"},"withContent"),"\nas ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst movedFile = await file.move(Path.storage('move-of-file.txt'), {\n  withContent: true \ud83d\udc48\n})\n")),(0,o.kt)("p",null,"When moving the file you can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to create\na file with fake name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst movedFile = await file.move(Path.storage('file-path.txt'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,o.kt)("h4",{id:"fileremove--fileremovesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.remove()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.removeSync()")),(0,o.kt)("p",null,"Delete a file from the file system:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nfile.removeSync()   \ud83d\udc48\nawait file.remove() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filesetcontent--filesetcontentsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.setContent()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.setContentSync()")),(0,o.kt)("p",null,"Set the content of a file overwriting the existing content:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', 'Hello')\n\nfile.setContentSync('Hello World!')   \ud83d\udc48\nawait file.setContent('Hello World!') \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filegetcontent--filegetcontentsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContent()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentSync()")),(0,o.kt)("p",null,"Get the content of a file as ",(0,o.kt)("inlineCode",{parentName:"p"},"Buffer"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentBuffer = file.getContentSync()   \ud83d\udc48\nconst contentBuffer = await file.getContent() \ud83d\udc48\n")),(0,o.kt)("p",null,"To save the content of the file in the instance set the ",(0,o.kt)("inlineCode",{parentName:"p"},"saveContent")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst content = await file.getContent({ saveContent: true }) \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filegetcontentasstring--filegetcontentasstringsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsString()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsStringSync()")),(0,o.kt)("p",null,"Same behavior of ",(0,o.kt)("inlineCode",{parentName:"p"},"getContent()"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"getContentSync()"),", but return the content\nas ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentString = file.getContentAsStringSync()   \ud83d\udc48\nconst contentString = await file.getContentAsString() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filegetcontentasjson--filegetcontentasjsonsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsJson()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsJsonSync()")),(0,o.kt)("p",null,"Same behavior of ",(0,o.kt)("inlineCode",{parentName:"p"},"getContent()"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"getContentSync()"),", but return the content as\n",(0,o.kt)("inlineCode",{parentName:"p"},"object")," if the content is a valid JSON string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentJSON = file.getContentAsJsonSync()   \ud83d\udc48\nconst contentJSON = await file.getContentAsJson() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filegetcontentasbuilder--filegetcontentasbuildersync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsBuilder()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.getContentAsBuilderSync()")),(0,o.kt)("p",null,"Same behavior of ",(0,o.kt)("inlineCode",{parentName:"p"},"getContent()"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"getContentSync()"),", but return the content as\nan ",(0,o.kt)("a",{parentName:"p",href:"/docs/the-basics/helpers#object-builder"},(0,o.kt)("inlineCode",{parentName:"a"},"ObjectBuilder"))," instance if the\ncontent is a valid JSON string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst contentObjectBuilder = file.getContentAsBuilderSync()   \ud83d\udc48\nconst contentObjectBuilder = await file.getContentAsBuilder() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"fileappend--fileappendsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.append()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.appendSync()")),(0,o.kt)("p",null,"Add content to the end of the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', 'Hello')\n\nfile.appendSync(' World') \ud83d\udc48\nawait file.append('!\\n')  \ud83d\udc48\n")),(0,o.kt)("h4",{id:"fileprepend--fileprependsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.prepend()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File.prependSync()")),(0,o.kt)("p",null,"Add content to the top of the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', 'World')\n\nfile.prependSync('ello ') \ud83d\udc48\nawait file.prepend('H')   \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filecreatereadstream"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.createReadStream()")),(0,o.kt)("p",null,"Create a ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/stream.html#readable-streams"},"readable stream"),"\ninstance of the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const stream = file.createReadStream()\n")),(0,o.kt)("h4",{id:"filecreatewritestream"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.createWriteStream()")),(0,o.kt)("p",null,"Create a ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/stream.html#writable-streams"},"writable stream"),"\ninstance of the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const stream = file.createWriteStream()\n")),(0,o.kt)("h4",{id:"filetojson"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.toJSON()")),(0,o.kt)("p",null,"Get the informations of the file as JSON:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const infos = file.toJSON() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"fileimport"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.import()")),(0,o.kt)("p",null,"Import the file path if is a valid module:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.js', \"console.log('hello')\")\n\nconst module = await file.import() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"filesafeimport"},(0,o.kt)("inlineCode",{parentName:"h4"},"File.safeImport()")),(0,o.kt)("p",null,"Same as ",(0,o.kt)("inlineCode",{parentName:"p"},"import()")," method, but if the file is not a valid module the exception\nwill be ignored:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.txt', \"console.log('hello')\")\n\nconst module = await file.safeImport() \ud83d\udc48\n")),(0,o.kt)("p",null,"Importing files that got any errors like syntax errors will also not throw:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nconst file = new File('./file.js', \"console.log('hello\")\n\nconst module = await file.safeImport() \ud83d\udc48 // Nothing happens\n")),(0,o.kt)("h4",{id:"filesaferemove"},(0,o.kt)("inlineCode",{parentName:"h4"},"File::safeRemove()")),(0,o.kt)("p",null,"Call for a delete operation without worrying about exceptions because the file\ndoes not exist:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { File } from '@athenna/common'\n\nawait File.safeRemove(Path.storage('file.txt'))      \ud83d\udc48\nawait File.safeRemove(Path.storage('not-found.txt')) \ud83d\udc48 // Will not throw\n")),(0,o.kt)("h4",{id:"fileexists--fileexistssync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File::exists()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File::existsSync()")),(0,o.kt)("p",null,"Verify if a file exists or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (File.existsSync('package.json')) {\n  // do something\n}\n\nif (await File.exists('package.json')) {\n  // do something\n}\n")),(0,o.kt)("h4",{id:"fileisfile--fileisfilesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"File::isFile()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"File::isFileSync()")),(0,o.kt)("p",null,"Verify if a file is a valid file or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (File.isFileSync('package.json')) {\n  // do something\n}\n\nif (await File.isFile('package.json')) {\n  // do something\n}\n")),(0,o.kt)("h4",{id:"filecreatefileofsize"},(0,o.kt)("inlineCode",{parentName:"h4"},"File::createFileOfSize()")),(0,o.kt)("p",null,"Create a fake file with determined size for testing purposes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const file = await File.createFileOfSize('fake.js', 1024 * 1024 * 100) \ud83d\udc48\n")),(0,o.kt)("h3",{id:"folder"},(0,o.kt)("inlineCode",{parentName:"h3"},"Folder")),(0,o.kt)("h4",{id:"folderload--folderloadsync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.load()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.loadSync()")),(0,o.kt)("p",null,"Creates the folder if it does not exist and also load the folder information:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst existent = new Folder(Path.storage('existent'))\nconst nonExistent = new Folder('./nonExistent')\n\n// Load the folder info with sub folders and with file contents.\nawait existent.load({ withSub: true, withContent: true })  \ud83d\udc48\n\n// Create and load the folder info without the \n// content (be careful when loading big files).\nnonExistent.loadSync() \ud83d\udc48\n")),(0,o.kt)("p",null,"After loading process, the folder will contain new informations:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"createdAt - The date when the folder was created."),(0,o.kt)("li",{parentName:"ul"},"accessedAt - The date when the folder was last accessed."),(0,o.kt)("li",{parentName:"ul"},"modifiedAt - The date when the folder was last modified."),(0,o.kt)("li",{parentName:"ul"},"folderSize - The size of the folder in MB.")),(0,o.kt)("h4",{id:"foldercopy--foldercopysync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.copy()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.copySync()")),(0,o.kt)("p",null,"Create a copy of the folder in other location or with other name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst copiedFolder = folder.copySync('./copy-of-folder')\nconst copiedFolder = await folder.copy(Path.storage('copy-of-folder'))\n")),(0,o.kt)("p",null,"To copy the folder and load the sub folders and the content of the\ncopy set the ",(0,o.kt)("inlineCode",{parentName:"p"},"withSub")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"withContent")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst copiedFolder = await folder.copy(Path.storage('copy-of-folder'), {\n  withSub: true,    \ud83d\udc48\n  withContent: true \ud83d\udc48\n})\n")),(0,o.kt)("p",null,"When copying the folder you can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to copy the\nfiles with fake names:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst copiedFolder = await folder.copy(Path.storage('copy-of-file'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,o.kt)("h4",{id:"foldermove--foldermovesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.move()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.moveSync()")),(0,o.kt)("p",null,"Move the folder to other location:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst movedFolder = folder.moveSync('./move-of-folder')               \ud83d\udc48\nconst movedFolder = await folder.move(Path.storage('move-of-folder')) \ud83d\udc48\n")),(0,o.kt)("p",null,"To move the folder and load the sub folders and the content of the\nmove set the ",(0,o.kt)("inlineCode",{parentName:"p"},"withSub")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"withContent")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst movedFolder = await folder.move(Path.storage('move-of-folder'), {\n  withSub: true,    \ud83d\udc48\n  withContent: true \ud83d\udc48\n})\n")),(0,o.kt)("p",null,"When moving the folder you can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"mockedValues")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to move the\nfiles with fake names:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nconst movedFolder = await folder.move(Path.storage('file-path'), {\n  mockedValues: true \ud83d\udc48\n})\n")),(0,o.kt)("h4",{id:"folderremove--folderremovesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.remove()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.removeSync()")),(0,o.kt)("p",null,"Delete a folder from the folder system:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nfolder.removeSync()   \ud83d\udc48\nawait folder.remove() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"foldertojson"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.toJSON()")),(0,o.kt)("p",null,"Get the informations of the folder as JSON:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const infos = folder.toJSON() \ud83d\udc48\n")),(0,o.kt)("h4",{id:"foldergetfilesbypattern"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.getFilesByPattern()")),(0,o.kt)("p",null,"Get all the files of a folder using a glob pattern:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const files = folder.getFilesByPattern('**/*.js') \ud83d\udc48\n")),(0,o.kt)("h4",{id:"foldergetfoldersbypattern"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder.getFoldersByPattern()")),(0,o.kt)("p",null,"Get all the folders of a folder using a glob pattern:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const folders = folder.getFoldersByPattern('**/*') \ud83d\udc48\n")),(0,o.kt)("h4",{id:"foldersaferemove"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::safeRemove()")),(0,o.kt)("p",null,"Call for a delete operation without worrying about exceptions because the folder\ndoes not exist:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Folder } from '@athenna/common'\n\nawait Folder.safeRemove(Path.storage('folder'))    \ud83d\udc48\nawait Folder.safeRemove(Path.storage('not-found')) \ud83d\udc48 // Will not throw\n")),(0,o.kt)("h4",{id:"folderexists--folderexistssync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::exists()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::existsSync()")),(0,o.kt)("p",null,"Verify if a folder exists or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (Folder.existsSync('app')) {\n  // do something\n}\n\nif (await Folder.exists('app')) {\n  // do something\n}\n")),(0,o.kt)("h4",{id:"folderisfolder--folderisfoldersync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::isFolder()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::isFolderSync()")),(0,o.kt)("p",null,"Verify if a folder is a valid folder or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (Folder.isFolderSync('app')) {\n  // do something\n}\n\nif (await Folder.isFolder('app')) {\n  // do something\n}\n")),(0,o.kt)("h4",{id:"foldersize--foldersizesync"},(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::size()")," & ",(0,o.kt)("inlineCode",{parentName:"h4"},"Folder::sizeSync()")),(0,o.kt)("p",null,"Get the size of the folder in MB:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if (Folder.sizeSync('app') === 100) {\n  // do something\n}\n\nif (await Folder.size('app')  === 100) {\n  // do something\n}\n")),(0,o.kt)("h3",{id:"httpclient"},(0,o.kt)("inlineCode",{parentName:"h3"},"HttpClient")),(0,o.kt)("p",null,"Coming soon"),(0,o.kt)("h3",{id:"is"},(0,o.kt)("inlineCode",{parentName:"h3"},"Is")),(0,o.kt)("p",null,"Coming soon"),(0,o.kt)("h3",{id:"json"},(0,o.kt)("inlineCode",{parentName:"h3"},"Json")),(0,o.kt)("p",null,"Coming soon"),(0,o.kt)("h3",{id:"module"},(0,o.kt)("inlineCode",{parentName:"h3"},"Module")),(0,o.kt)("p",null,"Coming soon"),(0,o.kt)("h3",{id:"number"},(0,o.kt)("inlineCode",{parentName:"h3"},"Number")),(0,o.kt)("p",null,"Coming soon"),(0,o.kt)("h3",{id:"options"},(0,o.kt)("inlineCode",{parentName:"h3"},"Options")),(0,o.kt)("p",null,"Coming soon"),(0,o.kt)("h3",{id:"parser"},(0,o.kt)("inlineCode",{parentName:"h3"},"Parser")),(0,o.kt)("p",null,"Coming soon"),(0,o.kt)("h3",{id:"path"},(0,o.kt)("inlineCode",{parentName:"h3"},"Path")),(0,o.kt)("p",null,"Coming soon"),(0,o.kt)("h3",{id:"route"},(0,o.kt)("inlineCode",{parentName:"h3"},"Route")),(0,o.kt)("p",null,"Coming soon"),(0,o.kt)("h3",{id:"string"},(0,o.kt)("inlineCode",{parentName:"h3"},"String")),(0,o.kt)("p",null,"Coming soon"),(0,o.kt)("h3",{id:"uuid"},(0,o.kt)("inlineCode",{parentName:"h3"},"Uuid")),(0,o.kt)("p",null,"Coming soon"))}m.isMDXComponent=!0}}]);