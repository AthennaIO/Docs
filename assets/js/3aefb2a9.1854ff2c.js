"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[1977],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,h=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8303:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={title:"Routing",sidebar_position:1,description:"Understand how you can set up routes for your REST API application."},i="Routing",s={unversionedId:"rest-api-application/routing",id:"rest-api-application/routing",title:"Routing",description:"Understand how you can set up routes for your REST API application.",source:"@site/docs/rest-api-application/routing.mdx",sourceDirName:"rest-api-application",slug:"/rest-api-application/routing",permalink:"/docs/rest-api-application/routing",draft:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/rest-api-application/routing.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Routing",sidebar_position:1,description:"Understand how you can set up routes for your REST API application."},sidebar:"tutorialSidebar",previous:{title:"REST API Application",permalink:"/docs/rest-api-application"},next:{title:"Middlewares",permalink:"/docs/rest-api-application/middlewares"}},p={},l=[{value:"Basic routing",id:"basic-routing",level:2},{value:"Available Router Methods",id:"available-router-methods",level:3},{value:"Redirect routes",id:"redirect-routes",level:2},{value:"The route list",id:"the-route-list",level:2},{value:"Route parameters",id:"route-parameters",level:2},{value:"Route groups",id:"route-groups",level:2},{value:"Middleware",id:"middleware",level:3},{value:"Route prefixes",id:"route-prefixes",level:3},{value:"Cross-origin resource sharing (CORS)",id:"cross-origin-resource-sharing-cors",level:2},{value:"Custom route file path",id:"custom-route-file-path",level:2}],u={toc:l},d="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"routing"},"Routing"),(0,a.kt)("p",null,"Understand how you can set up routes for your REST API\napplication."),(0,a.kt)("h2",{id:"basic-routing"},"Basic routing"),(0,a.kt)("p",null,"The most basic Athenna routes accept an url and a closure,\nproviding a basic and expressive method of defining routes\nand behavior without complicated routing configuration\nfiles:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route } from '@athenna/http' // Route Facade\n\nRoute.get('/welcome', ({ response }) => {\n    return response.status(200).send({ hello: 'world' })\n})\n")),(0,a.kt)("h3",{id:"available-router-methods"},"Available Router Methods"),(0,a.kt)("p",null,"The router allows you to register routes that respond to\nany HTTP verb:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get(url, callback)\nRoute.post(url, callback)\nRoute.put(url, callback)\nRoute.patch(url, callback)\nRoute.delete(url, callback)\nRoute.options(url, callback)\n")),(0,a.kt)("p",null,"Sometimes you may need to register a route that responds to\nmultiple HTTP verbs. You may do so using the ",(0,a.kt)("inlineCode",{parentName:"p"},"any")," method\nto respond to all HTTP verbs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.any('/', () => {\n    //\n})\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"When defining multiple routes that share the same ",(0,a.kt)("inlineCode",{parentName:"p"},"url"),",\nroutes using the ",(0,a.kt)("inlineCode",{parentName:"p"},"get"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"post"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"put"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"patch"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"delete"),",\nand ",(0,a.kt)("inlineCode",{parentName:"p"},"options")," methods should be defined before routes\nusing the ",(0,a.kt)("inlineCode",{parentName:"p"},"any")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect")," methods. This ensures the\nincoming request is matched with the correct route.")),(0,a.kt)("h2",{id:"redirect-routes"},"Redirect routes"),(0,a.kt)("p",null,"If you are defining a route that redirects to another\n",(0,a.kt)("inlineCode",{parentName:"p"},"url"),", you may use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Route.redirect")," method. This\nmethod provides a convenient shortcut so that you do not\nhave to define a full route or controller for performing\na simple redirect:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.redirect('/here', '/there')\n")),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"Route.redirect")," returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"302")," status code.\nYou may customize the status code using the optional\nthird parameter:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.redirect('/here', '/there', 301)\n")),(0,a.kt)("h2",{id:"the-route-list"},"The route list"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"route:list")," command can easily provide an overview of all the routes that are defined by your application:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan route:list\n")),(0,a.kt)("p",null,"By default, the route middleware that are assigned to each\nroute will not be displayed in the ",(0,a.kt)("inlineCode",{parentName:"p"},"route:list")," output;\nhowever, you can instruct Athenna to display the route\nmiddleware by adding the ",(0,a.kt)("inlineCode",{parentName:"p"},"-m, --middleware")," option to the\ncommand:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"node artisan route:list --middleware\n")),(0,a.kt)("h2",{id:"route-parameters"},"Route parameters"),(0,a.kt)("p",null,"Sometimes you will need to capture segments of the URL\nwithin your route. For example, you may need to capture\na user's ID from the URL. You may do so by defining route\nparameters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/user/:id', ({ response, params }) => {\n    return response.send({ user: `User ${params.id}` })\n})\n")),(0,a.kt)("p",null,"You may define as many route parameters as required by\nyour route:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.get('/posts/:postId/comments/:commentId', ({ response, params }) => {\n    return response.send({ params })\n})\n")),(0,a.kt)("h2",{id:"route-groups"},"Route groups"),(0,a.kt)("p",null,"Route groups allow you to share route attributes, such as\nmiddleware, across a large number of routes without\nneeding to define those attributes on each route."),(0,a.kt)("h3",{id:"middleware"},"Middleware"),(0,a.kt)("p",null,"To assign ",(0,a.kt)("a",{parentName:"p",href:"/docs/the-basics/http/middlewares"},(0,a.kt)("inlineCode",{parentName:"a"},"middlewares")),"\nto all routes within a group, you may use the ",(0,a.kt)("inlineCode",{parentName:"p"},"middleware"),"\nmethod before defining the group. Middleware is executed\nin the order they are listed in the array:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.group(() => {\n    Route.get('/', () => {\n        // Uses first & second middleware...\n    })\n\n    Route.get('/user/profile', () => {\n        // Uses first & second middleware...\n    })\n}).middleware(['first', 'second'])\n")),(0,a.kt)("h3",{id:"route-prefixes"},"Route prefixes"),(0,a.kt)("p",null,"The prefix method may be used to prefix each route in the\ngroup with a given URL. For example, you may want to prefix\nall route URLs within the group with ",(0,a.kt)("inlineCode",{parentName:"p"},"admin"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Route.group(() => {\n    Route.get('/users', () => {\n        // Matches only the \"/admin/users\" URL\n    })\n}).prefix('admin')\n")),(0,a.kt)("h2",{id:"cross-origin-resource-sharing-cors"},"Cross-origin resource sharing (CORS)"),(0,a.kt)("p",null,"Cross-Origin Resource Sharing (CORS) is an HTTP-header\nbased mechanism that allows a server to indicate any\norigins (domain, scheme, or port) other than its own from\nwhich a browser should permit loading resources."),(0,a.kt)("p",null,"Athenna uses the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-cors"},(0,a.kt)("inlineCode",{parentName:"a"},"@fastify/cors")),"\nplugin inside ",(0,a.kt)("inlineCode",{parentName:"p"},"HttpKernel"),". All the configurations that\n",(0,a.kt)("inlineCode",{parentName:"p"},"@fastify/cors")," supports can be set inside ",(0,a.kt)("inlineCode",{parentName:"p"},"Path.config('http.ts')"),"\nfile in the ",(0,a.kt)("inlineCode",{parentName:"p"},"cors")," object."),(0,a.kt)("p",null,"Cors plugin is registered in your http application by\ndefault, but you can remove it uninstalling ",(0,a.kt)("inlineCode",{parentName:"p"},"@fastify/cors"),"\nfrom your application, or removing the ",(0,a.kt)("inlineCode",{parentName:"p"},"cors")," object key\nfrom your ",(0,a.kt)("inlineCode",{parentName:"p"},"Path.config('http.ts')")," file."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"For more information on CORS and CORS headers, please\nconsult the ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"},"MDN web documentation on CORS"),".")),(0,a.kt)("h2",{id:"custom-route-file-path"},"Custom route file path"),(0,a.kt)("p",null,"You can change the name and the path of your ",(0,a.kt)("inlineCode",{parentName:"p"},"Path.route('http.ts')")," file.\nTo do that you need to set the new path to ",(0,a.kt)("inlineCode",{parentName:"p"},"Ignite.httpServer()")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=\"Path.bootstrap('dev.ts')\"",title:"\"Path.bootstrap('dev.ts')\""},"import { Ignite } from '@athenna/core'\n\nconst ignite = await new Ignite().load(import.meta.url)\n\nawait ignite.httpServer({\n  routePath: './bootstrap/routes/http-dev.js' \ud83d\udc48\n})\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Always remember that when using relative paths to set something\nin Athenna, you need to use your project root path as reference,\njust like in the example above.")))}c.isMDXComponent=!0}}]);