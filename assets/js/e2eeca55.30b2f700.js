"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[1535],{6370:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>l});var t=i(5893),r=i(1151);const a={title:"Middlewares",sidebar_position:2,description:"Understand how you can set up middlewares in your REST API application."},o="Middlewares",d={id:"rest-api-application/middlewares",title:"Middlewares",description:"Understand how you can set up middlewares in your REST API application.",source:"@site/docs/rest-api-application/middlewares.mdx",sourceDirName:"rest-api-application",slug:"/rest-api-application/middlewares",permalink:"/docs/rest-api-application/middlewares",draft:!1,unlisted:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/rest-api-application/middlewares.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Middlewares",sidebar_position:2,description:"Understand how you can set up middlewares in your REST API application."},sidebar:"tutorialSidebar",previous:{title:"Routing",permalink:"/docs/rest-api-application/routing"},next:{title:"Controllers",permalink:"/docs/rest-api-application/controllers"}},s={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Defining middleware",id:"defining-middleware",level:2},{value:"Registering middleware",id:"registering-middleware",level:2},{value:"Global middleware",id:"global-middleware",level:3},{value:"Assigning middleware to routes",id:"assigning-middleware-to-routes",level:3},{value:"Intercept middleware",id:"intercept-middleware",level:2},{value:"Terminate middleware",id:"terminate-middleware",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"middlewares",children:"Middlewares"}),"\n",(0,t.jsx)(n.p,{children:"Understand how you can set up middlewares in your REST\nAPI application."}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"Middleware provides a convenient mechanism for inspecting\nand filtering HTTP requests entering your application.\nFor example, Athenna includes a middleware that verifies\nthe user of your application is authenticated. If the user\nis not authenticated, the middleware will throw an\nunauthorized error. However, if the user is authenticated,\nthe middleware will allow the request to proceed further\ninto the application."}),"\n",(0,t.jsx)(n.p,{children:"Additional middleware can be written to perform a variety\nof tasks besides authentication. For example, a logging\nmiddleware might log all incoming requests to your\napplication."}),"\n",(0,t.jsx)(n.h2,{id:"defining-middleware",children:"Defining middleware"}),"\n",(0,t.jsxs)(n.p,{children:["To create a new middleware, use the ",(0,t.jsx)(n.code,{children:"make:middleware"}),"\ncommand:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"node artisan make:middleware EnsureApiKeyIsValid\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This command will place a new ",(0,t.jsx)(n.code,{children:"EnsureApiKeyIsValid"})," class\nwithin your ",(0,t.jsx)(n.code,{children:"app/http/middlewares"})," directory. In this\nmiddleware, we will only allow access to the route if the\nsupplied api key input matches a specified value. Otherwise,\nwe will throw an unauthorized exception:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Context, Middleware, MiddlewareContract } from '@athenna/http'\n\n@Middleware()\nexport class EnsureApiKeyIsValid implements MiddlewareContract {\n    public async handle(ctx: Context): Promise<void> {\n        if (queries.apiKey !== 'my-api-key') {\n            throw new UnauthorizedException('Your api key does not match with application api key.')\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As you can see, if the given ",(0,t.jsx)(n.code,{children:"apiKey"})," does not match our\napplication api key, the middleware will return an\nunauthorized exception to the client; otherwise, the\nrequest will be passed further into the application."]}),"\n",(0,t.jsx)(n.p,{children:'It\'s best to envision middleware as a series of "layers"\nHTTP requests must pass through before they hit your\napplication. Each layer can examine the request and even\nreject it entirely.'}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["All middleware is resolved via the ",(0,t.jsx)(n.a,{href:"/docs/architecture-concepts/container",children:(0,t.jsx)(n.code,{children:"service container"})}),",\nso you can use any dependencies you need within a\nmiddlewares constructor."]})}),"\n",(0,t.jsx)(n.h2,{id:"registering-middleware",children:"Registering middleware"}),"\n",(0,t.jsxs)(n.p,{children:["If you are using ",(0,t.jsx)(n.code,{children:"make:middleware"})," command to register your\nmiddlewares, Athenna will auto register your middlewares\ninside the ",(0,t.jsx)(n.code,{children:"middlewares"})," property of your ",(0,t.jsx)(n.code,{children:".athennarc.json"}),"\nfile:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "middlewares": [\n    "#app/http/middlewares/EnsureApiKeyIsValid"\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["Remember that if you have not created your middleware using\n",(0,t.jsx)(n.code,{children:"make:middleware"})," command, you will need to manually add it\nto ",(0,t.jsx)(n.code,{children:"middlewares"})," array. If you don't do that, Athenna will\nnot register your middleware in the ",(0,t.jsx)(n.a,{href:"/docs/architecture-concepts/service-container",children:"service container"}),"\nand you will not be able to use it."]})}),"\n",(0,t.jsx)(n.h3,{id:"global-middleware",children:"Global middleware"}),"\n",(0,t.jsxs)(n.p,{children:["If you want a middleware to run during every HTTP request\nto your application, you can set the ",(0,t.jsx)(n.code,{children:"isGlobal"})," value to\ntrue in the ",(0,t.jsx)(n.code,{children:"@Middleware()"})," annotation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Middleware } from '@athenna/http'\nimport type { Context, MiddlewareContract } from '@athenna/http'\n\n@Middleware({ isGlobal: true }) \ud83d\udc48\nexport class EnsureApiKeyIsValid implements MiddlewareContract {\n    public async handle(ctx: Context): Promise<void> {\n        if (queries.apiKey !== 'my-api-key') {\n            throw new UnauthorizedException('Your api key does not match with application api key.')\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you are not using TypeScript, you can use the\n",(0,t.jsx)(n.code,{children:"globalMiddlewares"})," array in your ",(0,t.jsx)(n.code,{children:".athennarc.json"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "globalMiddlewares": [\n    "#app/http/middlewares/EnsureApiKeyIsValid"\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"assigning-middleware-to-routes",children:"Assigning middleware to routes"}),"\n",(0,t.jsxs)(n.p,{children:["If you would like to assign middleware to specific routes,\nyou can use the name of your middleware class in camelCase\n(",(0,t.jsx)(n.code,{children:"ensureApiKeyIsValid"}),"). But we recommend you to assign a\ncustom name to your middleware using the ",(0,t.jsx)(n.code,{children:"@Middleware()"}),"\nannotation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Middleware } from '@athenna/http'\nimport type { Context, MiddlewareContract } from '@athenna/http'\n\n@Middleware({ name: 'auth' }) \ud83d\udc48\nexport class EnsureApiKeyIsValid implements MiddlewareContract {\n    public async handle(ctx: Context): Promise<void> {\n        if (queries.apiKey !== 'my-api-key') {\n            throw new UnauthorizedException('Your api key does not match with application api key.')\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you are not using TypeScript, you can use the\n",(0,t.jsx)(n.code,{children:"namedMiddlewares"})," object in your ",(0,t.jsx)(n.code,{children:".athennarc.json"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "namedMiddlewares": {\n    "auth": "#app/http/middlewares/EnsureApiKeyIsValid"\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Once the middleware name has been defined, you may use the\n",(0,t.jsx)(n.code,{children:"Route.middleware()"})," method to assign middleware to a route:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"Route.get('/welcome', () => {\n    //\n}).middleware('auth') \ud83d\udc48\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["To learn more about the ",(0,t.jsx)(n.code,{children:"@Middleware()"})," annotation, visit the\n",(0,t.jsx)(n.a,{href:"/docs/rest-api-application/annotations#middleware",children:"REST API annotations documentation page."})]})}),"\n",(0,t.jsx)(n.h2,{id:"intercept-middleware",children:"Intercept middleware"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes a middleware may need to do some work ",(0,t.jsx)(n.strong,{children:"before"}),"\nthe HTTP response has been sent to the client. For this\npurpose, you can use the Athenna interceptor middleware.\nTo create one, you can use the following command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"node artisan make:interceptor InterceptMiddleware\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Just like ",(0,t.jsx)(n.code,{children:"make:middleware"}),", Athenna will auto register the\nmiddleware if using ",(0,t.jsx)(n.code,{children:"make:interceptor"})," command. The above\ncommand will produce the following content at\n",(0,t.jsx)(n.code,{children:"app/http/interceptors/InterceptMiddleware.ts"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Interceptor } from '@athenna/http'\nimport type { InterceptContext, InterceptorContract } from '@athenna/http'\n\n@Interceptor()\nexport class InterceptMiddleware implements InterceptorContract {\n    public async intercept(ctx: InterceptContext): Promise<unknown> {\n      ctx.body.intercepted = true\n\n      return ctx.body\n    }\n}\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"As you can see in the example above, you should always\nreturn the intercepted response body in interceptors."})}),"\n",(0,t.jsxs)(n.p,{children:["The registration process of Athenna interceptors is the\nsame of ",(0,t.jsx)(n.a,{href:"/docs/rest-api-application/middlewares#registering-middleware",children:"middlewares"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["To assign your interceptor to a route, you can use the\n",(0,t.jsx)(n.code,{children:"Route.interceptor()"})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"Route.get('/welcome', () => {\n    //\n}).interceptor('interceptMiddleware') \ud83d\udc48\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["To learn more about the ",(0,t.jsx)(n.code,{children:"@Interceptor()"})," annotation, visit the\n",(0,t.jsx)(n.a,{href:"/docs/rest-api-application/annotations#interceptor",children:"REST API annotations documentation page."})]})}),"\n",(0,t.jsx)(n.h2,{id:"terminate-middleware",children:"Terminate middleware"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes a middleware may need to do some work ",(0,t.jsx)(n.strong,{children:"after"}),"\nthe HTTP response has been sent to the client. For this\npurpose, you can use the Athenna interceptor middleware.\nTo create one, you can use the following command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"node artisan make:terminator TerminateMiddleware\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Just like ",(0,t.jsx)(n.code,{children:"make:middleware"}),", Athenna will auto register the\nmiddleware if using ",(0,t.jsx)(n.code,{children:"make:terminator"})," command. The above\ncommand will produce the following content at\n",(0,t.jsx)(n.code,{children:"app/http/terminators/TerminateMiddleware.ts"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Terminator } from '@athenna/http'\nimport type { TerminateContext, TerminatorContract } from '@athenna/http'\n\n@Terminator()\nexport class TerminateMiddleware implements TerminatorContract {\n    public async terminate(ctx: TerminateContext): Promise<void> {}\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The registration process of Athenna terminators is the\nsame of ",(0,t.jsx)(n.a,{href:"/docs/rest-api-application/middlewares#registering-middleware",children:"middlewares"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["To assign your terminator to a route, you can use the\n",(0,t.jsx)(n.code,{children:"Route.terminator()"})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"Route.get('/welcome', () => {\n    //\n}).terminator('terminateMiddleware') \ud83d\udc48\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["The requests log created by Athenna when the ",(0,t.jsx)(n.code,{children:"logger"}),"\nproperty is true in your ",(0,t.jsx)(n.code,{children:"Path.config('http.ts')"})," file are\nhandled by a terminator middleware! You can see the code\n",(0,t.jsx)(n.a,{href:"https://github.com/AthennaIO/Http/blob/develop/src/kernels/HttpKernel.ts#L93",children:"here"}),"."]})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["To learn more about the ",(0,t.jsx)(n.code,{children:"@Terminator()"})," annotation, visit the\n",(0,t.jsx)(n.a,{href:"/docs/rest-api-application/annotations#terminator",children:"REST API annotations documentation page."})]})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>o});var t=i(7294);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);