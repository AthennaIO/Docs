"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[1802],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=a.createContext({}),c=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,g=u["".concat(i,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(g,l(l({ref:n},p),{},{components:t})):a.createElement(g,l({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=u;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var c=2;c<r;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1600:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=t(7462),o=t(3366),r=(t(7294),t(3905)),l=["components"],s={sidebar_position:2,id:"helpers",title:"Helpers",hide_title:!0,hide_table_of_contents:!0,tags:["Helpers","Digging Deeper"]},i=void 0,c={unversionedId:"digging-deeper/helpers",id:"digging-deeper/helpers",title:"Helpers",description:"\ud83c\udfe0",source:"@site/docs/digging-deeper/helpers.mdx",sourceDirName:"digging-deeper",slug:"/digging-deeper/helpers",permalink:"/docs/digging-deeper/helpers",editUrl:"https://github.com/AthennaIO/Docs/docs/digging-deeper/helpers.mdx",tags:[{label:"Helpers",permalink:"/docs/tags/helpers"},{label:"Digging Deeper",permalink:"/docs/tags/digging-deeper"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"helpers",title:"Helpers",hide_title:!0,hide_table_of_contents:!0,tags:["Helpers","Digging Deeper"]},sidebar:"tutorialSidebar",previous:{title:"REPL",permalink:"/docs/digging-deeper/repl"},next:{title:"Collections",permalink:"/docs/digging-deeper/collections"}},p=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Available helpers",id:"id-available-helpers",children:[{value:"File",id:"id-file",children:[],level:3},{value:"Folder",id:"id-folder",children:[],level:3},{value:"Is",id:"id-is",children:[],level:3},{value:"String",id:"id-string",children:[],level:3},{value:"Exception",id:"id-exception",children:[],level:3},{value:"Path",id:"id-path",children:[],level:3},{value:"Json",id:"id-json",children:[],level:3},{value:"Module",id:"id-module",children:[],level:3},{value:"Route",id:"id-route",children:[],level:3},{value:"Number",id:"id-number",children:[],level:3},{value:"Token",id:"id-token",children:[],level:3},{value:"Parser",id:"id-parse",children:[],level:3},{value:"Clean",id:"id-clean",children:[],level:3},{value:"Debug",id:"id-debug",children:[],level:3}],level:2}],d={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("nav",{"aria-label":"breadcrumbs"},(0,r.kt)("ul",{class:"breadcrumbs"},(0,r.kt)("li",{class:"breadcrumbs__item"},(0,r.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,r.kt)("li",{class:"breadcrumbs__item"},(0,r.kt)("a",{class:"breadcrumbs__link"},"Digging Deeper")),(0,r.kt)("li",{class:"breadcrumbs__item"},(0,r.kt)("a",{class:"breadcrumbs__link",href:"/docs/digging-deeper/helpers"},"Helpers")))),(0,r.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,r.kt)("h1",{id:"helpers"},"Helpers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"introduction"},(0,r.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"available-helpers"},(0,r.kt)("a",{parentName:"h4",href:"#id-available-helpers"},"Available helpers")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"file"},(0,r.kt)("a",{parentName:"h4",href:"#id-file"},"File"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"folder"},(0,r.kt)("a",{parentName:"h4",href:"#id-folder"},"Folder"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"is"},(0,r.kt)("a",{parentName:"h4",href:"#id-is"},"Is"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"string"},(0,r.kt)("a",{parentName:"h4",href:"#id-string"},"String"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"exception"},(0,r.kt)("a",{parentName:"h4",href:"#id-exception"},"Exception"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"path"},(0,r.kt)("a",{parentName:"h4",href:"#id-path"},"Path"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"json"},(0,r.kt)("a",{parentName:"h4",href:"#id-json"},"Json"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"module"},(0,r.kt)("a",{parentName:"h4",href:"#id-module"},"Module"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"route"},(0,r.kt)("a",{parentName:"h4",href:"#id-route"},"Route"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"number"},(0,r.kt)("a",{parentName:"h4",href:"#id-number"},"Number"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"token"},(0,r.kt)("a",{parentName:"h4",href:"#id-token"},"Token"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"parser"},(0,r.kt)("a",{parentName:"h4",href:"#id-parser"},"Parser"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"clean"},(0,r.kt)("a",{parentName:"h4",href:"#id-clean"},"Clean"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"debug"},(0,r.kt)("a",{parentName:"h4",href:"#id-debug"},"Debug")))))),(0,r.kt)("h2",{id:"id-introduction"},"Introduction"),(0,r.kt)("p",null,'Athenna includes a variety of "helpers" classes inside the ',(0,r.kt)("inlineCode",{parentName:"p"},"@athenna/common")," package that comes by default installed in your application. Many of these classes are used\nby the framework itself; however, you are free to use them in your own applications if you find them convenient."),(0,r.kt)("h2",{id:"id-available-helpers"},"Available helpers"),(0,r.kt)("h3",{id:"id-file"},"File"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"File")," class to create an instance of a file, it's existing or not."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { File } from '@athenna/common'\n\n// With the File helper you can manipulate an existing file, or create a new one\n\nconst existentFile = new File('path/to/existent/file.txt')\nconst nonExistentFile = new File('path/to/nonExistent/file.txt', Buffer.from('File content'))\n\n// Now existentFile and nonExistentFile instances are created, but not loaded/created\n\n// using load here because the file already exists, if using create, would generate an exception\nexistentFile.loadSync({ withContent: true })\n// property withContent if true, will save the file content in the instance, Be careful with big files\nnonExistentFile.createSync().loadSync({ withContent: true })\n\n// now the files will have this properties\nconsole.log(existentFile.createdAt)\nconsole.log(existentFile.accessedAt)\nconsole.log(existentFile.modifiedAt)\nconsole.log(existentFile.fileSize)\nconsole.log(existentFile.content)\n\n// you can delete the file using remove method\nexistentFile.removeSync() // void\n\n// you can get the content of the file with getContent method\nconsole.log(existentFile.getContentSync()) // Some Buffer instance\n\n// you can use toJSON method to get the instance informations in JSON\nconsole.log(existentFile.toJSON()) // { ...infos }\n\n// you can make a copy from existentFile using copy\nconsole.log(existentFile.copySync('path/to/copy.txt'))\n\n// you can move existentFile to other path using move\nconsole.log(existentFile.moveSync('path/to/move.txt'))\n\n// you can add content to the end of the file with append\nconsole.log(existentFile.appendSync(Buffer.from('Content\\n')))\n\n// you can add content to the top of the file with prepend\nconsole.log(existentFile.prependSync(Buffer.from('Content\\n')))\n\n// File uses readable streams in async methods to not block the event loop when handling huge files content\nawait existentFile.load()\nawait existentFile.copy()\nawait existentFile.move()\nawait existentFile.remove()\nawait existentFile.create()\nawait existentFile.append()\nawait existentFile.prepend()\nawait existentFile.getContent()\n\n// You can use safeRemove method to delete the file without any exception if it does no exists\nawait File.safeRemove(existentFile.path)\n\n// You can use isFileSync to verify if path is a file or directory\nawait File.isFileSync('package.json')\n\n// You can use existsSync to verify if file exists\nawait File.existsSync('package.json')\n\n// You can use createFileOfSize to create a fake file with determined size\n// 100MB\nawait File.createFileOfSize('fake.js', 1024 * 1024 * 100)\n")),(0,r.kt)("h3",{id:"id-folder"},"Folder"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Folder")," class to create an instance of a Folder, it's existing or not."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Folder } from '@athenna/common'\n\n// With the Folder helper you can manipulate an existing folder, or create a new one\n\nconst existentFolder = new Folder('path/to/existent/folder')\nconst nonExistentFolder = new Folder('path/to/nonExistent/folder')\n\n// Now existentFolder and nonExistentFolder instances are created, but not loaded/created\n\n// using load here because the file already exists, if using create, would generate an exception\nexistentFolder.loadSync({ withSub: true, withFileContent: false })\n\n// property withSub if true, will load files and subFolders from the folder\n// property withFileContent if true, will get the content of all files in the folder, Be careful with big files\nnonExistentFolder.createSync().loadSync({ withSub: true, withFileContent: true })\n\n// now the folders will have this properties\nconsole.log(existentFolder.createdAt)\nconsole.log(existentFolder.accessedAt)\nconsole.log(existentFolder.modifiedAt)\nconsole.log(existentFolder.folderSize)\n\n// you can delete the folder using remove method\nexistentFolder.removeSync() // void\n\n// you can use toJSON method to get the instance informations in JSON\nconsole.log(existentFolder.toJSON()) // { ...infos }\n\n// you can make a copy from existentFolder using copy\nconsole.log(existentFolder.copySync('path/to/copy'))\n\n// you can move existentFolder to other path using move\nconsole.log(existentFolder.moveSync('path/to/move'))\n\n// you can use getFilesByPattern method to get all files in the folder that match some pattern\n// if recursive is true, will go inside subFolders too\nconst recursive = true\nconsole.log(existentFolder.getFilesByPattern('**/*.ts', recursive)) // [...files instance]\n\n// you can use getFoldersByPattern method to get all folders in the folder that match some pattern\nconsole.log(existentFolder.getFoldersByPattern('**', recursive)) // [...folders instance]\n\n// Folder uses readable streams in async methods to not block the event loop when handling huge files content\nawait existentFolder.load()\nawait existentFolder.copy()\nawait existentFolder.move()\nawait existentFolder.remove()\nawait existentFolder.create()\n\n// You can use safeRemove method to delete the folder without any exception if it does no exists\nawait Folder.safeRemove(existentFile.path)\n\n// You can use isFolderSync to verify if path directory or file\nawait Folder.isFolderSync('path/to/folder')\n\n// You can use existsSync to verify if folders exists\nawait Folder.existsSync('path/to/folder')\n")),(0,r.kt)("h3",{id:"id-is"},"Is"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Is")," class to validate if value is from some type or is empty, is uuid, is cpf, is cep, etc..."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Is } from '@athenna/common'\n\n// Is class is a validator. It validates if the value matches the name of the function and returns a boolean\n\nIs.Empty('') // true\nIs.Empty([]) // true\nIs.Empty([1]) // false\nIs.Empty({}) // true\nIs.Empty({ hello: 'world' }) // false\nIs.Empty(' ') // true\nIs.Empty('hello') // false\n\nIs.Json('not-valid-json') // false\nIs.Ip('not-valid-ip') // false\nIs.Uuid('not-valid-uuid') // false\nIs.Cep('not-valid-cep') // false\nIs.Cpf('not-valid-cpf') // false\nIs.Cnpj('not-valid-cnpj') // false\nIs.Async(() => {\n}) // false\nIs.Async(async () => {\n}) // true\nIs.Async(() => {\n  new Promise((resolve => resolve()))\n}) // true\n\nIs.String('value') // true\nIs.Undefined('value') // false\nIs.Null('value') // false\nIs.Boolean('value') // false\nIs.Buffer('value') // false\nIs.Number('value') // false\nIs.Object('value') // false\nIs.Date('value') // false\nIs.Array('value') // false\nIs.Regexp('value') // false\nIs.Error('value') // false\nIs.Function('value') // false\nIs.Class('value') // false\nIs.Integer('value') // false\nIs.Float('value') // false\n\nIs.ArrayOfObjects('') // false\nIs.ArrayOfObjects([1, 2, 3]) // false\nIs.ArrayOfObjects([{ hello: 'world' }]) // true\n")),(0,r.kt)("h3",{id:"id-string"},"String"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," class to generate random strings, normalizations and case changes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { String } from '@athenna/common'\n\n// With the String class you can change the case of strings\n\nconst string = 'Hello world'\nconst capitalize = true\n\nString.toCamelCase(string) // 'helloWorld'\nString.toPascalCase(string) // 'HelloWorld'\nString.toNoCase(string) // 'hello world'\nString.toConstantCase(string) // HELLO_WORLD\nString.toDashCase(string) // 'hello-world'\nString.toDashCase(string, capitalize) // 'Hello-World'\nString.toDotCase(string) // 'hello.world'\nString.toDotCase(string, capitalize) // 'Hello.World'\nString.toSnakeCase(string) // 'hello_world'\nString.toSnakeCase(string, capitalize) // 'Hello_World'\nString.toSentenceCase(string) // 'Hello world'\nString.toSentenceCase(string, capitalize) // 'Hello World'\n\n// You can generate random strings by size and random hexadecimal colors\n\nString.generateRandom(10) // 'GpXuZScThi'\nString.generateRandomColor() // '#d5063b'\n\n// You can put a string in plural or in singular and in ordinal number\n\nString.pluralize(string) // 'Hello worlds'\nString.singularize(String.pluralize(string)) // 'Hello world'\nString.ordinalize('1') // '1st'\nString.ordinalize('2') // '2nd'\nString.ordinalize('3') // '3rd'\nString.ordinalize('10') // '10th'\n\n// And you can also normalize base64 string\n\nString.normalizeBase64('+++///===') // '___'\n")),(0,r.kt)("h3",{id:"id-exception"},"Exception"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Exception")," class to extend the Error object and create custom exceptions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Exception } from '@athenna/common'\n\nconst content = 'An error has ocurred in your application!'\nconst status = 500\nconst code = 'APPLICATION_ERROR'\nconst help = 'Delete your code and start again'\n\nconst exception = new Exception(content, status, code, help)\n\nconst withStack = true\nconsole.log(exception.toJSON(withStack))\n\n/**\n * {\n *   code: 'APPLICATION_ERROR',\n *   status: 500,\n *   content: 'An error has ocurred in your application!',\n *   help: 'Delete your code and start again',\n *   stack: ...,\n * }\n */\n\nconsole.log(await exception.prettify()) // Pretty exception log using Youch API\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Extending Exception helper")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Exception } from '@athenna/common'\n\nexport class InternalServerException extends Exception {\n  public constructor(content = 'An internal server error has ocurred', status = 500) {\n    super(content, status)\n  }\n}\n\nthrow new InternalServerException()\n")),(0,r.kt)("h3",{id:"id-path"},"Path"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Path")," class to get the absolute path from project folders."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Path } from '@athenna/common'\n\nconst subPath = '/hello'\n\nPath.pwd(subPath, beforePath) // '/home/your/computer/path/your-project-name/hello'\n\n// You can set a default before path for most Path methods\nPath.defaultBeforePath = 'build'\n\nPath.pwd(subPath, beforePath) // '/home/your/computer/path/your-project-name/build/hello'\n\nPath.pwd('/src/') // '/home/your/computer/path/your-project-name/build/src'\n")),(0,r.kt)("h3",{id:"id-json"},"Json"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Json")," class to parse json without errors, deep copy, observeChanges inside objects and more."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Json } from \'@athenna/common\'\n\nconst textWithJsons = \'string with a Json inside of it {"text":"hello"} and one more Json {"hello":"world"}\'\n\nJson.getJson(textWithJsons) // [\'{"text":"hello"}\', \'{"hello":"world"}\']\n\nconst text = \'a string that is not a valid JSON\'\n\nJson.parse(text) // null\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const object = {\n  test: 'hello',\n  hello: () => 'hy',\n}\n\nconst objectCopy = Json.copy(object)\n\nobjectCopy.test = 'hello from copy'\nobjectCopy.hello = () => 'hy from copy'\n\nconsole.log(object.test) // hello\nconsole.log(object.hello()) // hy\nconsole.log(objectCopy.test) // hello from copy\nconsole.log(objectCopy.hello()) // hy from copy\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const data = {}\n\nconst doSomething = (value, args) => {\n  console.log(`Name changed to: ${value}`, args)\n}\n\nconst args = {\n  value: 'args are the same second parameter of doSomething function'\n}\n\nJson.observeChanges(data, 'name', doSomething, args)\n\ndata.name = 'Jo\xe3o'\n\n// Name changed to: Jo\xe3o { value: 'args are the same second parameter of doSomething function' }\n\nconst object = {\n  number1: 'good string',\n  number2: 'bad string',\n}\n\nconst readyToSaveOnDatabase = Json.fillable(object, ['number1'])\n\nconsole.log(readyToSaveOnDatabase) // { number1: 'good string' }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const array = [1, 1, 2, 4, 4]\n\nconsole.log(Json.removeDuplicated(array)) // [1, 2, 4]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const array = ['a', 'b', 'c'] // Array length = 2 (0, 1, 2)\nconst raffledValue = Json.raffle(array) // Raffled value from the array, could be a, b or c\n\nconsole.log(raffledValue) // a, b or c\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const object = {\n  hello: {\n    world: {\n      value: {\n        hello: 'Hello World!',\n      },\n    },\n  },\n}\n\nconst value = Json.get(object, 'hello.world.value.hello') // 'Hello World!'\nconst undefinedValue = Json.get(object, 'hello.worlld.value.hello') // undefined\nconst defaultValue = Json.get(object, 'hello.worlld.value.hello', 'Hi World!') // 'Hi World!'\nconst fullObject = Json.get(object, '') // Same as object { hello: { world: { value: { hello: 'Hello World!' } } } }\nconst defaultValueInObjectNull = Json.get(undefined, '', { hello: 'world' }) // { hello: 'world' }\n")),(0,r.kt)("h3",{id:"id-module"},"Module"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Module")," class to resolve modules exports, import modules using hrefs' ensuring compatibility between OS's, creating\naliases for your modules exports and creating ",(0,r.kt)("inlineCode",{parentName:"p"},"__filename")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"__dirname")," properties."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Module } from '@athenna/common'\n\nconst module = await Module.get(import('#src/Helpers/Options'))\n\nconsole.log(module.name) // Options\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Module } from '@athenna/common'\n\nconst modules = await Module.getAll([import('#src/Helpers/Number'), import('#src/Helpers/Options')])\n\nconsole.log(modules[0].name) // Number\nconsole.log(modules[1].name) // Options\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Module } from '@athenna/common'\n\nconst modules = await Module.getAllWithAlias([\n  import('#src/Helpers/Number'),\n  import('#src/Helpers/Options')\n], 'App/Helpers')\n\nconsole.log(modules[0].module.name) // Number\nconsole.log(modules[0].alias) // 'App/Helpers/Number'\n\nconsole.log(modules[1].module.name) // Options\nconsole.log(modules[1].alias) // 'App/Helpers/Options'\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Path, Module } from '@athenna/common'\n\nconst module = await Module.getFrom(Path.config('app.js'))\n\nconsole.log(module.name) // Athenna\nconsole.log(module.description) // Athenna application\nconsole.log(module.environment) // production\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Path, Module } from '@athenna/common'\n\nconst modules = await Module.getAllFromWithAlias(Path.config(), 'App/Configs')\nconst appConfigFile = module[0].module\nconst appConfigAlias = module[0].alias\n\nconsole.log(appConfigAlias) // App/Configs/App\nconsole.log(appConfigFile.name) // Athenna\nconsole.log(appConfigFile.description) // Athenna application\nconsole.log(appConfigFile.environment) // production\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Module } from '@athenna/common'\n\nconst setInGlobalTrue = true\nconst setInGlobalFalse = false\n\nconst dirname = Module.createDirname(import.meta.url, setInGlobalFalse)\nconst filename = Module.createFilename(import.meta.url, setInGlobalTrue)\n\nconsole.log(__dirname) // Error! __dirname is not defined in global\nconsole.log(__filename) // '/Users/...'\n")),(0,r.kt)("h3",{id:"id-route"},"Route"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Route")," class to manipulate paths, getParams, getQueryParams, create route matcher RegExp etc."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Route } from '@athenna/common'\n\nconst absolutePath = '/tests/:id/users/:user_id'\nconst path = '/tests/1/users/2?page=1&limit=10'\n\nRoute.getQueryString(path) // ?page=1&limit=10\nRoute.removeQueryParams(path) // /tests/1/users/2\nRoute.getQueryParamsValue(path) // { page: '1', limit: '10' }\nRoute.getQueryParamsName(path) // ['path', 'limit']\nRoute.getParamsValue(absolutePath, path) // { id: '1', user_id: '10' }\nRoute.getParamsName(absolutePath) // ['id', 'user_id']\n\nconst regExpMatcher = Route.createMatcher(absolutePath) // /^(?:\\/tests\\b)(?:\\/[\\w-]+)(?:\\/users\\b)(?:\\/[\\w-]+)$/\n\nregExpMatcher.test(path) // false - because of queryParams\nregExpMatcher.test(Route.removeQueryParams(path)) // true\n")),(0,r.kt)("h3",{id:"id-number"},"Number"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Number")," class to manipulate numbers the best way."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Number } from '@athenna/common'\n\nconst arrayOfNumbers = [2, 4]\nconst stringNumber = \"Hello my name is Jo\xe3o, I'm 20 year old!\"\n\n// Get the lower/higher number from the array\nconsole.log(Number.getLower(arrayOfNumbers)) // 2\nconsole.log(Number.getHigher(arrayOfNumbers)) // 4\n\n// Extract numbers from strings\nconsole.log(Number.extractNumber(stringNumber)) // '20'\nconsole.log(Number.extractNumbers(stringNumber)) // ['20']\n\n// Return the average from infinite parameters or array of numbers\nconsole.log(Number.argsAverage(2, 4)) // 3\nconsole.log(Number.arrayAverage(arrayOfNumbers)) // 3\n\n// Generate random integers values between interval\nconsole.log(Number.randomIntFromInterval(1, 1)) // 1\nconsole.log(Number.randomIntFromInterval(1, 2)) // 1\nconsole.log(Number.randomIntFromInterval(1, 2)) // 2\nconsole.log(Number.randomIntFromInterval(1, 10)) // 8\n\n")),(0,r.kt)("h3",{id:"id-token"},"Token"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Token")," class to generate UUID tokens using a prefix, and validate it to using ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/uuidv4"},(0,r.kt)("inlineCode",{parentName:"a"},"uuidv4"))," library."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Token } from '@athenna/common'\n\n// Do not use the char \"-\", it would break token.verify() method\nconst uuidGeneratedToken = Token.generate('yourServicePrefix')\nconsole.log(uuidGeneratedToken) // yourServicePrefix-c546b11c-2c2b-11eb-adc1-0242ac120002\n\nconst isUuid = Token.verify(uuidGeneratedToken)\nconsole.log(isUuid) // true\n")),(0,r.kt)("h3",{id:"id-parse"},"Parser"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Parser")," class to parse all type of data of you application."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Parser } from '@athenna/common'\n\n// Convert a string to array using a separator\n\nconst string1 = '1,2,3'\nconst separator = ','\nconst parsed1 = Parser.stringToArray(string1, separator)\n\nconsole.log(parsed1) // ['1', '2', '3']\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Convert an array to string using separators\n\nParser.arrayToString(['1', '2', '3', '4']) // '1, 2, 3 and 4'\nParser.arrayToString(['1', '2', '3', '4'], // '1|2|3-4'\n  { separator: '|', lastSeparator: '-' }\n)\n\n// Pair separator is only for two indexes arrays\nParser.arrayToString(['1', '2'], { // '1_2'\n  pairSeparator: '_',\n})\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const string2 = 'aaaasadzczaaa21313'\nconst parsed2 = Parser.stringToNumber(string2)\n\nconsole.log(parsed2) // 21313\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const object = {\n  joao: 'joao',\n  email: 'lenonsec7@gmail.com',\n}\nconst parsed3 = Parser.jsonToFormData(object)\n\nconsole.log(parsed3) // &joao=joao&email=lenonSec7%40gmail.com\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const parsed4 = Parser.formDataToJson('?joao=joao&email=lenonSec7%40gmail.com')\n\nconsole.log(parsed4) // { joao: 'joao', email: 'lenonsec7@gmail.com' }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const message = 'Link: https://google.com'\n\n// Convert url to and HTML href\n\nconsole.log(Parser.linkToHref(message)) // Link: <a href=\"https://google.com\">https://google.com</a>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Convert number size to bytes\n\nParser.sizeToByte(1024) // '1KB'\nParser.sizeToByte(1048576) // '1MB'\nParser.sizeToByte(1073741824) // '1GB'\nParser.sizeToByte(1099511627776) // '1TB'\nParser.sizeToByte(1125899906842624) // '1PB'\n\n// Convert bytes to number size\n\nParser.byteToSize('1KB') // 1024\nParser.byteToSize('1MB') // 1048576\nParser.byteToSize('1GB') // 1073741824\nParser.byteToSize('1TB') // 1099511627776\nParser.byteToSize('1PB') // 1125899906842624\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Convert time string to ms\n\nParser.timeToMs('2 days') // 172800000\nParser.timeToMs('1d') // 86400000\nParser.timeToMs('10h') // 36000000\nParser.timeToMs('-10h') // -36000000\nParser.timeToMs('1 year') // 31557600000\nParser.timeToMs('-1 year') // -31557600000\n\n// Convert ms to time string\n\nconst long = true\n\nParser.msToTime(172800000, long) // '2 days'\nParser.msToTime(86400000) // 1d\nParser.msToTime(36000000) // 10h\nParser.msToTime(-36000000) // -10h\nParser.msToTime(31557600000, long) // 1 year\nParser.msToTime(-31557600000, long) // -1 year\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Convert status code to reason\n\nParser.statusCodeToReason(200) // OK\nParser.statusCodeToReason('201') // CREATED\nParser.statusCodeToReason(404) // NOT_FOUND\nParser.statusCodeToReason('500') // INTERNAL_SERVER_ERROR\n\n// Convert reason to status code\n\nParser.reasonToStatusCode('OK') // 200\nParser.reasonToStatusCode('created') // 201\nParser.reasonToStatusCode('NOT_found') // 404\nParser.reasonToStatusCode('internal server error') // 500\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const url =\n  'postgresql://postgres:root@127.0.0.1:5432/postgres?paramOne=1&paramTwo=2&paramThree=3'\n\n// Convert database connection url to connection object\nconst connectionObject = Parser.dbUrlToConnectionObj(url)\n\n/** connectionObject result\n * {\n *   protocol: 'postgresql',\n *   user: 'postgres',\n *   password: 'root',\n *   host: '127.0.0.1',\n *   port: 5432,\n *   database: 'postgres',\n *   options: {\n *     paramOne: '1',\n *     paramTwo: '2',\n *     paramThree: '3',\n *   }\n * }\n */\n\n// Convert connection object to database connection url\nconst connectionUrl = Parser.connectionObjToDbUrl(connectionObject)\n\n/** connectionUrl result\n * postgresql://postgres:root@127.0.0.1:5432/postgres?paramOne=1&paramTwo=2&paramThree=3\n */\n")),(0,r.kt)("h3",{id:"id-clean"},"Clean"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Clean")," class to clean arrays and objects."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Clean } from \'@athenna/common\'\n\nconst array = [null, undefined, 1, "number"]\n\nconsole.log(Clean.cleanArray(array)) // [1, "number"]\n\nconst object = {\n  number1: "number",\n  number2: null,\n  number3: undefined,\n  number4: 1,\n}\n\nconst object2 = {\n  number1: null,\n  number2: [object],\n}\n\nconsole.log(Clean.cleanObject(object)) // { number1: "number", number4: 1 }\nconsole.log(Clean.cleanArraysInObject(object2)) // { number2: [{ number1: "number", number4: 1 }]}\n\n')),(0,r.kt)("h3",{id:"id-debug"},"Debug"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Debug")," class to generate debug logs in Athenna format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Debug } from '@athenna/common'\n\nconst context = 'API'\nconst namespace = 'api:main'\n\nconst debug = new Debug(context, namespace)\n\n// You can still change the context/namespace of the instance in runtime\ndebug\n  .buildContext(context)\n  .buildNamespace(namespace)\n  .log('Hello World!') // api:main [Athenna Debugger] - PID: 85580 - 02/15/2022, 11:47:56 AM [API] Hello World! +0ms\n\n// You can log objects too, it will be converted to string in the formatter\ndebug\n  .buildContext('Object')\n  .buildNamespace('api:object')\n  .log({ hello: 'world' }) // api:object [Athenna Debugger] - PID: 85770 - 02/15/2022, 11:53:48 AM [Object] {\"hello\":\"world\"} +0ms\n")))}u.isMDXComponent=!0}}]);