"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[8026],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=s.createContext({}),u=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return s.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return n?s.createElement(h,i(i({ref:t},p),{},{components:n})):s.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<a;u++)i[u]=n[u];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7194:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});var s=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],o={sidebar_position:2,id:"http-tests",title:"HTTP Tests",hide_title:!0,hide_table_of_contents:!0,tags:["Testing"]},l=void 0,u={unversionedId:"testing/http-tests",id:"testing/http-tests",title:"HTTP Tests",description:"\ud83c\udfe0",source:"@site/docs/testing/http-tests.mdx",sourceDirName:"testing",slug:"/testing/http-tests",permalink:"/docs/testing/http-tests",editUrl:"https://github.com/AthennaIO/Docs/docs/testing/http-tests.mdx",tags:[{label:"Testing",permalink:"/docs/tags/testing"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"http-tests",title:"HTTP Tests",hide_title:!0,hide_table_of_contents:!0,tags:["Testing"]},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/testing/getting-started"},next:{title:"Mocking",permalink:"/docs/testing/mocking"}},p=[{value:"Introduction",id:"id-introduction",children:[],level:2},{value:"Making requests",id:"id-making-requests",children:[{value:"Customizing request",id:"id-customizing-request",children:[],level:3}],level:2},{value:"Available assertions",id:"id-available-assertions",children:[{value:"Response assertions",id:"id-response-assertions",children:[],level:3}],level:2}],c={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("nav",{"aria-label":"breadcrumbs"},(0,a.kt)("ul",{class:"breadcrumbs"},(0,a.kt)("li",{class:"breadcrumbs__item"},(0,a.kt)("a",{class:"breadcrumbs__link",href:"/"},"\ud83c\udfe0")),(0,a.kt)("li",{class:"breadcrumbs__item"},(0,a.kt)("a",{class:"breadcrumbs__link"},"Testing")),(0,a.kt)("li",{class:"breadcrumbs__item"},(0,a.kt)("a",{class:"breadcrumbs__link",href:"/docs/testing/http-tests"},"HTTP Tests")))),(0,a.kt)("span",{class:"badge badge--secondary margin-top-bot"},"version 1.0.0"),(0,a.kt)("h1",{id:"http-testing"},"HTTP Testing"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"introduction"},(0,a.kt)("a",{parentName:"h4",href:"#id-introduction"},"Introduction"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"making-requests"},(0,a.kt)("a",{parentName:"h4",href:"#id-making-requests"},"Making requests")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"customizing-requests"},(0,a.kt)("a",{parentName:"h4",href:"#id-cutomizing-requests"},"Customizing requests"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"available-assertions"},(0,a.kt)("a",{parentName:"h4",href:"#id-available-assertions"},"Available assertions")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"response-assertions"},(0,a.kt)("a",{parentName:"h4",href:"#id-response-assertions"},"Response assertions")))))),(0,a.kt)("h2",{id:"id-introduction"},"Introduction"),(0,a.kt)("p",null,"Athenna provides a very fluent API for making HTTP requests to your application and examining the responses. For example,\ntake a look at the e2e test defined below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Test } from '@athenna/test'\n\nexport class WelcomeTest extends Test {\n    /**\n     * Run your test.\n     *\n     * @param {import('@athenna/test').HttpTestContext} ctx\n     */\n    async shouldMakeGetRequest({ request }) {\n        const response = await request.get('/api/welcome')\n\n        response.assertStatusCode(200)\n    }\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"get")," method of ",(0,a.kt)("inlineCode",{parentName:"p"},"request")," object makes a GET request into the application, while the ",(0,a.kt)("inlineCode",{parentName:"p"},"assertStatusCode")," method asserts\nthat the returned response should have the given HTTP status code. In addition to this simple assertion, Athenna also\ncontains a variety of assertions for inspecting the response headers, content, JSON structure, and more."),(0,a.kt)("h2",{id:"id-making-requests"},"Making requests"),(0,a.kt)("p",null,'To make a request to your application, you may invoke the get, post, put, patch, or delete methods within your test. These\nmethods do not actually issue a "real" HTTP request to your application. Instead, the entire network request is simulated\ninternally.'),(0,a.kt)("p",null,"Test request methods return an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"@athenna/core/TestResponse"),", which provides a variety of helpful assertions\nthat allow you to inspect your application's responses:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Test } from '@athenna/test'\n\nexport class WelcomeTest extends Test {\n    /**\n     * Run your test.\n     *\n     * @param {import('@athenna/test').HttpTestContext} ctx\n     */\n    async shouldMakeGetRequest({ request }) {\n        const response = await request.get('/api/welcome')\n\n        response.assertStatusCode(200)\n    }\n}\n")),(0,a.kt)("p",null,"In general, each of your tests should only make one request to your application. Unexpected behavior may occur if multiple\nrequests are executed within a single test method."),(0,a.kt)("h3",{id:"id-customizing-request"},"Customizing request"),(0,a.kt)("p",null,"You may set any options your might need as second parameter on ",(0,a.kt)("inlineCode",{parentName:"p"},"request")," object to customize the request's headers, params,\nqueries, cookies and other stuff you might need before it is sent to the application:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Test } from '@athenna/test'\n\nexport class WelcomeTest extends Test {\n    /**\n     * Run your test.\n     *\n     * @param {import('@athenna/test').HttpTestContext} ctx\n     */\n    async shouldMakeGetRequest({ request }) {\n        const response = await request.get('/api/welcome', { headers: {\n            'X-Header': '10'\n        }})\n\n        response.assertStatusCode(200)\n    }\n}\n")),(0,a.kt)("h2",{id:"id-available-assertions"},"Available assertions"),(0,a.kt)("h3",{id:"id-response-assertions"},"Response assertions"),(0,a.kt)("p",null,"Athenna ",(0,a.kt)("inlineCode",{parentName:"p"},"@athenna/core/TestResponse")," class provides a variety of custom assertion methods that you may utilize when testing\nyour application. These assertions may be accessed on the response that is returned by the json, get, post, put, and delete\ntest methods, and you can find than ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/AthennaIO/Core/blob/develop/src/Helpers/Tests/TestResponse.js"},(0,a.kt)("inlineCode",{parentName:"a"},"checking the repository file here")),"."))}d.isMDXComponent=!0}}]);