"use strict";(self.webpackChunk_athenna_docs=self.webpackChunk_athenna_docs||[]).push([[2206],{9909:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=o(5893),t=o(1151);const s={title:"Controllers",sidebar_position:3,description:"Understand how you can set up controllers in your REST API application."},i="Controllers",l={id:"rest-api-application/controllers",title:"Controllers",description:"Understand how you can set up controllers in your REST API application.",source:"@site/docs/rest-api-application/controllers.mdx",sourceDirName:"rest-api-application",slug:"/rest-api-application/controllers",permalink:"/docs/rest-api-application/controllers",draft:!1,unlisted:!1,editUrl:"https://github.com/AthennaIO/Docs/tree/main/docs/rest-api-application/controllers.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Controllers",sidebar_position:3,description:"Understand how you can set up controllers in your REST API application."},sidebar:"tutorialSidebar",previous:{title:"Middlewares",permalink:"/docs/rest-api-application/middlewares"},next:{title:"Request Context",permalink:"/docs/rest-api-application/request-context"}},a={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Writing controllers",id:"writing-controllers",level:2},{value:"Resource controllers",id:"resource-controllers",level:2},{value:"Partial resource routes",id:"partial-resource-routes",level:3},{value:"Nested resources",id:"nested-resources",level:3},{value:"Dependency injection and controllers",id:"dependency-injection-and-controllers",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"controllers",children:"Controllers"}),"\n",(0,r.jsx)(n.p,{children:"Understand how you can set up controllers in your REST API\napplication."}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:['Instead of defining all of your request handling logic as\nclosures in your route files, you may wish to organize this\nbehavior using "controller" classes. Controllers can group\nrelated request handling logic into a single class. For\nexample, a ',(0,r.jsx)(n.code,{children:"UserController"})," class might handle all incoming\nrequests related to users, including showing, creating,\nupdating, and deleting users. By default, controllers are\nstored in the ",(0,r.jsx)(n.code,{children:"Path.controllers()"})," directory."]}),"\n",(0,r.jsx)(n.h2,{id:"writing-controllers",children:"Writing controllers"}),"\n",(0,r.jsx)(n.p,{children:"Let's take a look at an example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Context, Controller } from '@athenna/http'\n\n@Controller()\nexport class UserController {\n  public async show({ response, params }: Context) {\n    return response.send(`User_${params.id}`)\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can define a route to this controller method like so:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"Route.controller('UserController').get('/user/:id', 'show')\n\n// or\n\nRoute.get('/user/:id', 'UserController.show')\n"})}),"\n",(0,r.jsxs)(n.p,{children:["When an incoming request matches the specified route URL,\nthe ",(0,r.jsx)(n.code,{children:"show"})," method on the ",(0,r.jsx)(n.code,{children:"UserController"})," class will be\ninvoked and the route parameters will be passed to the\nmethod."]}),"\n",(0,r.jsx)(n.h2,{id:"resource-controllers",children:"Resource controllers"}),"\n",(0,r.jsxs)(n.p,{children:['If you think of each model in your application as a\n"resource", it is typical to perform the same sets of\nactions against each resource in your application. For\nexample, imagine your application contains a ',(0,r.jsx)(n.code,{children:"Photo"})," model\nand a ",(0,r.jsx)(n.code,{children:"Movie"})," model. It is likely that users can create,\nread, update, or delete these resources."]}),"\n",(0,r.jsxs)(n.p,{children:['Because of this common use case, Athenna resource routing\nassigns the typical creation, read, update, and delete\n("CRUD") routes to a controller with a single line of code.\nTo get started, we can use the ',(0,r.jsx)(n.code,{children:"make:controller"})," command's\n",(0,r.jsx)(n.code,{children:"--resource"})," option to quickly create a controller to handle\nthese actions:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"node artisan make:controller PhotoController --resource\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This command will generate a controller at\n",(0,r.jsx)(n.code,{children:"Path.controllers('PhotoController.ts')"}),". The controller will\ncontain a method for each of the available resource\noperations. Next, you may register a resource route that\npoints to the controller:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"Route.resource('photos', 'PhotoController')\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This single route declaration creates multiple routes to\nhandle a variety of actions on the resource. The generated\ncontroller will already have methods stubbed for each of\nthese actions. Remember, you can always get a quick\noverview of your application's routes by running the\n",(0,r.jsx)(n.code,{children:"route:list"})," command."]}),"\n",(0,r.jsx)(n.h3,{id:"partial-resource-routes",children:"Partial resource routes"}),"\n",(0,r.jsx)(n.p,{children:"When declaring a resource route, you may specify a subset\nof actions the controller should handle instead of the\nfull set of default actions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"Route.resource('photos', 'PhotoController').only(['index', 'show'])\n\nRoute.resource('photos', 'PhotoController').except(['store', 'update', 'destroy'])\n"})}),"\n",(0,r.jsx)(n.h3,{id:"nested-resources",children:"Nested resources"}),"\n",(0,r.jsx)(n.p,{children:'Sometimes you may need to define routes to a nested\nresource. For example, a photo resource may have multiple\ncomments that may be attached to the photo. To nest the\nresource controllers, you may use "dot" notation in your\nroute declaration:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"Route.resource('photos.comments', 'PhotoCommentController')\n"})}),"\n",(0,r.jsx)(n.p,{children:"This route will register a nested resource that may be\naccessed with URLs like the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"/photos/:photoId/comments/:commentId\n"})}),"\n",(0,r.jsx)(n.h2,{id:"dependency-injection-and-controllers",children:"Dependency injection and controllers"}),"\n",(0,r.jsxs)(n.p,{children:["The Athenna ",(0,r.jsx)(n.a,{href:"/docs/architecture-concepts/container",children:(0,r.jsx)(n.code,{children:"service container"})}),"\nis used to resolve all Athenna controllers. As a result,\nyou are able to use any dependencies your controller may\nneed using ",(0,r.jsx)(n.code,{children:"@Inject()"})," annotation or in its constructor.\nThe declared dependencies will automatically be resolved\nand injected into the controller instance when receiving\na request from the server:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Inject } from '@athenna/ioc'\nimport { Controller, type Context } from '@athenna/http'\nimport { UserService } from '#app/services/UserService'\nimport { ProfileService } from '#app/services/ProfileService'\n\n@Controller()\nexport class UserController {\n  private userService: UserService\n\n  @Inject() \ud83d\udc48\n  private profileService: ProfileService\n\n  public constructor(userService) { \ud83d\udc48\n    this.userService = userService\n  }\n\n  public async show({ response, params }: Context) {\n    //\n  }\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["To learn more about the ",(0,r.jsx)(n.code,{children:"@Controller()"})," annotation, visit the\n",(0,r.jsx)(n.a,{href:"/docs/rest-api-application/annotations#controller",children:"REST API annotations documentation page."})]})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>l,a:()=>i});var r=o(7294);const t={},s=r.createContext(t);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);